<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAACABoBQAAJgAAACAgAAAAAAgAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAQAAAAAAAACAAAC3fmIAsmQ9ALBbMQCxbk0At2c+AOWPZADki14A4oRUAOB5
        RQDGelMA0YtoAOibdQDmlWwAxpR6ANm6qwC+c04A66+QAKhWLADutZgA6qWCAL9qPwC/e1kA9NG/AO+8
        owDuuJ0A15JwANSpkwDAgGEA993QAPHCqwC2aUIA0aWPAMqTdwD66uEA9dbGAPPOuwDsq4sAxoxvAMB+
        XQC+e1kAs3dYALJyUQDJgVwAyoViANGCWgDPg10Ay4RgAPDApwC1i3YAxZ2JALZvSwDzyrUArnhcAP8A
        AADQppEA5KSEAMdzSQCXTCYAsGxKAMhvQgDFhGMAwnxYAOOIWgC3d1cAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAACAwQFAQEAAQAAAAAAAAAD
        BwgJCgABAQEAAAALDAADDQ4DAAABAQABAQAAERITFBUWAAAAAAEBAQAAACkYGRobAAAAAAABAAEBAAA+
        Hh8ZIAAAAAAAAAABAAAAIiMkJR8mIgAnPykqKwAAAAAvLS4vLQAPMRgkGBgyAAAAAAAAAAAAAAAFHx81
        NgAAAAAANzc3AAAAORoZJSsAADcAADcAADcAOhUUOxkFAAA3AAA3NzcAPQ4mIAA+PwA3ADcANwAANwgV
        AwAAAAAANwA3ADc3NwAgKwAAAAAAADcANwAAAAAAAAAAAAAAAAD/7wAA/AsAAPgjAACQyQAAgeMAAIPp
        AACD+wAAgIMAAMEBAAD/wQAA8cEAALaBAACxCQAAVh8AAFE/AABf/wAAKAAAACAAAABAAAAAAQAIAAAA
        AAAABAAAAAAAAAAAAAAAAQAAAAEAAAAAAAD///8AAJ4AAK3frQDG38YArXVaAJxZMQCcUSkAnF05ALWC
        awBSvnsA/9/WAPf7/wC9ZTkA1n1SAN6GWgDeglIAxm1CAK1VKQCcVTEArWVCAOeOYwDniloA1nVCAJxJ
        IQDGlnsAUr5SAK2+ewClWTEAzoJaAOeacwDnkmsA3n1KAK1hOQDWhmMA5557AMZpQgClTSEApVUxAKVh
        OQCUSSEApVEhAMZpOQC9fWMAvXFKALV1UgDnooQA3opjAACCAAClVSkA77qlAO++rQC9aUIA77KUAO+m
        hAC1aUIArVEhAO+2nADvrpQA3pZrAMaKawDepowA3pp7AO+qjAD//9YA1pZzAPfLtQDvw60Axn1aAPfT
        xgC9aTkA99vOAPfPvQC9gmMAtVkpAPfj1gCtVSEA3pZzAK1dMQC9jnMApV05AJRNKQClbVIAzoprAP/n
        3gDeoowA57KcAN6mhADWknMAvW1CAN6qlAC1fWMAxnVKALVtSgCMRRgA/9//AK2eUgD/PCkArX0AAP99
        AACtfVIArW1KAP99UgD/vnsA98ulAK1dKQD/nq0AtYZrAP+eewCtfSkArVkxAOeiewD/XSkA1oJaAP/P
        zgD/fSkAtWE5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAQIEAQEBAAAA
        AAAAAAAAAAAAAAAABQYHCAkAAAAAAAMKAgsBAgwAAAAAAAAAAAAAAAAABw0ODw8QERITAAAAAQICCgEC
        CwAAAAAAAAAAAAAAFA0VFRUWDw8QEBcYGQAMGgICGwIEAAAAAAAAAAAAABwdHh8VFRYWFg8QECASAAQB
        AgoCAgEDAAAAAAAAAAAhIiMeHx8fFRElJicoKSoAAwoCAQoCAgMAKywsLQAALR0uIx4eHi8lAAAAAAAA
        AAAEAjAKAQIKAQAxMjNZAABZNTYuIyMvHAAAAAAAAAAAAAsKAgIbAgEMADcyMjJMEjI5OjYuOxwAAAAA
        AAAAAAAAAAECCgICCgQAPD0zMz0+MzI5Oj8SAAAAAAAAAAAAAAAAAQJACgICAwAAQUJDQ0MzMjI5HQAA
        AAAAAAAAAAAAAAAMAgQBAgoEAABERUJCQzMzMjkSAAAAAAAAAAAAAAAAAAwBCwECBAsAAEZHSEJCQzMz
        REkAAAAAAAAAAAAAAAAAAAAAAQJAAAAASktFSEJDQzM+LEwsAAAAAAAAAAAAAAAAAAALAQQAAAAqR0tI
        SEJDMzIyNU1OAAAAAAAAAE8FUChRBlIAAAAAAFMzVEdIQkMzMzI1P0wAAAAlIS08PVZIR0dHBQAAAAAA
        AFNUVEtFMldBHVlKAAAAJTMyM0NCSEhISEhaWwAAAAAARFwqSiodQQAAAAAAAAAHPUJDM0NCQkhISENQ
        AAAAAAAAAAAAAAAAAAAAAAAAAABdJV09Q0NCQkJCSF4AAAAAAAAAAAAAAQEBXwwBAAAAAAAABS0zQ0ND
        QkNIBgAAAAAAAAAAAAFgYWJiY2QMAAAAAAAHMjMzM0MzM0NlAAAAAAAAAAABAWZiZ2hpYwsAAAAAAB0y
        OTIzMzMyMysAAAAAAAxfAQEBYGJfAWpiCwAAAAAxPzo1OTJBPTI5QQkAAAAMaGJoAQxmY2liYmYBAAAA
        HDsuNjo1OSgYMzlXCAAAAAtmYmYBAWRibGhtYgsAAE4iIyNvNjUhAAAhQzVRAAALaGJmYgsBZmNfAWZi
        CwBMLx4eHh4jHQUAAFJdIVsAAAFmYgticAxgYmJiYmYMERUfHx8fHnEcAAAAAAAAAAAAC2JsDGxiCwsL
        C3ILARAWFhYVFSMdHAAAAAAAAAAAAAxsYmgBcmJsDAAADRYQEA8PFiM2DRQAAAAAAAAAAAAAAWJzAQAM
        bWMMAAANKi8eLi5NWTEAAAAAAAAAAAAAAAAACwsAAAFyCwAAAAAASXQSTi0AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////Af/8HwH/8AcB/8ABAf+AAQD/AAEAhgD/AIYB
        /wCAA/+AgAf/gMAP/4DAD/+AwA//8cAD//HAAfwHwAHAB+ADgAPgP4AD///AA/8D8AP+AfAD/AHwA+AB
        4AHAAcABwAGAYYABAGGAAAD/gAAB/wBgA/8IYA//mPg///////8=
</value>
  </data>
</root>