

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0366 */
/* Compiler settings for dte.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __dte_h__
#define __dte_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ___DTE_FWD_DEFINED__
#define ___DTE_FWD_DEFINED__
typedef interface _DTE _DTE;
#endif 	/* ___DTE_FWD_DEFINED__ */


#ifndef ___Solution_FWD_DEFINED__
#define ___Solution_FWD_DEFINED__
typedef interface _Solution _Solution;
#endif 	/* ___Solution_FWD_DEFINED__ */


#ifndef __Projects_FWD_DEFINED__
#define __Projects_FWD_DEFINED__
typedef interface Projects Projects;
#endif 	/* __Projects_FWD_DEFINED__ */


#ifndef __Project_FWD_DEFINED__
#define __Project_FWD_DEFINED__
typedef interface Project Project;
#endif 	/* __Project_FWD_DEFINED__ */


#ifndef __ProjectItems_FWD_DEFINED__
#define __ProjectItems_FWD_DEFINED__
typedef interface ProjectItems ProjectItems;
#endif 	/* __ProjectItems_FWD_DEFINED__ */


#ifndef __ProjectItem_FWD_DEFINED__
#define __ProjectItem_FWD_DEFINED__
typedef interface ProjectItem ProjectItem;
#endif 	/* __ProjectItem_FWD_DEFINED__ */


#ifndef __Commands_FWD_DEFINED__
#define __Commands_FWD_DEFINED__
typedef interface Commands Commands;
#endif 	/* __Commands_FWD_DEFINED__ */


#ifndef __TextBuffer_FWD_DEFINED__
#define __TextBuffer_FWD_DEFINED__
typedef interface TextBuffer TextBuffer;
#endif 	/* __TextBuffer_FWD_DEFINED__ */


#ifndef __AddIns_FWD_DEFINED__
#define __AddIns_FWD_DEFINED__
typedef interface AddIns AddIns;
#endif 	/* __AddIns_FWD_DEFINED__ */


#ifndef __AddIn_FWD_DEFINED__
#define __AddIn_FWD_DEFINED__
typedef interface AddIn AddIn;
#endif 	/* __AddIn_FWD_DEFINED__ */


#ifndef __Properties_FWD_DEFINED__
#define __Properties_FWD_DEFINED__
typedef interface Properties Properties;
#endif 	/* __Properties_FWD_DEFINED__ */


#ifndef __Property_FWD_DEFINED__
#define __Property_FWD_DEFINED__
typedef interface Property Property;
#endif 	/* __Property_FWD_DEFINED__ */


#ifndef __ISupportVSProperties_FWD_DEFINED__
#define __ISupportVSProperties_FWD_DEFINED__
typedef interface ISupportVSProperties ISupportVSProperties;
#endif 	/* __ISupportVSProperties_FWD_DEFINED__ */


#ifndef __SelectedItems_FWD_DEFINED__
#define __SelectedItems_FWD_DEFINED__
typedef interface SelectedItems SelectedItems;
#endif 	/* __SelectedItems_FWD_DEFINED__ */


#ifndef __SelectedItem_FWD_DEFINED__
#define __SelectedItem_FWD_DEFINED__
typedef interface SelectedItem SelectedItem;
#endif 	/* __SelectedItem_FWD_DEFINED__ */


#ifndef __SelectionContainer_FWD_DEFINED__
#define __SelectionContainer_FWD_DEFINED__
typedef interface SelectionContainer SelectionContainer;
#endif 	/* __SelectionContainer_FWD_DEFINED__ */


#ifndef __Windows_FWD_DEFINED__
#define __Windows_FWD_DEFINED__
typedef interface Windows Windows;
#endif 	/* __Windows_FWD_DEFINED__ */


#ifndef __Window_FWD_DEFINED__
#define __Window_FWD_DEFINED__
typedef interface Window Window;
#endif 	/* __Window_FWD_DEFINED__ */


#ifndef __LinkedWindows_FWD_DEFINED__
#define __LinkedWindows_FWD_DEFINED__
typedef interface LinkedWindows LinkedWindows;
#endif 	/* __LinkedWindows_FWD_DEFINED__ */


#ifndef __Events_FWD_DEFINED__
#define __Events_FWD_DEFINED__
typedef interface Events Events;
#endif 	/* __Events_FWD_DEFINED__ */


#ifndef __TaskList_FWD_DEFINED__
#define __TaskList_FWD_DEFINED__
typedef interface TaskList TaskList;
#endif 	/* __TaskList_FWD_DEFINED__ */


#ifndef __TaskItems_FWD_DEFINED__
#define __TaskItems_FWD_DEFINED__
typedef interface TaskItems TaskItems;
#endif 	/* __TaskItems_FWD_DEFINED__ */


#ifndef __TaskItem_FWD_DEFINED__
#define __TaskItem_FWD_DEFINED__
typedef interface TaskItem TaskItem;
#endif 	/* __TaskItem_FWD_DEFINED__ */


#ifndef __ToolBox_FWD_DEFINED__
#define __ToolBox_FWD_DEFINED__
typedef interface ToolBox ToolBox;
#endif 	/* __ToolBox_FWD_DEFINED__ */


#ifndef __ToolBoxTabs_FWD_DEFINED__
#define __ToolBoxTabs_FWD_DEFINED__
typedef interface ToolBoxTabs ToolBoxTabs;
#endif 	/* __ToolBoxTabs_FWD_DEFINED__ */


#ifndef __ToolBoxTab_FWD_DEFINED__
#define __ToolBoxTab_FWD_DEFINED__
typedef interface ToolBoxTab ToolBoxTab;
#endif 	/* __ToolBoxTab_FWD_DEFINED__ */


#ifndef __ToolBoxItem_FWD_DEFINED__
#define __ToolBoxItem_FWD_DEFINED__
typedef interface ToolBoxItem ToolBoxItem;
#endif 	/* __ToolBoxItem_FWD_DEFINED__ */


#ifndef __ToolBoxItems_FWD_DEFINED__
#define __ToolBoxItems_FWD_DEFINED__
typedef interface ToolBoxItems ToolBoxItems;
#endif 	/* __ToolBoxItems_FWD_DEFINED__ */


#ifndef __OutputWindow_FWD_DEFINED__
#define __OutputWindow_FWD_DEFINED__
typedef interface OutputWindow OutputWindow;
#endif 	/* __OutputWindow_FWD_DEFINED__ */


#ifndef __OutputWindowPanes_FWD_DEFINED__
#define __OutputWindowPanes_FWD_DEFINED__
typedef interface OutputWindowPanes OutputWindowPanes;
#endif 	/* __OutputWindowPanes_FWD_DEFINED__ */


#ifndef __OutputWindowPane_FWD_DEFINED__
#define __OutputWindowPane_FWD_DEFINED__
typedef interface OutputWindowPane OutputWindowPane;
#endif 	/* __OutputWindowPane_FWD_DEFINED__ */


#ifndef __IExtensibleObjectSite_FWD_DEFINED__
#define __IExtensibleObjectSite_FWD_DEFINED__
typedef interface IExtensibleObjectSite IExtensibleObjectSite;
#endif 	/* __IExtensibleObjectSite_FWD_DEFINED__ */


#ifndef __Document_FWD_DEFINED__
#define __Document_FWD_DEFINED__
typedef interface Document Document;
#endif 	/* __Document_FWD_DEFINED__ */


#ifndef __Documents_FWD_DEFINED__
#define __Documents_FWD_DEFINED__
typedef interface Documents Documents;
#endif 	/* __Documents_FWD_DEFINED__ */


#ifndef __WindowConfigurations_FWD_DEFINED__
#define __WindowConfigurations_FWD_DEFINED__
typedef interface WindowConfigurations WindowConfigurations;
#endif 	/* __WindowConfigurations_FWD_DEFINED__ */


#ifndef __WindowConfiguration_FWD_DEFINED__
#define __WindowConfiguration_FWD_DEFINED__
typedef interface WindowConfiguration WindowConfiguration;
#endif 	/* __WindowConfiguration_FWD_DEFINED__ */


#ifndef __Command_FWD_DEFINED__
#define __Command_FWD_DEFINED__
typedef interface Command Command;
#endif 	/* __Command_FWD_DEFINED__ */


#ifndef __Globals_FWD_DEFINED__
#define __Globals_FWD_DEFINED__
typedef interface Globals Globals;
#endif 	/* __Globals_FWD_DEFINED__ */


#ifndef __StatusBar_FWD_DEFINED__
#define __StatusBar_FWD_DEFINED__
typedef interface StatusBar StatusBar;
#endif 	/* __StatusBar_FWD_DEFINED__ */


#ifndef __Find_FWD_DEFINED__
#define __Find_FWD_DEFINED__
typedef interface Find Find;
#endif 	/* __Find_FWD_DEFINED__ */


#ifndef __ItemOperations_FWD_DEFINED__
#define __ItemOperations_FWD_DEFINED__
typedef interface ItemOperations ItemOperations;
#endif 	/* __ItemOperations_FWD_DEFINED__ */


#ifndef __IVsProfferCommands_FWD_DEFINED__
#define __IVsProfferCommands_FWD_DEFINED__
typedef interface IVsProfferCommands IVsProfferCommands;
#endif 	/* __IVsProfferCommands_FWD_DEFINED__ */


#ifndef __ObjectExtenders_FWD_DEFINED__
#define __ObjectExtenders_FWD_DEFINED__
typedef interface ObjectExtenders ObjectExtenders;
#endif 	/* __ObjectExtenders_FWD_DEFINED__ */


#ifndef __IExtenderSite_FWD_DEFINED__
#define __IExtenderSite_FWD_DEFINED__
typedef interface IExtenderSite IExtenderSite;
#endif 	/* __IExtenderSite_FWD_DEFINED__ */


#ifndef __IExtenderProvider_FWD_DEFINED__
#define __IExtenderProvider_FWD_DEFINED__
typedef interface IExtenderProvider IExtenderProvider;
#endif 	/* __IExtenderProvider_FWD_DEFINED__ */


#ifndef __IExtenderProviderUnk_FWD_DEFINED__
#define __IExtenderProviderUnk_FWD_DEFINED__
typedef interface IExtenderProviderUnk IExtenderProviderUnk;
#endif 	/* __IExtenderProviderUnk_FWD_DEFINED__ */


#ifndef __IFilterProperties_FWD_DEFINED__
#define __IFilterProperties_FWD_DEFINED__
typedef interface IFilterProperties IFilterProperties;
#endif 	/* __IFilterProperties_FWD_DEFINED__ */


#ifndef ___dispDTEEvents_FWD_DEFINED__
#define ___dispDTEEvents_FWD_DEFINED__
typedef interface _dispDTEEvents _dispDTEEvents;
#endif 	/* ___dispDTEEvents_FWD_DEFINED__ */


#ifndef __BuildDependencies_FWD_DEFINED__
#define __BuildDependencies_FWD_DEFINED__
typedef interface BuildDependencies BuildDependencies;
#endif 	/* __BuildDependencies_FWD_DEFINED__ */


#ifndef __BuildDependency_FWD_DEFINED__
#define __BuildDependency_FWD_DEFINED__
typedef interface BuildDependency BuildDependency;
#endif 	/* __BuildDependency_FWD_DEFINED__ */


#ifndef __SolutionConfigurations_FWD_DEFINED__
#define __SolutionConfigurations_FWD_DEFINED__
typedef interface SolutionConfigurations SolutionConfigurations;
#endif 	/* __SolutionConfigurations_FWD_DEFINED__ */


#ifndef __SolutionConfiguration_FWD_DEFINED__
#define __SolutionConfiguration_FWD_DEFINED__
typedef interface SolutionConfiguration SolutionConfiguration;
#endif 	/* __SolutionConfiguration_FWD_DEFINED__ */


#ifndef __SolutionContext_FWD_DEFINED__
#define __SolutionContext_FWD_DEFINED__
typedef interface SolutionContext SolutionContext;
#endif 	/* __SolutionContext_FWD_DEFINED__ */


#ifndef __SolutionBuild_FWD_DEFINED__
#define __SolutionBuild_FWD_DEFINED__
typedef interface SolutionBuild SolutionBuild;
#endif 	/* __SolutionBuild_FWD_DEFINED__ */


#ifndef __UIHierarchyItem_FWD_DEFINED__
#define __UIHierarchyItem_FWD_DEFINED__
typedef interface UIHierarchyItem UIHierarchyItem;
#endif 	/* __UIHierarchyItem_FWD_DEFINED__ */


#ifndef __UIHierarchyItems_FWD_DEFINED__
#define __UIHierarchyItems_FWD_DEFINED__
typedef interface UIHierarchyItems UIHierarchyItems;
#endif 	/* __UIHierarchyItems_FWD_DEFINED__ */


#ifndef __UIHierarchy_FWD_DEFINED__
#define __UIHierarchy_FWD_DEFINED__
typedef interface UIHierarchy UIHierarchy;
#endif 	/* __UIHierarchy_FWD_DEFINED__ */


#ifndef __UndoContext_FWD_DEFINED__
#define __UndoContext_FWD_DEFINED__
typedef interface UndoContext UndoContext;
#endif 	/* __UndoContext_FWD_DEFINED__ */


#ifndef __Configuration_FWD_DEFINED__
#define __Configuration_FWD_DEFINED__
typedef interface Configuration Configuration;
#endif 	/* __Configuration_FWD_DEFINED__ */


#ifndef __SolutionContexts_FWD_DEFINED__
#define __SolutionContexts_FWD_DEFINED__
typedef interface SolutionContexts SolutionContexts;
#endif 	/* __SolutionContexts_FWD_DEFINED__ */


#ifndef __Configurations_FWD_DEFINED__
#define __Configurations_FWD_DEFINED__
typedef interface Configurations Configurations;
#endif 	/* __Configurations_FWD_DEFINED__ */


#ifndef __ConfigurationManager_FWD_DEFINED__
#define __ConfigurationManager_FWD_DEFINED__
typedef interface ConfigurationManager ConfigurationManager;
#endif 	/* __ConfigurationManager_FWD_DEFINED__ */


#ifndef __Macros_FWD_DEFINED__
#define __Macros_FWD_DEFINED__
typedef interface Macros Macros;
#endif 	/* __Macros_FWD_DEFINED__ */


#ifndef __OutputGroups_FWD_DEFINED__
#define __OutputGroups_FWD_DEFINED__
typedef interface OutputGroups OutputGroups;
#endif 	/* __OutputGroups_FWD_DEFINED__ */


#ifndef __OutputGroup_FWD_DEFINED__
#define __OutputGroup_FWD_DEFINED__
typedef interface OutputGroup OutputGroup;
#endif 	/* __OutputGroup_FWD_DEFINED__ */


#ifndef __ContextAttributes_FWD_DEFINED__
#define __ContextAttributes_FWD_DEFINED__
typedef interface ContextAttributes ContextAttributes;
#endif 	/* __ContextAttributes_FWD_DEFINED__ */


#ifndef __SourceControl_FWD_DEFINED__
#define __SourceControl_FWD_DEFINED__
typedef interface SourceControl SourceControl;
#endif 	/* __SourceControl_FWD_DEFINED__ */


#ifndef __TextPoint_FWD_DEFINED__
#define __TextPoint_FWD_DEFINED__
typedef interface TextPoint TextPoint;
#endif 	/* __TextPoint_FWD_DEFINED__ */


#ifndef __EditPoint_FWD_DEFINED__
#define __EditPoint_FWD_DEFINED__
typedef interface EditPoint EditPoint;
#endif 	/* __EditPoint_FWD_DEFINED__ */


#ifndef __TextSelection_FWD_DEFINED__
#define __TextSelection_FWD_DEFINED__
typedef interface TextSelection TextSelection;
#endif 	/* __TextSelection_FWD_DEFINED__ */


#ifndef __TextRanges_FWD_DEFINED__
#define __TextRanges_FWD_DEFINED__
typedef interface TextRanges TextRanges;
#endif 	/* __TextRanges_FWD_DEFINED__ */


#ifndef __TextRange_FWD_DEFINED__
#define __TextRange_FWD_DEFINED__
typedef interface TextRange TextRange;
#endif 	/* __TextRange_FWD_DEFINED__ */


#ifndef __TextDocument_FWD_DEFINED__
#define __TextDocument_FWD_DEFINED__
typedef interface TextDocument TextDocument;
#endif 	/* __TextDocument_FWD_DEFINED__ */


#ifndef __VirtualPoint_FWD_DEFINED__
#define __VirtualPoint_FWD_DEFINED__
typedef interface VirtualPoint VirtualPoint;
#endif 	/* __VirtualPoint_FWD_DEFINED__ */


#ifndef __TextPane_FWD_DEFINED__
#define __TextPane_FWD_DEFINED__
typedef interface TextPane TextPane;
#endif 	/* __TextPane_FWD_DEFINED__ */


#ifndef __TextWindow_FWD_DEFINED__
#define __TextWindow_FWD_DEFINED__
typedef interface TextWindow TextWindow;
#endif 	/* __TextWindow_FWD_DEFINED__ */


#ifndef __TextPanes_FWD_DEFINED__
#define __TextPanes_FWD_DEFINED__
typedef interface TextPanes TextPanes;
#endif 	/* __TextPanes_FWD_DEFINED__ */


#ifndef __TextEditor_FWD_DEFINED__
#define __TextEditor_FWD_DEFINED__
typedef interface TextEditor TextEditor;
#endif 	/* __TextEditor_FWD_DEFINED__ */


#ifndef __CodeModel_FWD_DEFINED__
#define __CodeModel_FWD_DEFINED__
typedef interface CodeModel CodeModel;
#endif 	/* __CodeModel_FWD_DEFINED__ */


#ifndef __CodeElements_FWD_DEFINED__
#define __CodeElements_FWD_DEFINED__
typedef interface CodeElements CodeElements;
#endif 	/* __CodeElements_FWD_DEFINED__ */


#ifndef __CodeElement_FWD_DEFINED__
#define __CodeElement_FWD_DEFINED__
typedef interface CodeElement CodeElement;
#endif 	/* __CodeElement_FWD_DEFINED__ */


#ifndef __CodeType_FWD_DEFINED__
#define __CodeType_FWD_DEFINED__
typedef interface CodeType CodeType;
#endif 	/* __CodeType_FWD_DEFINED__ */


#ifndef __CodeNamespace_FWD_DEFINED__
#define __CodeNamespace_FWD_DEFINED__
typedef interface CodeNamespace CodeNamespace;
#endif 	/* __CodeNamespace_FWD_DEFINED__ */


#ifndef __CodeFunction_FWD_DEFINED__
#define __CodeFunction_FWD_DEFINED__
typedef interface CodeFunction CodeFunction;
#endif 	/* __CodeFunction_FWD_DEFINED__ */


#ifndef __CodeVariable_FWD_DEFINED__
#define __CodeVariable_FWD_DEFINED__
typedef interface CodeVariable CodeVariable;
#endif 	/* __CodeVariable_FWD_DEFINED__ */


#ifndef __CodeProperty_FWD_DEFINED__
#define __CodeProperty_FWD_DEFINED__
typedef interface CodeProperty CodeProperty;
#endif 	/* __CodeProperty_FWD_DEFINED__ */


#ifndef __CodeParameter_FWD_DEFINED__
#define __CodeParameter_FWD_DEFINED__
typedef interface CodeParameter CodeParameter;
#endif 	/* __CodeParameter_FWD_DEFINED__ */


#ifndef __CodeAttribute_FWD_DEFINED__
#define __CodeAttribute_FWD_DEFINED__
typedef interface CodeAttribute CodeAttribute;
#endif 	/* __CodeAttribute_FWD_DEFINED__ */


#ifndef __CodeInterface_FWD_DEFINED__
#define __CodeInterface_FWD_DEFINED__
typedef interface CodeInterface CodeInterface;
#endif 	/* __CodeInterface_FWD_DEFINED__ */


#ifndef __CodeStruct_FWD_DEFINED__
#define __CodeStruct_FWD_DEFINED__
typedef interface CodeStruct CodeStruct;
#endif 	/* __CodeStruct_FWD_DEFINED__ */


#ifndef __CodeEnum_FWD_DEFINED__
#define __CodeEnum_FWD_DEFINED__
typedef interface CodeEnum CodeEnum;
#endif 	/* __CodeEnum_FWD_DEFINED__ */


#ifndef __CodeDelegate_FWD_DEFINED__
#define __CodeDelegate_FWD_DEFINED__
typedef interface CodeDelegate CodeDelegate;
#endif 	/* __CodeDelegate_FWD_DEFINED__ */


#ifndef __CodeTypeRef_FWD_DEFINED__
#define __CodeTypeRef_FWD_DEFINED__
typedef interface CodeTypeRef CodeTypeRef;
#endif 	/* __CodeTypeRef_FWD_DEFINED__ */


#ifndef __CodeClass_FWD_DEFINED__
#define __CodeClass_FWD_DEFINED__
typedef interface CodeClass CodeClass;
#endif 	/* __CodeClass_FWD_DEFINED__ */


#ifndef __FileCodeModel_FWD_DEFINED__
#define __FileCodeModel_FWD_DEFINED__
typedef interface FileCodeModel FileCodeModel;
#endif 	/* __FileCodeModel_FWD_DEFINED__ */


#ifndef __Breakpoint_FWD_DEFINED__
#define __Breakpoint_FWD_DEFINED__
typedef interface Breakpoint Breakpoint;
#endif 	/* __Breakpoint_FWD_DEFINED__ */


#ifndef __Breakpoints_FWD_DEFINED__
#define __Breakpoints_FWD_DEFINED__
typedef interface Breakpoints Breakpoints;
#endif 	/* __Breakpoints_FWD_DEFINED__ */


#ifndef __Debugger_FWD_DEFINED__
#define __Debugger_FWD_DEFINED__
typedef interface Debugger Debugger;
#endif 	/* __Debugger_FWD_DEFINED__ */


#ifndef __Expression_FWD_DEFINED__
#define __Expression_FWD_DEFINED__
typedef interface Expression Expression;
#endif 	/* __Expression_FWD_DEFINED__ */


#ifndef __Expressions_FWD_DEFINED__
#define __Expressions_FWD_DEFINED__
typedef interface Expressions Expressions;
#endif 	/* __Expressions_FWD_DEFINED__ */


#ifndef __Language_FWD_DEFINED__
#define __Language_FWD_DEFINED__
typedef interface Language Language;
#endif 	/* __Language_FWD_DEFINED__ */


#ifndef __Languages_FWD_DEFINED__
#define __Languages_FWD_DEFINED__
typedef interface Languages Languages;
#endif 	/* __Languages_FWD_DEFINED__ */


#ifndef __Process_FWD_DEFINED__
#define __Process_FWD_DEFINED__
typedef interface Process Process;
#endif 	/* __Process_FWD_DEFINED__ */


#ifndef __Processes_FWD_DEFINED__
#define __Processes_FWD_DEFINED__
typedef interface Processes Processes;
#endif 	/* __Processes_FWD_DEFINED__ */


#ifndef __Program_FWD_DEFINED__
#define __Program_FWD_DEFINED__
typedef interface Program Program;
#endif 	/* __Program_FWD_DEFINED__ */


#ifndef __Programs_FWD_DEFINED__
#define __Programs_FWD_DEFINED__
typedef interface Programs Programs;
#endif 	/* __Programs_FWD_DEFINED__ */


#ifndef __StackFrame_FWD_DEFINED__
#define __StackFrame_FWD_DEFINED__
typedef interface StackFrame StackFrame;
#endif 	/* __StackFrame_FWD_DEFINED__ */


#ifndef __StackFrames_FWD_DEFINED__
#define __StackFrames_FWD_DEFINED__
typedef interface StackFrames StackFrames;
#endif 	/* __StackFrames_FWD_DEFINED__ */


#ifndef __Thread_FWD_DEFINED__
#define __Thread_FWD_DEFINED__
typedef interface Thread Thread;
#endif 	/* __Thread_FWD_DEFINED__ */


#ifndef __Threads_FWD_DEFINED__
#define __Threads_FWD_DEFINED__
typedef interface Threads Threads;
#endif 	/* __Threads_FWD_DEFINED__ */


#ifndef ___dispDebuggerEvents_FWD_DEFINED__
#define ___dispDebuggerEvents_FWD_DEFINED__
typedef interface _dispDebuggerEvents _dispDebuggerEvents;
#endif 	/* ___dispDebuggerEvents_FWD_DEFINED__ */


#ifndef ___DebuggerEventsRoot_FWD_DEFINED__
#define ___DebuggerEventsRoot_FWD_DEFINED__
typedef interface _DebuggerEventsRoot _DebuggerEventsRoot;
#endif 	/* ___DebuggerEventsRoot_FWD_DEFINED__ */


#ifndef ___DebuggerEvents_FWD_DEFINED__
#define ___DebuggerEvents_FWD_DEFINED__
typedef interface _DebuggerEvents _DebuggerEvents;
#endif 	/* ___DebuggerEvents_FWD_DEFINED__ */


#ifndef __DebuggerEvents_FWD_DEFINED__
#define __DebuggerEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DebuggerEvents DebuggerEvents;
#else
typedef struct DebuggerEvents DebuggerEvents;
#endif /* __cplusplus */

#endif 	/* __DebuggerEvents_FWD_DEFINED__ */


#ifndef __IDTWizard_FWD_DEFINED__
#define __IDTWizard_FWD_DEFINED__
typedef interface IDTWizard IDTWizard;
#endif 	/* __IDTWizard_FWD_DEFINED__ */


#ifndef __IVsExtensibility_FWD_DEFINED__
#define __IVsExtensibility_FWD_DEFINED__
typedef interface IVsExtensibility IVsExtensibility;
#endif 	/* __IVsExtensibility_FWD_DEFINED__ */


#ifndef __IVsGlobalsCallback_FWD_DEFINED__
#define __IVsGlobalsCallback_FWD_DEFINED__
typedef interface IVsGlobalsCallback IVsGlobalsCallback;
#endif 	/* __IVsGlobalsCallback_FWD_DEFINED__ */


#ifndef __IVsGlobals_FWD_DEFINED__
#define __IVsGlobals_FWD_DEFINED__
typedef interface IVsGlobals IVsGlobals;
#endif 	/* __IVsGlobals_FWD_DEFINED__ */


#ifndef __IDTCommandTarget_FWD_DEFINED__
#define __IDTCommandTarget_FWD_DEFINED__
typedef interface IDTCommandTarget IDTCommandTarget;
#endif 	/* __IDTCommandTarget_FWD_DEFINED__ */


#ifndef __CommandWindow_FWD_DEFINED__
#define __CommandWindow_FWD_DEFINED__
typedef interface CommandWindow CommandWindow;
#endif 	/* __CommandWindow_FWD_DEFINED__ */


#ifndef __DTE_FWD_DEFINED__
#define __DTE_FWD_DEFINED__

#ifdef __cplusplus
typedef class DTE DTE;
#else
typedef struct DTE DTE;
#endif /* __cplusplus */

#endif 	/* __DTE_FWD_DEFINED__ */


#ifndef __Solution_FWD_DEFINED__
#define __Solution_FWD_DEFINED__

#ifdef __cplusplus
typedef class Solution Solution;
#else
typedef struct Solution Solution;
#endif /* __cplusplus */

#endif 	/* __Solution_FWD_DEFINED__ */


#ifndef __DTEEvents_FWD_DEFINED__
#define __DTEEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DTEEvents DTEEvents;
#else
typedef struct DTEEvents DTEEvents;
#endif /* __cplusplus */

#endif 	/* __DTEEvents_FWD_DEFINED__ */


#ifndef ___DTEEvents_FWD_DEFINED__
#define ___DTEEvents_FWD_DEFINED__
typedef interface _DTEEvents _DTEEvents;
#endif 	/* ___DTEEvents_FWD_DEFINED__ */


#ifndef ___ProjectItemsEvents_FWD_DEFINED__
#define ___ProjectItemsEvents_FWD_DEFINED__
typedef interface _ProjectItemsEvents _ProjectItemsEvents;
#endif 	/* ___ProjectItemsEvents_FWD_DEFINED__ */


#ifndef ___dispProjectItemsEvents_FWD_DEFINED__
#define ___dispProjectItemsEvents_FWD_DEFINED__
typedef interface _dispProjectItemsEvents _dispProjectItemsEvents;
#endif 	/* ___dispProjectItemsEvents_FWD_DEFINED__ */


#ifndef __ProjectItemsEvents_FWD_DEFINED__
#define __ProjectItemsEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectItemsEvents ProjectItemsEvents;
#else
typedef struct ProjectItemsEvents ProjectItemsEvents;
#endif /* __cplusplus */

#endif 	/* __ProjectItemsEvents_FWD_DEFINED__ */


#ifndef ___ProjectsEvents_FWD_DEFINED__
#define ___ProjectsEvents_FWD_DEFINED__
typedef interface _ProjectsEvents _ProjectsEvents;
#endif 	/* ___ProjectsEvents_FWD_DEFINED__ */


#ifndef ___dispProjectsEvents_FWD_DEFINED__
#define ___dispProjectsEvents_FWD_DEFINED__
typedef interface _dispProjectsEvents _dispProjectsEvents;
#endif 	/* ___dispProjectsEvents_FWD_DEFINED__ */


#ifndef __ProjectsEvents_FWD_DEFINED__
#define __ProjectsEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectsEvents ProjectsEvents;
#else
typedef struct ProjectsEvents ProjectsEvents;
#endif /* __cplusplus */

#endif 	/* __ProjectsEvents_FWD_DEFINED__ */


#ifndef ___MiscSlnFilesEventsRoot_FWD_DEFINED__
#define ___MiscSlnFilesEventsRoot_FWD_DEFINED__
typedef interface _MiscSlnFilesEventsRoot _MiscSlnFilesEventsRoot;
#endif 	/* ___MiscSlnFilesEventsRoot_FWD_DEFINED__ */


#ifndef ___CommandBarControlEvents_FWD_DEFINED__
#define ___CommandBarControlEvents_FWD_DEFINED__
typedef interface _CommandBarControlEvents _CommandBarControlEvents;
#endif 	/* ___CommandBarControlEvents_FWD_DEFINED__ */


#ifndef ___dispCommandBarControlEvents_FWD_DEFINED__
#define ___dispCommandBarControlEvents_FWD_DEFINED__
typedef interface _dispCommandBarControlEvents _dispCommandBarControlEvents;
#endif 	/* ___dispCommandBarControlEvents_FWD_DEFINED__ */


#ifndef __CommandBarEvents_FWD_DEFINED__
#define __CommandBarEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class CommandBarEvents CommandBarEvents;
#else
typedef struct CommandBarEvents CommandBarEvents;
#endif /* __cplusplus */

#endif 	/* __CommandBarEvents_FWD_DEFINED__ */


#ifndef ___CommandEvents_FWD_DEFINED__
#define ___CommandEvents_FWD_DEFINED__
typedef interface _CommandEvents _CommandEvents;
#endif 	/* ___CommandEvents_FWD_DEFINED__ */


#ifndef ___dispCommandEvents_FWD_DEFINED__
#define ___dispCommandEvents_FWD_DEFINED__
typedef interface _dispCommandEvents _dispCommandEvents;
#endif 	/* ___dispCommandEvents_FWD_DEFINED__ */


#ifndef __CommandEvents_FWD_DEFINED__
#define __CommandEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class CommandEvents CommandEvents;
#else
typedef struct CommandEvents CommandEvents;
#endif /* __cplusplus */

#endif 	/* __CommandEvents_FWD_DEFINED__ */


#ifndef ___SelectionEvents_FWD_DEFINED__
#define ___SelectionEvents_FWD_DEFINED__
typedef interface _SelectionEvents _SelectionEvents;
#endif 	/* ___SelectionEvents_FWD_DEFINED__ */


#ifndef ___dispSelectionEvents_FWD_DEFINED__
#define ___dispSelectionEvents_FWD_DEFINED__
typedef interface _dispSelectionEvents _dispSelectionEvents;
#endif 	/* ___dispSelectionEvents_FWD_DEFINED__ */


#ifndef __SelectionEvents_FWD_DEFINED__
#define __SelectionEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class SelectionEvents SelectionEvents;
#else
typedef struct SelectionEvents SelectionEvents;
#endif /* __cplusplus */

#endif 	/* __SelectionEvents_FWD_DEFINED__ */


#ifndef ___BuildEvents_FWD_DEFINED__
#define ___BuildEvents_FWD_DEFINED__
typedef interface _BuildEvents _BuildEvents;
#endif 	/* ___BuildEvents_FWD_DEFINED__ */


#ifndef ___dispBuildEvents_FWD_DEFINED__
#define ___dispBuildEvents_FWD_DEFINED__
typedef interface _dispBuildEvents _dispBuildEvents;
#endif 	/* ___dispBuildEvents_FWD_DEFINED__ */


#ifndef __BuildEvents_FWD_DEFINED__
#define __BuildEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class BuildEvents BuildEvents;
#else
typedef struct BuildEvents BuildEvents;
#endif /* __cplusplus */

#endif 	/* __BuildEvents_FWD_DEFINED__ */


#ifndef ___SolutionEvents_FWD_DEFINED__
#define ___SolutionEvents_FWD_DEFINED__
typedef interface _SolutionEvents _SolutionEvents;
#endif 	/* ___SolutionEvents_FWD_DEFINED__ */


#ifndef ___dispSolutionEvents_FWD_DEFINED__
#define ___dispSolutionEvents_FWD_DEFINED__
typedef interface _dispSolutionEvents _dispSolutionEvents;
#endif 	/* ___dispSolutionEvents_FWD_DEFINED__ */


#ifndef __SolutionEvents_FWD_DEFINED__
#define __SolutionEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class SolutionEvents SolutionEvents;
#else
typedef struct SolutionEvents SolutionEvents;
#endif /* __cplusplus */

#endif 	/* __SolutionEvents_FWD_DEFINED__ */


#ifndef __ContextAttribute_FWD_DEFINED__
#define __ContextAttribute_FWD_DEFINED__
typedef interface ContextAttribute ContextAttribute;
#endif 	/* __ContextAttribute_FWD_DEFINED__ */


#ifndef ___DocumentEventsRoot_FWD_DEFINED__
#define ___DocumentEventsRoot_FWD_DEFINED__
typedef interface _DocumentEventsRoot _DocumentEventsRoot;
#endif 	/* ___DocumentEventsRoot_FWD_DEFINED__ */


#ifndef ___DocumentEvents_FWD_DEFINED__
#define ___DocumentEvents_FWD_DEFINED__
typedef interface _DocumentEvents _DocumentEvents;
#endif 	/* ___DocumentEvents_FWD_DEFINED__ */


#ifndef ___dispDocumentEvents_FWD_DEFINED__
#define ___dispDocumentEvents_FWD_DEFINED__
typedef interface _dispDocumentEvents _dispDocumentEvents;
#endif 	/* ___dispDocumentEvents_FWD_DEFINED__ */


#ifndef __DocumentEvents_FWD_DEFINED__
#define __DocumentEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentEvents DocumentEvents;
#else
typedef struct DocumentEvents DocumentEvents;
#endif /* __cplusplus */

#endif 	/* __DocumentEvents_FWD_DEFINED__ */


#ifndef ___TextEditorEventsRoot_FWD_DEFINED__
#define ___TextEditorEventsRoot_FWD_DEFINED__
typedef interface _TextEditorEventsRoot _TextEditorEventsRoot;
#endif 	/* ___TextEditorEventsRoot_FWD_DEFINED__ */


#ifndef ___TextEditorEvents_FWD_DEFINED__
#define ___TextEditorEvents_FWD_DEFINED__
typedef interface _TextEditorEvents _TextEditorEvents;
#endif 	/* ___TextEditorEvents_FWD_DEFINED__ */


#ifndef ___dispTextEditorEvents_FWD_DEFINED__
#define ___dispTextEditorEvents_FWD_DEFINED__
typedef interface _dispTextEditorEvents _dispTextEditorEvents;
#endif 	/* ___dispTextEditorEvents_FWD_DEFINED__ */


#ifndef __TextEditorEvents_FWD_DEFINED__
#define __TextEditorEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextEditorEvents TextEditorEvents;
#else
typedef struct TextEditorEvents TextEditorEvents;
#endif /* __cplusplus */

#endif 	/* __TextEditorEvents_FWD_DEFINED__ */


#ifndef ___WindowEventsRoot_FWD_DEFINED__
#define ___WindowEventsRoot_FWD_DEFINED__
typedef interface _WindowEventsRoot _WindowEventsRoot;
#endif 	/* ___WindowEventsRoot_FWD_DEFINED__ */


#ifndef ___WindowEvents_FWD_DEFINED__
#define ___WindowEvents_FWD_DEFINED__
typedef interface _WindowEvents _WindowEvents;
#endif 	/* ___WindowEvents_FWD_DEFINED__ */


#ifndef ___dispWindowEvents_FWD_DEFINED__
#define ___dispWindowEvents_FWD_DEFINED__
typedef interface _dispWindowEvents _dispWindowEvents;
#endif 	/* ___dispWindowEvents_FWD_DEFINED__ */


#ifndef __WindowEvents_FWD_DEFINED__
#define __WindowEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class WindowEvents WindowEvents;
#else
typedef struct WindowEvents WindowEvents;
#endif /* __cplusplus */

#endif 	/* __WindowEvents_FWD_DEFINED__ */


#ifndef ___OutputWindowEventsRoot_FWD_DEFINED__
#define ___OutputWindowEventsRoot_FWD_DEFINED__
typedef interface _OutputWindowEventsRoot _OutputWindowEventsRoot;
#endif 	/* ___OutputWindowEventsRoot_FWD_DEFINED__ */


#ifndef ___OutputWindowEvents_FWD_DEFINED__
#define ___OutputWindowEvents_FWD_DEFINED__
typedef interface _OutputWindowEvents _OutputWindowEvents;
#endif 	/* ___OutputWindowEvents_FWD_DEFINED__ */


#ifndef ___dispOutputWindowEvents_FWD_DEFINED__
#define ___dispOutputWindowEvents_FWD_DEFINED__
typedef interface _dispOutputWindowEvents _dispOutputWindowEvents;
#endif 	/* ___dispOutputWindowEvents_FWD_DEFINED__ */


#ifndef __OutputWindowEvents_FWD_DEFINED__
#define __OutputWindowEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class OutputWindowEvents OutputWindowEvents;
#else
typedef struct OutputWindowEvents OutputWindowEvents;
#endif /* __cplusplus */

#endif 	/* __OutputWindowEvents_FWD_DEFINED__ */


#ifndef ___TaskListEventsRoot_FWD_DEFINED__
#define ___TaskListEventsRoot_FWD_DEFINED__
typedef interface _TaskListEventsRoot _TaskListEventsRoot;
#endif 	/* ___TaskListEventsRoot_FWD_DEFINED__ */


#ifndef ___TaskListEvents_FWD_DEFINED__
#define ___TaskListEvents_FWD_DEFINED__
typedef interface _TaskListEvents _TaskListEvents;
#endif 	/* ___TaskListEvents_FWD_DEFINED__ */


#ifndef ___dispTaskListEvents_FWD_DEFINED__
#define ___dispTaskListEvents_FWD_DEFINED__
typedef interface _dispTaskListEvents _dispTaskListEvents;
#endif 	/* ___dispTaskListEvents_FWD_DEFINED__ */


#ifndef __TaskListEvents_FWD_DEFINED__
#define __TaskListEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class TaskListEvents TaskListEvents;
#else
typedef struct TaskListEvents TaskListEvents;
#endif /* __cplusplus */

#endif 	/* __TaskListEvents_FWD_DEFINED__ */


#ifndef __IDTToolsOptionsPage_FWD_DEFINED__
#define __IDTToolsOptionsPage_FWD_DEFINED__
typedef interface IDTToolsOptionsPage IDTToolsOptionsPage;
#endif 	/* __IDTToolsOptionsPage_FWD_DEFINED__ */


#ifndef ___EnvironmentWebBrowser_FWD_DEFINED__
#define ___EnvironmentWebBrowser_FWD_DEFINED__
typedef interface _EnvironmentWebBrowser _EnvironmentWebBrowser;
#endif 	/* ___EnvironmentWebBrowser_FWD_DEFINED__ */


#ifndef ___EnvironmentHelp_FWD_DEFINED__
#define ___EnvironmentHelp_FWD_DEFINED__
typedef interface _EnvironmentHelp _EnvironmentHelp;
#endif 	/* ___EnvironmentHelp_FWD_DEFINED__ */


#ifndef __ColorableItems_FWD_DEFINED__
#define __ColorableItems_FWD_DEFINED__
typedef interface ColorableItems ColorableItems;
#endif 	/* __ColorableItems_FWD_DEFINED__ */


#ifndef __FontsAndColorsItems_FWD_DEFINED__
#define __FontsAndColorsItems_FWD_DEFINED__
typedef interface FontsAndColorsItems FontsAndColorsItems;
#endif 	/* __FontsAndColorsItems_FWD_DEFINED__ */


#ifndef ___FontsAndColors_FWD_DEFINED__
#define ___FontsAndColors_FWD_DEFINED__
typedef interface _FontsAndColors _FontsAndColors;
#endif 	/* ___FontsAndColors_FWD_DEFINED__ */


#ifndef ___EnvironmentGeneral_FWD_DEFINED__
#define ___EnvironmentGeneral_FWD_DEFINED__
typedef interface _EnvironmentGeneral _EnvironmentGeneral;
#endif 	/* ___EnvironmentGeneral_FWD_DEFINED__ */


#ifndef ___EnvironmentFontsAndColors_FWD_DEFINED__
#define ___EnvironmentFontsAndColors_FWD_DEFINED__
typedef interface _EnvironmentFontsAndColors _EnvironmentFontsAndColors;
#endif 	/* ___EnvironmentFontsAndColors_FWD_DEFINED__ */


#ifndef ___EnvironmentProjectsAndSolution_FWD_DEFINED__
#define ___EnvironmentProjectsAndSolution_FWD_DEFINED__
typedef interface _EnvironmentProjectsAndSolution _EnvironmentProjectsAndSolution;
#endif 	/* ___EnvironmentProjectsAndSolution_FWD_DEFINED__ */


#ifndef ___EnvironmentDocuments_FWD_DEFINED__
#define ___EnvironmentDocuments_FWD_DEFINED__
typedef interface _EnvironmentDocuments _EnvironmentDocuments;
#endif 	/* ___EnvironmentDocuments_FWD_DEFINED__ */


#ifndef ___EnvironmentTaskList_FWD_DEFINED__
#define ___EnvironmentTaskList_FWD_DEFINED__
typedef interface _EnvironmentTaskList _EnvironmentTaskList;
#endif 	/* ___EnvironmentTaskList_FWD_DEFINED__ */


#ifndef ___EnvironmentKeyboard_FWD_DEFINED__
#define ___EnvironmentKeyboard_FWD_DEFINED__
typedef interface _EnvironmentKeyboard _EnvironmentKeyboard;
#endif 	/* ___EnvironmentKeyboard_FWD_DEFINED__ */


#ifndef __IExtensibleObject_FWD_DEFINED__
#define __IExtensibleObject_FWD_DEFINED__
typedef interface IExtensibleObject IExtensibleObject;
#endif 	/* __IExtensibleObject_FWD_DEFINED__ */


#ifndef ___FindEvents_FWD_DEFINED__
#define ___FindEvents_FWD_DEFINED__
typedef interface _FindEvents _FindEvents;
#endif 	/* ___FindEvents_FWD_DEFINED__ */


#ifndef ___dispFindEvents_FWD_DEFINED__
#define ___dispFindEvents_FWD_DEFINED__
typedef interface _dispFindEvents _dispFindEvents;
#endif 	/* ___dispFindEvents_FWD_DEFINED__ */


#ifndef __FindEvents_FWD_DEFINED__
#define __FindEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class FindEvents FindEvents;
#else
typedef struct FindEvents FindEvents;
#endif /* __cplusplus */

#endif 	/* __FindEvents_FWD_DEFINED__ */


#ifndef __IVsTextEditGeneral_FWD_DEFINED__
#define __IVsTextEditGeneral_FWD_DEFINED__
typedef interface IVsTextEditGeneral IVsTextEditGeneral;
#endif 	/* __IVsTextEditGeneral_FWD_DEFINED__ */


#ifndef __IVsTextEditPerLanguage_FWD_DEFINED__
#define __IVsTextEditPerLanguage_FWD_DEFINED__
typedef interface IVsTextEditPerLanguage IVsTextEditPerLanguage;
#endif 	/* __IVsTextEditPerLanguage_FWD_DEFINED__ */


#ifndef __IVsTextEditFonts_FWD_DEFINED__
#define __IVsTextEditFonts_FWD_DEFINED__
typedef interface IVsTextEditFonts IVsTextEditFonts;
#endif 	/* __IVsTextEditFonts_FWD_DEFINED__ */


#ifndef __HTMLWindow_FWD_DEFINED__
#define __HTMLWindow_FWD_DEFINED__
typedef interface HTMLWindow HTMLWindow;
#endif 	/* __HTMLWindow_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_dte_0000 */
/* [local] */ 

#ifdef Delete
#define Delete_defined
#undef Delete
#endif
#ifdef ReplaceText
#define ReplaceText_defined
#undef ReplaceText
#endif
#define DTEIDL_REVISION 8
#define SID_SVsExtensibility IID_IVsExtensibility
//The following are defined for backward source compatibility
// They were needed when the transition from a coclass to interface
// object model was made.
#define IID__Projects IID_Projects
#define _Projects Projects
#define IID__Project IID_Project
#define _Project Project
#define IID__ProjectItems IID_ProjectItems
#define _ProjectItems ProjectItems
#define IID__ProjectItem IID_ProjectItem
#define _ProjectItem ProjectItem
#define IID__Commands IID_Commands
#define _Commands Commands
#define IID__AddIns IID_AddIns
#define _AddIns AddIns
#define IID__AddIn IID_AddIn
#define _AddIn AddIn
#define IID__Windows IID_Windows
#define _Windows Windows
#define IID__LinkedWindows IID_LinkedWindows
#define _LinkedWindows LinkedWindows
#define IID__SelectedItems IID_SelectedItems
#define _SelectedItems SelectedItems
#define IID__SelectedItem IID_SelectedItem
#define _SelectedItem SelectedItem
#define IID__Properties IID_Properties
#define _Properties Properties
#define IID__SelectionContainer IID_SelectionContainer
#define _SelectionContainer SelectionContainer
#define IID__TextBuffer IID_TextBuffer
#define _TextBuffer TextBuffer
#define SID_SVsProfferCommands IID_IVsProfferCommands
#pragma once
#ifndef __INDENTSTYLE__
#define __INDENTSTYLE__
typedef /* [uuid] */  DECLSPEC_UUID("BCCEBE05-D29C-11D2-AABD-00C04F688DDE") 
enum _vsIndentStyle
    {	vsIndentStyleNone	= 0,
	vsIndentStyleDefault	= vsIndentStyleNone + 1,
	vsIndentStyleSmart	= vsIndentStyleDefault + 1
    } 	vsIndentStyle;

#endif // __INDENTSTYLE__
const GUID GUID_Addins = { 0x1e58696e, 0xc90f, 0x11D2, { 0xaa, 0xb2, 0x0, 0xc0, 0x4f, 0x68, 0x8d, 0xde } };
#define LIBID_DTE LIBID_EnvDTE


extern RPC_IF_HANDLE __MIDL_itf_dte_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dte_0000_v0_0_s_ifspec;


#ifndef __EnvDTE_LIBRARY_DEFINED__
#define __EnvDTE_LIBRARY_DEFINED__

/* library EnvDTE */
/* [version][helpstring][uuid] */ 




















































































































typedef /* [uuid] */  DECLSPEC_UUID("494815FD-49D0-41e0-912F-D9C673DD068A") 
enum vsCMPart
    {	vsCMPartName	= 1,
	vsCMPartAttributes	= 2,
	vsCMPartHeader	= 4,
	vsCMPartWhole	= 8,
	vsCMPartBody	= 16,
	vsCMPartNavigate	= 32,
	vsCMPartAttributesWithDelimiter	= 68,
	vsCMPartBodyWithDelimiter	= 80,
	vsCMPartHeaderWithAttributes	= 6,
	vsCMPartWholeWithAttributes	= 10
    } 	vsCMPart;

typedef /* [uuid] */  DECLSPEC_UUID("0CFBC2CD-0D4E-11D3-8997-00C04F688DDE") 
enum vsCMElement
    {	vsCMElementOther	= 0,
	vsCMElementClass	= 1,
	vsCMElementFunction	= 2,
	vsCMElementVariable	= 3,
	vsCMElementProperty	= 4,
	vsCMElementNamespace	= 5,
	vsCMElementParameter	= 6,
	vsCMElementAttribute	= 7,
	vsCMElementInterface	= 8,
	vsCMElementDelegate	= 9,
	vsCMElementEnum	= 10,
	vsCMElementStruct	= 11,
	vsCMElementUnion	= 12,
	vsCMElementLocalDeclStmt	= 13,
	vsCMElementFunctionInvokeStmt	= 14,
	vsCMElementPropertySetStmt	= 15,
	vsCMElementAssignmentStmt	= 16,
	vsCMElementInheritsStmt	= 17,
	vsCMElementImplementsStmt	= 18,
	vsCMElementOptionStmt	= 19,
	vsCMElementVBAttributeStmt	= 20,
	vsCMElementVBAttributeGroup	= 21,
	vsCMElementEventsDeclaration	= 22,
	vsCMElementUDTDecl	= 23,
	vsCMElementDeclareDecl	= 24,
	vsCMElementDefineStmt	= 25,
	vsCMElementTypeDef	= 26,
	vsCMElementIncludeStmt	= 27,
	vsCMElementUsingStmt	= 28,
	vsCMElementMacro	= 29,
	vsCMElementMap	= 30,
	vsCMElementIDLImport	= 31,
	vsCMElementIDLImportLib	= 32,
	vsCMElementIDLCoClass	= 33,
	vsCMElementIDLLibrary	= 34,
	vsCMElementImportStmt	= 35,
	vsCMElementMapEntry	= 36,
	vsCMElementVCBase	= 37,
	vsCMElementEvent	= 38,
	vsCMElementModule	= 39
    } 	vsCMElement;

typedef /* [uuid] */  DECLSPEC_UUID("0CFBC2CE-0D4E-11D3-8997-00C04F688DDE") 
enum vsCMFunction
    {	vsCMFunctionOther	= 0,
	vsCMFunctionConstructor	= 1,
	vsCMFunctionPropertyGet	= 2,
	vsCMFunctionPropertyLet	= 4,
	vsCMFunctionPropertySet	= 8,
	vsCMFunctionPutRef	= 16,
	vsCMFunctionPropertyAssign	= 32,
	vsCMFunctionSub	= 64,
	vsCMFunctionFunction	= 128,
	vsCMFunctionTopLevel	= 256,
	vsCMFunctionDestructor	= 512,
	vsCMFunctionOperator	= 1024,
	vsCMFunctionVirtual	= 2048,
	vsCMFunctionPure	= 4096,
	vsCMFunctionConstant	= 8192,
	vsCMFunctionShared	= 16384,
	vsCMFunctionInline	= 32768,
	vsCMFunctionComMethod	= 65536
    } 	vsCMFunction;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F96-4477-11d3-89BF-00C04F688DDE") 
enum vsCMAccess
    {	vsCMAccessPublic	= 1,
	vsCMAccessPrivate	= 2,
	vsCMAccessProject	= 4,
	vsCMAccessProtected	= 8,
	vsCMAccessDefault	= 32,
	vsCMAccessAssemblyOrFamily	= 64,
	vsCMAccessWithEvents	= 128,
	vsCMAccessProjectOrProtected	= 12
    } 	vsCMAccess;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F97-4477-11d3-89BF-00C04F688DDE") 
enum vsCMInfoLocation
    {	vsCMInfoLocationProject	= 1,
	vsCMInfoLocationExternal	= 2,
	vsCMInfoLocationNone	= 4,
	vsCMInfoLocationVirtual	= 8
    } 	vsCMInfoLocation;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F98-4477-11d3-89BF-00C04F688DDE") 
enum vsCMPrototype
    {	vsCMPrototypeFullname	= 1,
	vsCMPrototypeNoName	= 2,
	vsCMPrototypeClassName	= 4,
	vsCMPrototypeParamTypes	= 8,
	vsCMPrototypeParamNames	= 16,
	vsCMPrototypeParamDefaultValues	= 32,
	vsCMPrototypeUniqueSignature	= 64,
	vsCMPrototypeType	= 128,
	vsCMPrototypeInitExpression	= 256
    } 	vsCMPrototype;

typedef /* [uuid] */  DECLSPEC_UUID("C58839C3-7435-4944-8277-EA97B8EB2FA2") 
enum vsCMTypeRef
    {	vsCMTypeRefOther	= 0,
	vsCMTypeRefCodeType	= 1,
	vsCMTypeRefArray	= 2,
	vsCMTypeRefVoid	= 3,
	vsCMTypeRefPointer	= 4,
	vsCMTypeRefString	= 5,
	vsCMTypeRefObject	= 6,
	vsCMTypeRefByte	= 7,
	vsCMTypeRefChar	= 8,
	vsCMTypeRefShort	= 9,
	vsCMTypeRefInt	= 10,
	vsCMTypeRefLong	= 11,
	vsCMTypeRefFloat	= 12,
	vsCMTypeRefDouble	= 13,
	vsCMTypeRefDecimal	= 14,
	vsCMTypeRefBool	= 15,
	vsCMTypeRefVariant	= 16
    } 	vsCMTypeRef;

















typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("75607DDE-2B43-11d3-B88B-00C04F79E479") 
enum dbgBreakpointType
    {	dbgBreakpointTypePending	= 1,
	dbgBreakpointTypeBound	= dbgBreakpointTypePending + 1
    } 	dbgBreakpointType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("229C054C-C146-11d2-8AD1-00C04F79E479") 
enum dbgBreakpointLocationType
    {	dbgBreakpointLocationTypeNone	= 1,
	dbgBreakpointLocationTypeFunction	= dbgBreakpointLocationTypeNone + 1,
	dbgBreakpointLocationTypeFile	= dbgBreakpointLocationTypeFunction + 1,
	dbgBreakpointLocationTypeData	= dbgBreakpointLocationTypeFile + 1,
	dbgBreakpointLocationTypeAddress	= dbgBreakpointLocationTypeData + 1
    } 	dbgBreakpointLocationType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("2A594772-C146-11d2-8AD1-00C04F79E479") 
enum dbgBreakpointConditionType
    {	dbgBreakpointConditionTypeWhenTrue	= 1,
	dbgBreakpointConditionTypeWhenChanged	= dbgBreakpointConditionTypeWhenTrue + 1
    } 	dbgBreakpointConditionType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ED2FBDD2-1EB1-11d3-B888-00C04F79E479") 
enum dbgExceptionAction
    {	dbgExceptionActionDefault	= 1,
	dbgExceptionActionIgnore	= dbgExceptionActionDefault + 1,
	dbgExceptionActionBreak	= dbgExceptionActionIgnore + 1,
	dbgExceptionActionContinue	= dbgExceptionActionBreak + 1
    } 	dbgExceptionAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3A3329CE-C146-11d2-8AD1-00C04F79E479") 
enum dbgHitCountType
    {	dbgHitCountTypeNone	= 1,
	dbgHitCountTypeEqual	= dbgHitCountTypeNone + 1,
	dbgHitCountTypeGreaterOrEqual	= dbgHitCountTypeEqual + 1,
	dbgHitCountTypeMultiple	= dbgHitCountTypeGreaterOrEqual + 1
    } 	dbgHitCountType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("E940C60A-C68F-11d2-8AD6-00C04F79E479") 
enum dbgDebugMode
    {	dbgDesignMode	= 1,
	dbgBreakMode	= dbgDesignMode + 1,
	dbgRunMode	= dbgBreakMode + 1
    } 	dbgDebugMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("4106C580-C146-11d2-8AD1-00C04F79E479") 
enum dbgEventReason
    {	dbgEventReasonNone	= 1,
	dbgEventReasonGo	= dbgEventReasonNone + 1,
	dbgEventReasonAttachProgram	= dbgEventReasonGo + 1,
	dbgEventReasonDetachProgram	= dbgEventReasonAttachProgram + 1,
	dbgEventReasonLaunchProgram	= dbgEventReasonDetachProgram + 1,
	dbgEventReasonEndProgram	= dbgEventReasonLaunchProgram + 1,
	dbgEventReasonStopDebugging	= dbgEventReasonEndProgram + 1,
	dbgEventReasonStep	= dbgEventReasonStopDebugging + 1,
	dbgEventReasonBreakpoint	= dbgEventReasonStep + 1,
	dbgEventReasonExceptionThrown	= dbgEventReasonBreakpoint + 1,
	dbgEventReasonExceptionNotHandled	= dbgEventReasonExceptionThrown + 1,
	dbgEventReasonUserBreak	= dbgEventReasonExceptionNotHandled + 1,
	dbgEventReasonContextSwitch	= dbgEventReasonUserBreak + 1
    } 	dbgEventReason;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("77940E85-BCE0-443d-8B77-F5BD841A211E") 
enum dbgExecutionAction
    {	dbgExecutionActionDefault	= 1,
	dbgExecutionActionGo	= dbgExecutionActionDefault + 1,
	dbgExecutionActionStopDebugging	= dbgExecutionActionGo + 1,
	dbgExecutionActionStepInto	= dbgExecutionActionStopDebugging + 1,
	dbgExecutionActionStepOut	= dbgExecutionActionStepInto + 1,
	dbgExecutionActionStepOver	= dbgExecutionActionStepOut + 1,
	dbgExecutionActionRunToCursor	= dbgExecutionActionStepOver + 1
    } 	dbgExecutionAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("178c767a-1963-4bc5-b3f2-e70f3eb441a8") 
enum vsNavigateBrowser
    {	vsNavigateBrowserDefault	= 0,
	vsNavigateBrowserHelp	= 1,
	vsNavigateBrowserNewWindow	= 2
    } 	vsNavigateBrowser;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("947978f5-185b-4366-921e-a14c0ed46702") 
enum vsCommandDisabledFlags
    {	vsCommandDisabledFlagsEnabled	= 0,
	vsCommandDisabledFlagsGrey	= 0x10,
	vsCommandDisabledFlagsHidden	= 0x20
    } 	vsCommandDisabledFlags;

typedef /* [uuid] */  DECLSPEC_UUID("9e3c8489-ae44-4fcf-9697-cd3f312ba08c") 
enum vsInitializeMode
    {	vsInitializeModeStartup	= 0,
	vsInitializeModeReset	= 1
    } 	vsInitializeMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("79946991-1ae2-4d2d-9768-fd7801be7daa") 
enum vsCommandBarType
    {	vsCommandBarTypePopup	= 10,
	vsCommandBarTypeToolbar	= 23,
	vsCommandBarTypeMenu	= 24
    } 	vsCommandBarType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("b638b3e3-c98b-4f59-9d05-105a620529f9") 
enum vsIDEMode
    {	vsIDEModeDesign	= 1,
	vsIDEModeDebug	= 2
    } 	vsIDEMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("d920605a-11dd-4a12-a8dc-10578bb08606") 
enum wizardResult
    {	wizardResultSuccess	= -1,
	wizardResultFailure	= 0,
	wizardResultCancel	= 1,
	wizardResultBackOut	= 2
    } 	wizardResult;

#define ext_cm_Solution 4
#define ext_cm_UISetup 5
#define ext_dm_UISetupComplete 2
#define ext_dm_SolutionClosed 3
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ca3ee5d0-6305-422f-a425-99737956088f") 
enum vsPromptResult
    {	vsPromptResultYes	= 1,
	vsPromptResultNo	= 2,
	vsPromptResultCancelled	= 3
    } 	vsPromptResult;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("d9e97957-b425-4cd6-bb74-9e6f232a342a") 
enum vsCommandStatusTextWanted
    {	vsCommandStatusTextWantedNone	= 0,
	vsCommandStatusTextWantedName	= 1,
	vsCommandStatusTextWantedStatus	= 2
    } 	vsCommandStatusTextWanted;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("e0ace2e3-49c1-4aa3-ac03-a2877a93d77f") 
enum vsCommandStatus
    {	vsCommandStatusUnsupported	= 0,
	vsCommandStatusSupported	= 1,
	vsCommandStatusEnabled	= 2,
	vsCommandStatusLatched	= 4,
	vsCommandStatusNinched	= 8,
	vsCommandStatusInvisible	= 16
    } 	vsCommandStatus;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3c537e1a-39b8-4fda-9f22-93d8c030865d") 
enum vsCommandExecOption
    {	vsCommandExecOptionDoDefault	= 0,
	vsCommandExecOptionPromptUser	= 1,
	vsCommandExecOptionDoPromptUser	= 2,
	vsCommandExecOptionShowHelp	= 3
    } 	vsCommandExecOption;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("e0e643c3-5410-487a-b64e-2664a5c4ab50") 
enum vsDisplay
    {	vsDisplayMDI	= 1,
	vsDisplayMDITabs	= 2
    } 	vsDisplay;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("AAE3FAE8-8AFC-11D2-ADEE-00C04F7971C3") 
enum vsSaveChanges
    {	vsSaveChangesYes	= 1,
	vsSaveChangesNo	= 2,
	vsSaveChangesPrompt	= 3
    } 	vsSaveChanges;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("8901ff7a-e6e8-4154-a505-135ee434817e") 
enum vsSaveStatus
    {	vsSaveCancelled	= 2,
	vsSaveSucceeded	= 1
    } 	vsSaveStatus;

#define SID_SVsSourceControl IID_SourceControl
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3982FA28-7BCC-4f14-817C-93EEECE8BEEE") 
enum vsBuildKind
    {	vsBuildKindSolution	= 0,
	vsBuildKindProject	= 1,
	vsBuildKindProjectItem	= 2
    } 	vsBuildKind;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("FA7FA701-EFAD-4895-A95A-D4ECB383BF7D") 
enum vsBuildScope
    {	vsBuildScopeSolution	= 1,
	vsBuildScopeBatch	= 2,
	vsBuildScopeProject	= 3
    } 	vsBuildScope;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("FA7FA702-EFAD-4895-A95A-D4ECB383BF7D") 
enum vsBuildAction
    {	vsBuildActionBuild	= 1,
	vsBuildActionRebuildAll	= 2,
	vsBuildActionClean	= 3,
	vsBuildActionDeploy	= 4
    } 	vsBuildAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8A9-D29B-11D2-AABD-00C04F688DDE") 
enum vsWindowType
    {	vsWindowTypeCodeWindow	= 0,
	vsWindowTypeDesigner	= 1,
	vsWindowTypeBrowser	= 2,
	vsWindowTypeWatch	= 3,
	vsWindowTypeLocals	= 4,
	vsWindowTypeImmediate	= 5,
	vsWindowTypeSolutionExplorer	= 6,
	vsWindowTypeProperties	= 7,
	vsWindowTypeFind	= 8,
	vsWindowTypeFindReplace	= 9,
	vsWindowTypeToolbox	= 10,
	vsWindowTypeLinkedWindowFrame	= 11,
	vsWindowTypeMainWindow	= 12,
	vsWindowTypePreview	= 13,
	vsWindowTypeColorPalette	= 14,
	vsWindowTypeToolWindow	= 15,
	vsWindowTypeDocument	= 16,
	vsWindowTypeOutput	= 17,
	vsWindowTypeTaskList	= 18,
	vsWindowTypeAutos	= 19,
	vsWindowTypeCallStack	= 20,
	vsWindowTypeThreads	= 21,
	vsWindowTypeDocumentOutline	= 22,
	vsWindowTypeRunningDocuments	= 23
    } 	vsWindowType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("cd678662-7939-48a0-bf1d-fa1bed56c130") 
enum vsWindowState
    {	vsWindowStateNormal	= 0,
	vsWindowStateMinimize	= 1,
	vsWindowStateMaximize	= 2
    } 	vsWindowState;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("539f9c17-db5f-421d-b02b-07bcf9faa92f") 
enum vsLinkedWindowType
    {	vsLinkedWindowTypeDocked	= 0,
	vsLinkedWindowTypeVertical	= 2,
	vsLinkedWindowTypeHorizontal	= 3,
	vsLinkedWindowTypeTabbed	= 1
    } 	vsLinkedWindowType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("59286edc-d580-4e22-96c9-44d15b6148cc") 
enum vsContextAttributes
    {	vsContextAttributesGlobal	= 1,
	vsContextAttributesWindow	= 2,
	vsContextAttributesHighPriority	= 3
    } 	vsContextAttributes;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("410202e1-b83a-41dd-aab0-8c0029fe9435") 
enum vsContextAttributeType
    {	vsContextAttributeFilter	= 1,
	vsContextAttributeLookup	= 2,
	vsContextAttributeLookupF1	= 3
    } 	vsContextAttributeType;

typedef /* [uuid] */  DECLSPEC_UUID("11f0cb7f-4f63-4e09-b99c-92a6cc5f84ce") 
enum vsTextChanged
    {	vsTextChangedMultiLine	= 1,
	vsTextChangedSave	= 2,
	vsTextChangedCaretMoved	= 4,
	vsTextChangedReplaceAll	= 8,
	vsTextChangedNewline	= 16,
	vsTextChangedFindStarting	= 32
    } 	vsTextChanged;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("36B56DE8-5A17-11D1-B2B6-00C04FB6C6FF") 
enum vsTaskPriority
    {	vsTaskPriorityLow	= 1,
	vsTaskPriorityMedium	= 2,
	vsTaskPriorityHigh	= 3
    } 	vsTaskPriority;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("195DAB2E-4854-11D2-8820-00C04FB6C6FF") 
enum vsTaskIcon
    {	vsTaskIconNone	= 0,
	vsTaskIconCompile	= 1,
	vsTaskIconSquiggle	= 2,
	vsTaskIconComment	= 3,
	vsTaskIconShortcut	= 4,
	vsTaskIconUser	= 5
    } 	vsTaskIcon;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("9848C17E-6AA5-11D2-97C3-00C04FB6C6FF") 
enum vsTaskListColumn
    {	vsTaskListColumnPriority	= 1,
	vsTaskListColumnGlyph	= 2,
	vsTaskListColumnCheck	= 4,
	vsTaskListColumnDescription	= 8,
	vsTaskListColumnFile	= 16,
	vsTaskListColumnLine	= 32
    } 	vsTaskListColumn;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("f40a5d39-fd39-4f03-8358-4df3c338b448") 
enum vsStatusAnimation
    {	vsStatusAnimationGeneral	= 0,
	vsStatusAnimationPrint	= 1,
	vsStatusAnimationSave	= 2,
	vsStatusAnimationDeploy	= 3,
	vsStatusAnimationSync	= 4,
	vsStatusAnimationBuild	= 5,
	vsStatusAnimationFind	= 6
    } 	vsStatusAnimation;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("44DF8FDC-7378-11D2-97CA-00C04FB6C6FF") 
enum vsToolBoxItemFormat
    {	vsToolBoxItemFormatText	= 1,
	vsToolBoxItemFormatHTML	= 2,
	vsToolBoxItemFormatGUID	= 4,
	vsToolBoxItemFormatDotNETComponent	= 8
    } 	vsToolBoxItemFormat;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8AC-D29B-11D2-AABD-00C04F688DDE") 
enum vsStartUp
    {	vsStartUpShowHomePage	= 0,
	vsStartUpLoadLastSolution	= 1,
	vsStartUpOpenProjectDialog	= 2,
	vsStartUpNewProjectDialog	= 3,
	vsStartUpEmptyEnvironment	= 4
    } 	vsStartUp;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8A4-D29B-11D2-AABD-00C04F688DDE") 
enum vsFontCharSet
    {	vsFontCharSetANSI	= 0,
	vsFontCharSetDefault	= 1,
	vsFontCharSetSymbol	= 2,
	vsFontCharSetShiftJIS	= 128,
	vsFontCharSetHangeul	= 129,
	vsFontCharSetGB2312	= 134,
	vsFontCharSetChineseBig5	= 136,
	vsFontCharSetOEM	= 255,
	vsFontCharSetJohab	= 130,
	vsFontCharSetHebrew	= 177,
	vsFontCharSetArabic	= 178,
	vsFontCharSetGreek	= 161,
	vsFontCharSetTurkish	= 162,
	vsFontCharSetVietnamese	= 163,
	vsFontCharSetThai	= 222,
	vsFontCharSetEastEurope	= 238,
	vsFontCharSetRussian	= 204,
	vsFontCharSetMac	= 77,
	vsFontCharSetBaltic	= 186
    } 	vsFontCharSet;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("947FFC03-8314-4288-BDD7-DFD282DA40D5") 
enum vsBrowserViewSource
    {	vsBrowserViewSourceSource	= 1,
	vsBrowserViewSourceDesign	= 2,
	vsBrowserViewSourceExternal	= 3
    } 	vsBrowserViewSource;

// Standard Shell Automation Extender CATIDs
// These are the intrinsic extender CATIDs for the automation and the property
// browser IDispatch objects implemented by the shell that suppport Automation
// Extenders. For other implementation specific extender CATIDs (for eg. VB, VC)
// look in those specific headers
//
// Also note that the object (IDispatch) used for automation is typically
// different than the one used for Property Browsing. For instance, the
// DTE.Solution automation object is different than the object used to populate
// the property browser when the solution node is selected in the project
// explorer. Hence, the two objects used DIFFERENT intrinsic CATIDs
// (guidCATIDSolution for the Solution automation object and
// guidCATIDSolutionBrowseObject for the Solution's property browse object)
// Solution Automation object CATID {52AEFF70-BBD8-11d2-8598-006097C68E81}
DEFINE_GUID(guidCATIDSolution,						0x52aeff70, 0xbbd8, 0x11d2, 0x85, 0x98, 0x0, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Solution Browse Object CATID {A2392464-7C22-11d3-BDCA-00C04F688E50}
DEFINE_GUID(guidCATIDSolutionBrowseObject, 0xa2392464, 0x7c22, 0x11d3, 0xbd, 0xca, 0x0, 0xc0, 0x4f, 0x68, 0x8e, 0x50);
// Misc Files Project Automation Object CATID {610d4612-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDMiscFilesProject,		0x610d4612, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Misc Files Project Item Automation Object CATID {610d4613-d0d5-11d2-8599-006097c68e81
DEFINE_GUID(guidCATIDMiscFilesProjectItem, 0x610d4613, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Generic Project Automation Object CATID {610d4616-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDGenericProject,			0x610d4616, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// (Generic) Document Automation Object CATID {610d4611-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDDocument,						0x610d4611, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("28362492-b1e3-4998-94c6-0a2cdb5484ed") 
enum vsUISelectionType
    {	vsUISelectionTypeSelect	= 1,
	vsUISelectionTypeToggle	= 2,
	vsUISelectionTypeExtend	= 3,
	vsUISelectionTypeSetCaret	= 4
    } 	vsUISelectionType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("16386f0e-4ad2-41b8-8d6f-7ff230ae1d17") 
enum vsBuildState
    {	vsBuildStateNotStarted	= 1,
	vsBuildStateInProgress	= 2,
	vsBuildStateDone	= 3
    } 	vsBuildState;

#ifdef Debug
#define Debug_defined
#undef Debug
#endif
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("612256bd-7ba2-45c4-b60f-7b2ae42f96c3") 
enum vsConfigurationType
    {	vsConfigurationTypeProject	= 1,
	vsConfigurationTypeProjectItem	= 2
    } 	vsConfigurationType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("9fb64132-726a-4262-829e-051c6ec7b24f") 
enum vsFindAction
    {	vsFindActionFind	= 1,
	vsFindActionFindAll	= 2,
	vsFindActionReplace	= 3,
	vsFindActionReplaceAll	= 4,
	vsFindActionBookmarkAll	= 5
    } 	vsFindAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("6fa137be-32a8-4f54-8099-60bb955097a3") 
enum vsFindResult
    {	vsFindResultNotFound	= 0,
	vsFindResultFound	= 1,
	vsFindResultReplaceAndNotFound	= 2,
	vsFindResultReplaceAndFound	= 3,
	vsFindResultReplaced	= 4,
	vsFindResultPending	= 5,
	vsFindResultError	= 6
    } 	vsFindResult;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("530f2d0e-a5f9-4b7a-a379-0a3b99b5e66d") 
enum vsFindPatternSyntax
    {	vsFindPatternSyntaxLiteral	= 0,
	vsFindPatternSyntaxRegExpr	= 1,
	vsFindPatternSyntaxWildcards	= 2
    } 	vsFindPatternSyntax;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("481899fb-b657-4e45-8c00-0e051052bb13") 
enum vsFindTarget
    {	vsFindTargetCurrentDocument	= 1,
	vsFindTargetCurrentDocumentSelection	= 2,
	vsFindTargetCurrentDocumentFunction	= 3,
	vsFindTargetOpenDocuments	= 4,
	vsFindTargetCurrentProject	= 5,
	vsFindTargetSolution	= 6,
	vsFindTargetFiles	= 7
    } 	vsFindTarget;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ea9142bf-b2af-48a7-b256-93ccd3350bd8") 
enum vsFindResultsLocation
    {	vsFindResultsNone	= 0,
	vsFindResults1	= 1,
	vsFindResults2	= 2
    } 	vsFindResultsLocation;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("a457303f-d058-4415-a2b4-a81b148c7689") 
enum vsFindOptions
    {	vsFindOptionsNone	= 0,
	vsFindOptionsMatchWholeWord	= 0x2,
	vsFindOptionsMatchCase	= 0x4,
	vsFindOptionsRegularExpression	= 0x8,
	vsFindOptionsBackwards	= 0x80,
	vsFindOptionsFromStart	= 0x100,
	vsFindOptionsMatchInHiddenText	= 0x200,
	vsFindOptionsWildcards	= 0x400,
	vsFindOptionsSearchSubfolders	= 0x1000,
	vsFindOptionsKeepModifiedDocumentsOpen	= 0x2000
    } 	vsFindOptions;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("b4cc3e73-0038-47e5-ba52-d1183f8fdbf0") 
enum vsNavigateOptions
    {	vsNavigateOptionsDefault	= 0,
	vsNavigateOptionsNewWindow	= 0x1
    } 	vsNavigateOptions;

#define SID_SExtensionManager	IID_ObjectExtenders
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("221ab797-408b-4d69-9dd1-c6f329189414") 
enum vsFilterProperties
    {	vsFilterPropertiesNone	= 0,
	vsFilterPropertiesAll	= 1,
	vsFilterPropertiesSet	= 2
    } 	vsFilterProperties;

typedef /* [uuid] */  DECLSPEC_UUID("bbdfcfe4-4c68-4736-b991-f85fa955d585") 
enum vsWhitespaceOptions
    {	vsWhitespaceOptionsHorizontal	= 0,
	vsWhitespaceOptionsVertical	= 1
    } 	vsWhitespaceOptions;

typedef /* [uuid] */  DECLSPEC_UUID("98a2f403-007b-41f8-9a18-87addef1760f") 
enum vsCaseOptions
    {	vsCaseOptionsLowercase	= 1,
	vsCaseOptionsUppercase	= 2,
	vsCaseOptionsCapitalize	= 3
    } 	vsCaseOptions;

typedef /* [uuid] */  DECLSPEC_UUID("29182bd4-48a8-4e4b-81dd-1b742a3a5203") 
enum vsMovementOptions
    {	vsMovementOptionsMove	= 0,
	vsMovementOptionsExtend	= 1
    } 	vsMovementOptions;

typedef /* [uuid] */  DECLSPEC_UUID("f05ea427-01ba-46dc-8392-fb4aa7e5eb3a") 
enum vsStartOfLineOptions
    {	vsStartOfLineOptionsFirstColumn	= 0,
	vsStartOfLineOptionsFirstText	= 1
    } 	vsStartOfLineOptions;

typedef /* [uuid] */  DECLSPEC_UUID("11b63a24-6200-48cd-9b8d-fc6a6fb9eff0") 
enum vsGoToLineOptions
    {	vsGoToLineOptionsLast	= -1,
	vsGoToLineOptionsFirst	= -2
    } 	vsGoToLineOptions;

typedef /* [uuid] */  DECLSPEC_UUID("c512dde3-a220-4373-8950-e6636f8cc546") 
enum vsSmartFormatOptions
    {	vsSmartFormatOptionsNone	= 0,
	vsSmartFormatOptionsBlock	= 1,
	vsSmartFormatOptionsSmart	= 2
    } 	vsSmartFormatOptions;

typedef /* [uuid] */  DECLSPEC_UUID("f3128012-b41f-46ec-8794-f716db9697d0") 
enum vsSelectionMode
    {	vsSelectionModeStream	= 0,
	vsSelectionModeBox	= 1
    } 	vsSelectionMode;

typedef /* [uuid] */  DECLSPEC_UUID("79515b53-8294-4f96-aa96-dd16bf126703") 
enum vsInsertFlags
    {	vsInsertFlagsCollapseToEnd	= 1,
	vsInsertFlagsCollapseToStart	= 2,
	vsInsertFlagsContainNewText	= 4,
	vsInsertFlagsInsertAtEnd	= 8,
	vsInsertFlagsInsertAtStart	= 16
    } 	vsInsertFlags;

typedef /* [uuid] */  DECLSPEC_UUID("b26ac3c2-3981-4a2e-9d6f-559b41cd1cd2") 
enum vsPaneShowHow
    {	vsPaneShowCentered	= 0,
	vsPaneShowTop	= 1,
	vsPaneShowAsIs	= 2
    } 	vsPaneShowHow;

typedef /* [uuid] */  DECLSPEC_UUID("4eb2c04f-8a83-4363-81db-dbb76cd76812") 
enum vsMoveToColumnLine
    {	vsMoveToColumnLineFirst	= 0,
	vsMoveToColumnLineLast	= 1
    } 	vsMoveToColumnLine;

typedef /* [uuid] */  DECLSPEC_UUID("3740dcf8-b8b2-49a9-a1ab-944c84876c3c") 
enum vsEPReplaceTextOptions
    {	vsEPReplaceTextKeepMarkers	= 1,
	vsEPReplaceTextNormalizeNewlines	= 2,
	vsEPReplaceTextTabsSpaces	= 4,
	vsEPReplaceTextAutoformat	= 8
    } 	vsEPReplaceTextOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("C106C8DC-6D0C-11D1-B2C9-00C04FB6C6FF") 
enum vsext_FontCharSet
    {	vsext_fontcs_ANSI	= 0,
	vsext_fontcs_DEFAULT	= 1,
	vsext_fontcs_SYMBOL	= 2,
	vsext_fontcs_SHIFTJIS	= 128,
	vsext_fontcs_HANGEUL	= 129,
	vsext_fontcs_GB2312	= 134,
	vsext_fontcs_CHINESEBIG5	= 136,
	vsext_fontcs_OEM	= 255,
	vsext_fontcs_JOHAB	= 130,
	vsext_fontcs_HEBREW	= 177,
	vsext_fontcs_ARABIC	= 178,
	vsext_fontcs_GREEK	= 161,
	vsext_fontcs_TURKISH	= 162,
	vsext_fontcs_VIETNAMESE	= 163,
	vsext_fontcs_THAI	= 222,
	vsext_fontcs_EASTEUROPE	= 238,
	vsext_fontcs_RUSSIAN	= 204,
	vsext_fontcs_MAC	= 77,
	vsext_fontcs_BALTIC	= 186
    } 	vsext_FontCharSet;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("cb0066fc-c052-4b24-84e7-045f33e4d6af") 
enum VSEXECRESULT
    {	RESULT_Success	= -1,
	RESULT_Failure	= 0,
	RESULT_Cancel	= 1
    } 	vs_exec_Result;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("91aab9c3-da83-473a-8bc9-1a2730865995") 
enum vsext_DisplayMode
    {	vsext_dm_SDI	= 0,
	vsext_dm_MDI	= 1
    } 	vsext_DisplayMode;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("E4B9E990-FD59-11D0-BBC6-00A0C90F2744") 
enum vsext_WindowType
    {	vsext_wt_CodeWindow	= 0,
	vsext_wt_Designer	= 1,
	vsext_wt_Browser	= 2,
	vsext_wt_Watch	= 3,
	vsext_wt_Locals	= 4,
	vsext_wt_Immediate	= 5,
	vsext_wt_ProjectWindow	= 6,
	vsext_wt_PropertyWindow	= 7,
	vsext_wt_Find	= 8,
	vsext_wt_FindReplace	= 9,
	vsext_wt_Toolbox	= 10,
	vsext_wt_LinkedWindowFrame	= 11,
	vsext_wt_MainWindow	= 12,
	vsext_wt_Preview	= 13,
	vsext_wt_ColorPalette	= 14,
	vsext_wt_ToolWindow	= 15,
	vsext_wt_Document	= 16,
	vsext_wt_OutPutWindow	= 17,
	vsext_wt_TaskList	= 18,
	vsext_wt_Autos	= 19,
	vsext_wt_CallStack	= 20,
	vsext_wt_Threads	= 21,
	vsext_wt_DocumentOutline	= 22,
	vsext_wt_RunningDocuments	= 23
    } 	vsext_WindowType;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("e0c72e51-6b99-489b-aca6-90cedce888e7") 
enum vsext_WindowState
    {	vsext_ws_Normal	= 0,
	vsext_ws_Minimize	= 1,
	vsext_ws_Maximize	= 2
    } 	vsext_WindowState;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("97653acf-d869-4ec0-b450-e9842457c729") 
enum vsext_LinkedWindowType
    {	vsext_lwt_Docked	= 0,
	vsext_lwt_Tabbed	= 1
    } 	vsext_LinkedWindowType;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("A5578594-18E0-11D1-BBDB-00A0C90F2744") 
enum vsext_StartUp
    {	vsext_su_EMPTY_ENVIRONMENT	= 0,
	vsext_su_NEW_SOLUTION_DIALOG	= 1,
	vsext_su_LOAD_LAST_SOLUTION	= 2
    } 	vsext_StartUp;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("47046891-19F7-11D1-BCAF-000000000000") 
enum vsext_Build
    {	vsext_bld_SAVE_CHANGES	= 0,
	vsext_bld_CONFIRM_SAVE	= 1,
	vsext_bld_NO_SAVE	= 2
    } 	vsext_Build;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("bdbe10aa-74d3-498a-a464-8074cd5e99cb") 
enum DsTextSearchOptions
    {	dsMatchWord	= 2,
	dsMatchCase	= 4,
	dsMatchNoRegExp	= 0,
	dsMatchRegExp	= 8,
	dsMatchRegExpB	= 16,
	dsMatchRegExpE	= 32,
	dsMatchRegExpCur	= 64,
	dsMatchForward	= 0,
	dsMatchBackward	= 128,
	dsMatchFromStart	= 256
    } 	DsTextSearchOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("99744EC4-7A72-11D2-ADC9-00C04F7971C3") 
enum DsSaveChanges
    {	dsSaveChangesYes	= 1,
	dsSaveChangesNo	= 2,
	dsSaveChangesPrompt	= 3
    } 	DsSaveChanges;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("6269c78d-5591-40d6-a095-5bac8ba07478") 
enum DsGoToLineOptions
    {	dsLastLine	= -1
    } 	DsGoToLineOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("95751137-ac07-4c76-a219-4be5d381985d") 
enum DsStartOfLineOptions
    {	dsFirstColumn	= 0,
	dsFirstText	= 1
    } 	DsStartOfLineOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("4b58f807-6f08-4b41-abaf-b5bca4869d2c") 
enum DsMovementOptions
    {	dsMove	= 0,
	dsExtend	= 1
    } 	DsMovementOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("31445615-bcae-4ba0-a99c-246bc660cfe8") 
enum DsWhitespaceOptions
    {	dsHorizontal	= 0,
	dsVertical	= 1
    } 	DsWhitespaceOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("f7d38518-e803-4462-8fa2-e481642d42fb") 
enum DsCaseOptions
    {	dsLowercase	= 1,
	dsUppercase	= 2,
	dsCapitalize	= 3
    } 	DsCaseOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("8d78b9a9-a3be-49d0-aa97-bf7fa46d8ea2") 
enum dsSaveStatus
    {	dsSaveCancelled	= 2,
	dsSaveSucceeded	= 1
    } 	dsSaveStatus;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("44160df5-e305-4d85-b7fe-6b5a1b81b9b0") 
enum vsHTMLTabs
    {	vsHTMLTabsSource	= 0,
	vsHTMLTabsDesign	= 1
    } 	vsHTMLTabs;


EXTERN_C const IID LIBID_EnvDTE;

#ifndef ___DTE_INTERFACE_DEFINED__
#define ___DTE_INTERFACE_DEFINED__

/* interface _DTE */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__DTE;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04a72314-32e9-48e2-9b87-a63603454f3e")
    _DTE : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ IDispatch **ppcbs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **ppwnsVBWindows) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Events( 
            /* [retval][out] */ Events **ppevtEvents) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **lpppAddIns) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MainWindow( 
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ Window **ppwinActive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayMode( 
            /* [retval][out] */ vsDisplay *lpDispMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayMode( 
            /* [in] */ vsDisplay DispMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Solution( 
            /* [retval][out] */ Solution	**ppSolution) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Commands( 
            /* [retval][out] */ Commands **ppCommands) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            BSTR Category,
            BSTR Page,
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ SelectedItems **ppSelectedItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandLineArguments( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFile( 
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpenFile( 
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocaleID( 
            /* [retval][out] */ long *lpReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowConfigurations( 
            /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Documents( 
            /* [retval][out] */ Documents **ppDocuments) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveDocument( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteCommand( 
            /* [in] */ BSTR CommandName,
            /* [defaultvalue][in] */ BSTR CommandArgs = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StatusBar( 
            /* [retval][out] */ StatusBar **ppStatusBar) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserControl( 
            /* [retval][out] */ VARIANT_BOOL *UserControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserControl( 
            /* [in] */ VARIANT_BOOL HasControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectExtenders( 
            /* [retval][out] */ ObjectExtenders **ppObjectExtenders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Find( 
            /* [retval][out] */ Find **ppFind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ vsIDEMode *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LaunchWizard( 
            /* [in] */ BSTR VSZFile,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [retval][out] */ wizardResult *pResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemOperations( 
            /* [retval][out] */ ItemOperations **ppItemOperations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UndoContext( 
            /* [retval][out] */ UndoContext **ppUndoContext) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Macros( 
            /* [retval][out] */ Macros **ppMacros) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveSolutionProjects( 
            /* [retval][out] */ VARIANT *pProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MacrosIDE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RegistryRoot( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ DTE	**pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceControl( 
            /* [retval][out] */ SourceControl **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressUI( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressUI( 
            /* [in] */ VARIANT_BOOL Suppress) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Debugger( 
            /* [retval][out] */ Debugger **ppDebugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SatelliteDLLPath( 
            BSTR Path,
            BSTR Name,
            /* [retval][out] */ BSTR *pFullPath) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Edition( 
            /* [retval][out] */ BSTR *ProductEdition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DTEVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DTE * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DTE * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DTE * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DTE * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DTE * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DTE * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DTE * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _DTE * This,
            /* [retval][out] */ IDispatch **ppcbs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _DTE * This,
            /* [retval][out] */ Windows **ppwnsVBWindows);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Events )( 
            _DTE * This,
            /* [retval][out] */ Events **ppevtEvents);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _DTE * This,
            /* [retval][out] */ AddIns **lpppAddIns);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MainWindow )( 
            _DTE * This,
            /* [retval][out] */ Window **ppwin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _DTE * This,
            /* [retval][out] */ Window **ppwinActive);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            _DTE * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMode )( 
            _DTE * This,
            /* [retval][out] */ vsDisplay *lpDispMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMode )( 
            _DTE * This,
            /* [in] */ vsDisplay DispMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Solution )( 
            _DTE * This,
            /* [retval][out] */ Solution	**ppSolution);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Commands )( 
            _DTE * This,
            /* [retval][out] */ Commands **ppCommands);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            _DTE * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            _DTE * This,
            BSTR Category,
            BSTR Page,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            _DTE * This,
            /* [retval][out] */ SelectedItems **ppSelectedItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLineArguments )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenFile )( 
            _DTE * This,
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Window **ppwin);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpenFile )( 
            _DTE * This,
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            _DTE * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocaleID )( 
            _DTE * This,
            /* [retval][out] */ long *lpReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowConfigurations )( 
            _DTE * This,
            /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Documents )( 
            _DTE * This,
            /* [retval][out] */ Documents **ppDocuments);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveDocument )( 
            _DTE * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteCommand )( 
            _DTE * This,
            /* [in] */ BSTR CommandName,
            /* [defaultvalue][in] */ BSTR CommandArgs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            _DTE * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StatusBar )( 
            _DTE * This,
            /* [retval][out] */ StatusBar **ppStatusBar);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserControl )( 
            _DTE * This,
            /* [retval][out] */ VARIANT_BOOL *UserControl);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserControl )( 
            _DTE * This,
            /* [in] */ VARIANT_BOOL HasControl);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectExtenders )( 
            _DTE * This,
            /* [retval][out] */ ObjectExtenders **ppObjectExtenders);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Find )( 
            _DTE * This,
            /* [retval][out] */ Find **ppFind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            _DTE * This,
            /* [retval][out] */ vsIDEMode *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LaunchWizard )( 
            _DTE * This,
            /* [in] */ BSTR VSZFile,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [retval][out] */ wizardResult *pResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemOperations )( 
            _DTE * This,
            /* [retval][out] */ ItemOperations **ppItemOperations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UndoContext )( 
            _DTE * This,
            /* [retval][out] */ UndoContext **ppUndoContext);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Macros )( 
            _DTE * This,
            /* [retval][out] */ Macros **ppMacros);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveSolutionProjects )( 
            _DTE * This,
            /* [retval][out] */ VARIANT *pProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MacrosIDE )( 
            _DTE * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RegistryRoot )( 
            _DTE * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _DTE * This,
            /* [retval][out] */ DTE	**pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextAttributes )( 
            _DTE * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceControl )( 
            _DTE * This,
            /* [retval][out] */ SourceControl **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressUI )( 
            _DTE * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressUI )( 
            _DTE * This,
            /* [in] */ VARIANT_BOOL Suppress);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Debugger )( 
            _DTE * This,
            /* [retval][out] */ Debugger **ppDebugger);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SatelliteDLLPath )( 
            _DTE * This,
            BSTR Path,
            BSTR Name,
            /* [retval][out] */ BSTR *pFullPath);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Edition )( 
            _DTE * This,
            /* [retval][out] */ BSTR *ProductEdition);
        
        END_INTERFACE
    } _DTEVtbl;

    interface _DTE
    {
        CONST_VTBL struct _DTEVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DTE_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DTE_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DTE_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DTE_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DTE_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DTE_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DTE_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DTE_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define _DTE_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define _DTE_get_Version(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Version(This,lpbstrReturn)

#define _DTE_get_CommandBars(This,ppcbs)	\
    (This)->lpVtbl -> get_CommandBars(This,ppcbs)

#define _DTE_get_Windows(This,ppwnsVBWindows)	\
    (This)->lpVtbl -> get_Windows(This,ppwnsVBWindows)

#define _DTE_get_Events(This,ppevtEvents)	\
    (This)->lpVtbl -> get_Events(This,ppevtEvents)

#define _DTE_get_AddIns(This,lpppAddIns)	\
    (This)->lpVtbl -> get_AddIns(This,lpppAddIns)

#define _DTE_get_MainWindow(This,ppwin)	\
    (This)->lpVtbl -> get_MainWindow(This,ppwin)

#define _DTE_get_ActiveWindow(This,ppwinActive)	\
    (This)->lpVtbl -> get_ActiveWindow(This,ppwinActive)

#define _DTE_Quit(This)	\
    (This)->lpVtbl -> Quit(This)

#define _DTE_get_DisplayMode(This,lpDispMode)	\
    (This)->lpVtbl -> get_DisplayMode(This,lpDispMode)

#define _DTE_put_DisplayMode(This,DispMode)	\
    (This)->lpVtbl -> put_DisplayMode(This,DispMode)

#define _DTE_get_Solution(This,ppSolution)	\
    (This)->lpVtbl -> get_Solution(This,ppSolution)

#define _DTE_get_Commands(This,ppCommands)	\
    (This)->lpVtbl -> get_Commands(This,ppCommands)

#define _DTE_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#define _DTE_get_Properties(This,Category,Page,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,Category,Page,ppObject)

#define _DTE_get_SelectedItems(This,ppSelectedItems)	\
    (This)->lpVtbl -> get_SelectedItems(This,ppSelectedItems)

#define _DTE_get_CommandLineArguments(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_CommandLineArguments(This,lpbstrReturn)

#define _DTE_OpenFile(This,ViewKind,FileName,ppwin)	\
    (This)->lpVtbl -> OpenFile(This,ViewKind,FileName,ppwin)

#define _DTE_get_IsOpenFile(This,ViewKind,FileName,lpfReturn)	\
    (This)->lpVtbl -> get_IsOpenFile(This,ViewKind,FileName,lpfReturn)

#define _DTE_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define _DTE_get_LocaleID(This,lpReturn)	\
    (This)->lpVtbl -> get_LocaleID(This,lpReturn)

#define _DTE_get_WindowConfigurations(This,WindowConfigurationsObject)	\
    (This)->lpVtbl -> get_WindowConfigurations(This,WindowConfigurationsObject)

#define _DTE_get_Documents(This,ppDocuments)	\
    (This)->lpVtbl -> get_Documents(This,ppDocuments)

#define _DTE_get_ActiveDocument(This,ppDocument)	\
    (This)->lpVtbl -> get_ActiveDocument(This,ppDocument)

#define _DTE_ExecuteCommand(This,CommandName,CommandArgs)	\
    (This)->lpVtbl -> ExecuteCommand(This,CommandName,CommandArgs)

#define _DTE_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define _DTE_get_StatusBar(This,ppStatusBar)	\
    (This)->lpVtbl -> get_StatusBar(This,ppStatusBar)

#define _DTE_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define _DTE_get_UserControl(This,UserControl)	\
    (This)->lpVtbl -> get_UserControl(This,UserControl)

#define _DTE_put_UserControl(This,HasControl)	\
    (This)->lpVtbl -> put_UserControl(This,HasControl)

#define _DTE_get_ObjectExtenders(This,ppObjectExtenders)	\
    (This)->lpVtbl -> get_ObjectExtenders(This,ppObjectExtenders)

#define _DTE_get_Find(This,ppFind)	\
    (This)->lpVtbl -> get_Find(This,ppFind)

#define _DTE_get_Mode(This,pVal)	\
    (This)->lpVtbl -> get_Mode(This,pVal)

#define _DTE_LaunchWizard(This,VSZFile,ContextParams,pResult)	\
    (This)->lpVtbl -> LaunchWizard(This,VSZFile,ContextParams,pResult)

#define _DTE_get_ItemOperations(This,ppItemOperations)	\
    (This)->lpVtbl -> get_ItemOperations(This,ppItemOperations)

#define _DTE_get_UndoContext(This,ppUndoContext)	\
    (This)->lpVtbl -> get_UndoContext(This,ppUndoContext)

#define _DTE_get_Macros(This,ppMacros)	\
    (This)->lpVtbl -> get_Macros(This,ppMacros)

#define _DTE_get_ActiveSolutionProjects(This,pProjects)	\
    (This)->lpVtbl -> get_ActiveSolutionProjects(This,pProjects)

#define _DTE_get_MacrosIDE(This,pDTE)	\
    (This)->lpVtbl -> get_MacrosIDE(This,pDTE)

#define _DTE_get_RegistryRoot(This,pVal)	\
    (This)->lpVtbl -> get_RegistryRoot(This,pVal)

#define _DTE_get_Application(This,pVal)	\
    (This)->lpVtbl -> get_Application(This,pVal)

#define _DTE_get_ContextAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_ContextAttributes(This,ppVal)

#define _DTE_get_SourceControl(This,ppVal)	\
    (This)->lpVtbl -> get_SourceControl(This,ppVal)

#define _DTE_get_SuppressUI(This,pVal)	\
    (This)->lpVtbl -> get_SuppressUI(This,pVal)

#define _DTE_put_SuppressUI(This,Suppress)	\
    (This)->lpVtbl -> put_SuppressUI(This,Suppress)

#define _DTE_get_Debugger(This,ppDebugger)	\
    (This)->lpVtbl -> get_Debugger(This,ppDebugger)

#define _DTE_SatelliteDLLPath(This,Path,Name,pFullPath)	\
    (This)->lpVtbl -> SatelliteDLLPath(This,Path,Name,pFullPath)

#define _DTE_get_Edition(This,ProductEdition)	\
    (This)->lpVtbl -> get_Edition(This,ProductEdition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Name_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_FileName_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Version_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_CommandBars_Proxy( 
    _DTE * This,
    /* [retval][out] */ IDispatch **ppcbs);


void __RPC_STUB _DTE_get_CommandBars_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Windows_Proxy( 
    _DTE * This,
    /* [retval][out] */ Windows **ppwnsVBWindows);


void __RPC_STUB _DTE_get_Windows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Events_Proxy( 
    _DTE * This,
    /* [retval][out] */ Events **ppevtEvents);


void __RPC_STUB _DTE_get_Events_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_AddIns_Proxy( 
    _DTE * This,
    /* [retval][out] */ AddIns **lpppAddIns);


void __RPC_STUB _DTE_get_AddIns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_MainWindow_Proxy( 
    _DTE * This,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB _DTE_get_MainWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveWindow_Proxy( 
    _DTE * This,
    /* [retval][out] */ Window **ppwinActive);


void __RPC_STUB _DTE_get_ActiveWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_Quit_Proxy( 
    _DTE * This);


void __RPC_STUB _DTE_Quit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_DisplayMode_Proxy( 
    _DTE * This,
    /* [retval][out] */ vsDisplay *lpDispMode);


void __RPC_STUB _DTE_get_DisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_DisplayMode_Proxy( 
    _DTE * This,
    /* [in] */ vsDisplay DispMode);


void __RPC_STUB _DTE_put_DisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Solution_Proxy( 
    _DTE * This,
    /* [retval][out] */ Solution	**ppSolution);


void __RPC_STUB _DTE_get_Solution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Commands_Proxy( 
    _DTE * This,
    /* [retval][out] */ Commands **ppCommands);


void __RPC_STUB _DTE_get_Commands_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_GetObject_Proxy( 
    _DTE * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB _DTE_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Properties_Proxy( 
    _DTE * This,
    BSTR Category,
    BSTR Page,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB _DTE_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SelectedItems_Proxy( 
    _DTE * This,
    /* [retval][out] */ SelectedItems **ppSelectedItems);


void __RPC_STUB _DTE_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_CommandLineArguments_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_CommandLineArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_OpenFile_Proxy( 
    _DTE * This,
    /* [in] */ BSTR ViewKind,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB _DTE_OpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_IsOpenFile_Proxy( 
    _DTE * This,
    /* [in] */ BSTR ViewKind,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _DTE_get_IsOpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_DTE_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _DTE_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_LocaleID_Proxy( 
    _DTE * This,
    /* [retval][out] */ long *lpReturn);


void __RPC_STUB _DTE_get_LocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_WindowConfigurations_Proxy( 
    _DTE * This,
    /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject);


void __RPC_STUB _DTE_get_WindowConfigurations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Documents_Proxy( 
    _DTE * This,
    /* [retval][out] */ Documents **ppDocuments);


void __RPC_STUB _DTE_get_Documents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveDocument_Proxy( 
    _DTE * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB _DTE_get_ActiveDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_ExecuteCommand_Proxy( 
    _DTE * This,
    /* [in] */ BSTR CommandName,
    /* [defaultvalue][in] */ BSTR CommandArgs);


void __RPC_STUB _DTE_ExecuteCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Globals_Proxy( 
    _DTE * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB _DTE_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_StatusBar_Proxy( 
    _DTE * This,
    /* [retval][out] */ StatusBar **ppStatusBar);


void __RPC_STUB _DTE_get_StatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_FullName_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_UserControl_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT_BOOL *UserControl);


void __RPC_STUB _DTE_get_UserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_UserControl_Proxy( 
    _DTE * This,
    /* [in] */ VARIANT_BOOL HasControl);


void __RPC_STUB _DTE_put_UserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ObjectExtenders_Proxy( 
    _DTE * This,
    /* [retval][out] */ ObjectExtenders **ppObjectExtenders);


void __RPC_STUB _DTE_get_ObjectExtenders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Find_Proxy( 
    _DTE * This,
    /* [retval][out] */ Find **ppFind);


void __RPC_STUB _DTE_get_Find_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Mode_Proxy( 
    _DTE * This,
    /* [retval][out] */ vsIDEMode *pVal);


void __RPC_STUB _DTE_get_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_LaunchWizard_Proxy( 
    _DTE * This,
    /* [in] */ BSTR VSZFile,
    /* [in] */ SAFEARRAY * *ContextParams,
    /* [retval][out] */ wizardResult *pResult);


void __RPC_STUB _DTE_LaunchWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ItemOperations_Proxy( 
    _DTE * This,
    /* [retval][out] */ ItemOperations **ppItemOperations);


void __RPC_STUB _DTE_get_ItemOperations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_UndoContext_Proxy( 
    _DTE * This,
    /* [retval][out] */ UndoContext **ppUndoContext);


void __RPC_STUB _DTE_get_UndoContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Macros_Proxy( 
    _DTE * This,
    /* [retval][out] */ Macros **ppMacros);


void __RPC_STUB _DTE_get_Macros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveSolutionProjects_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT *pProjects);


void __RPC_STUB _DTE_get_ActiveSolutionProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_MacrosIDE_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB _DTE_get_MacrosIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_RegistryRoot_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _DTE_get_RegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][hidden][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Application_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**pVal);


void __RPC_STUB _DTE_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ContextAttributes_Proxy( 
    _DTE * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB _DTE_get_ContextAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SourceControl_Proxy( 
    _DTE * This,
    /* [retval][out] */ SourceControl **ppVal);


void __RPC_STUB _DTE_get_SourceControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SuppressUI_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB _DTE_get_SuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_SuppressUI_Proxy( 
    _DTE * This,
    /* [in] */ VARIANT_BOOL Suppress);


void __RPC_STUB _DTE_put_SuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Debugger_Proxy( 
    _DTE * This,
    /* [retval][out] */ Debugger **ppDebugger);


void __RPC_STUB _DTE_get_Debugger_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_SatelliteDLLPath_Proxy( 
    _DTE * This,
    BSTR Path,
    BSTR Name,
    /* [retval][out] */ BSTR *pFullPath);


void __RPC_STUB _DTE_SatelliteDLLPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Edition_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *ProductEdition);


void __RPC_STUB _DTE_get_Edition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DTE_INTERFACE_DEFINED__ */


#ifndef ___Solution_INTERFACE_DEFINED__
#define ___Solution_INTERFACE_DEFINED__

/* interface _Solution */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__Solution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("26f6cc4b-7a48-4e4d-8af5-9e960232e05f")
    _Solution : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromTemplate( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR ProjectName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL fDirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ Project *proj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TemplatePath( 
            /* [in] */ BSTR ProjectType,
            /* [retval][out] */ BSTR *lpbstrPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL fDirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **ppAddIns) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionBuild( 
            /* [retval][out] */ SolutionBuild **ppSolutionBuild) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Create( 
            BSTR Destination,
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Projects( 
            /* [retval][out] */ Projects **ppProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindProjectItem( 
            BSTR FileName,
            /* [retval][out] */ ProjectItem **ppProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItemsTemplatePath( 
            BSTR ProjectKind,
            /* [retval][out] */ BSTR *pFullPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SolutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Solution * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Solution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Solution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Solution * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Solution * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Solution * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Solution * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            _Solution * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            _Solution * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            _Solution * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Solution * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _Solution * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            _Solution * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            _Solution * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromTemplate )( 
            _Solution * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR ProjectName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            _Solution * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            _Solution * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Solution * This,
            /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            _Solution * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            _Solution * This,
            /* [in] */ VARIANT_BOOL fDirty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            _Solution * This,
            /* [in] */ Project *proj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TemplatePath )( 
            _Solution * This,
            /* [in] */ BSTR ProjectType,
            /* [retval][out] */ BSTR *lpbstrPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _Solution * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            _Solution * This,
            /* [in] */ VARIANT_BOOL fDirty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            _Solution * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Solution * This,
            /* [retval][out] */ AddIns **ppAddIns);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            _Solution * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            _Solution * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            _Solution * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionBuild )( 
            _Solution * This,
            /* [retval][out] */ SolutionBuild **ppSolutionBuild);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            _Solution * This,
            BSTR Destination,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Projects )( 
            _Solution * This,
            /* [retval][out] */ Projects **ppProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindProjectItem )( 
            _Solution * This,
            BSTR FileName,
            /* [retval][out] */ ProjectItem **ppProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ProjectItemsTemplatePath )( 
            _Solution * This,
            BSTR ProjectKind,
            /* [retval][out] */ BSTR *pFullPath);
        
        END_INTERFACE
    } _SolutionVtbl;

    interface _Solution
    {
        CONST_VTBL struct _SolutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Solution_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _Solution_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _Solution_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _Solution_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _Solution_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _Solution_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _Solution_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _Solution_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define _Solution__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define _Solution_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define _Solution_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define _Solution_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define _Solution_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define _Solution_SaveAs(This,FileName)	\
    (This)->lpVtbl -> SaveAs(This,FileName)

#define _Solution_AddFromTemplate(This,FileName,Destination,ProjectName,Exclusive,IppptReturn)	\
    (This)->lpVtbl -> AddFromTemplate(This,FileName,Destination,ProjectName,Exclusive,IppptReturn)

#define _Solution_AddFromFile(This,FileName,Exclusive,IppptReturn)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,Exclusive,IppptReturn)

#define _Solution_Open(This,FileName)	\
    (This)->lpVtbl -> Open(This,FileName)

#define _Solution_Close(This,SaveFirst)	\
    (This)->lpVtbl -> Close(This,SaveFirst)

#define _Solution_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define _Solution_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define _Solution_put_IsDirty(This,fDirty)	\
    (This)->lpVtbl -> put_IsDirty(This,fDirty)

#define _Solution_Remove(This,proj)	\
    (This)->lpVtbl -> Remove(This,proj)

#define _Solution_get_TemplatePath(This,ProjectType,lpbstrPath)	\
    (This)->lpVtbl -> get_TemplatePath(This,ProjectType,lpbstrPath)

#define _Solution_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define _Solution_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define _Solution_put_Saved(This,fDirty)	\
    (This)->lpVtbl -> put_Saved(This,fDirty)

#define _Solution_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define _Solution_get_AddIns(This,ppAddIns)	\
    (This)->lpVtbl -> get_AddIns(This,ppAddIns)

#define _Solution_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define _Solution_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define _Solution_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define _Solution_get_IsOpen(This,pVal)	\
    (This)->lpVtbl -> get_IsOpen(This,pVal)

#define _Solution_get_SolutionBuild(This,ppSolutionBuild)	\
    (This)->lpVtbl -> get_SolutionBuild(This,ppSolutionBuild)

#define _Solution_Create(This,Destination,Name)	\
    (This)->lpVtbl -> Create(This,Destination,Name)

#define _Solution_get_Projects(This,ppProjects)	\
    (This)->lpVtbl -> get_Projects(This,ppProjects)

#define _Solution_FindProjectItem(This,FileName,ppProjectItem)	\
    (This)->lpVtbl -> FindProjectItem(This,FileName,ppProjectItem)

#define _Solution_ProjectItemsTemplatePath(This,ProjectKind,pFullPath)	\
    (This)->lpVtbl -> ProjectItemsTemplatePath(This,ProjectKind,pFullPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Item_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Project **lppcReturn);


void __RPC_STUB _Solution_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE _Solution__NewEnum_Proxy( 
    _Solution * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB _Solution__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_DTE_Proxy( 
    _Solution * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _Solution_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Parent_Proxy( 
    _Solution * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _Solution_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Count_Proxy( 
    _Solution * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB _Solution_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_FileName_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _Solution_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_SaveAs_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Solution_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_AddFromTemplate_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName,
    /* [in] */ BSTR Destination,
    /* [in] */ BSTR ProjectName,
    /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
    /* [retval][out] */ Project **IppptReturn);


void __RPC_STUB _Solution_AddFromTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_AddFromFile_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
    /* [retval][out] */ Project **IppptReturn);


void __RPC_STUB _Solution_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Open_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Solution_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Close_Proxy( 
    _Solution * This,
    /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst);


void __RPC_STUB _Solution_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Properties_Proxy( 
    _Solution * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB _Solution_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_IsDirty_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _Solution_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propput][id] */ HRESULT STDMETHODCALLTYPE _Solution_put_IsDirty_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT_BOOL fDirty);


void __RPC_STUB _Solution_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Remove_Proxy( 
    _Solution * This,
    /* [in] */ Project *proj);


void __RPC_STUB _Solution_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_TemplatePath_Proxy( 
    _Solution * This,
    /* [in] */ BSTR ProjectType,
    /* [retval][out] */ BSTR *lpbstrPath);


void __RPC_STUB _Solution_get_TemplatePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_FullName_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _Solution_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Saved_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _Solution_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Solution_put_Saved_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT_BOOL fDirty);


void __RPC_STUB _Solution_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Globals_Proxy( 
    _Solution * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB _Solution_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_AddIns_Proxy( 
    _Solution * This,
    /* [retval][out] */ AddIns **ppAddIns);


void __RPC_STUB _Solution_get_AddIns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Extender_Proxy( 
    _Solution * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB _Solution_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_ExtenderNames_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB _Solution_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_ExtenderCATID_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB _Solution_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_IsOpen_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB _Solution_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_SolutionBuild_Proxy( 
    _Solution * This,
    /* [retval][out] */ SolutionBuild **ppSolutionBuild);


void __RPC_STUB _Solution_get_SolutionBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Create_Proxy( 
    _Solution * This,
    BSTR Destination,
    BSTR Name);


void __RPC_STUB _Solution_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Projects_Proxy( 
    _Solution * This,
    /* [retval][out] */ Projects **ppProjects);


void __RPC_STUB _Solution_get_Projects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_FindProjectItem_Proxy( 
    _Solution * This,
    BSTR FileName,
    /* [retval][out] */ ProjectItem **ppProjectItem);


void __RPC_STUB _Solution_FindProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_ProjectItemsTemplatePath_Proxy( 
    _Solution * This,
    BSTR ProjectKind,
    /* [retval][out] */ BSTR *pFullPath);


void __RPC_STUB _Solution_ProjectItemsTemplatePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___Solution_INTERFACE_DEFINED__ */


#ifndef __Projects_INTERFACE_DEFINED__
#define __Projects_INTERFACE_DEFINED__

/* interface Projects */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Projects;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e3ec0add-31b3-461f-8303-8a5e6931257a")
    Projects : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Projects * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Projects * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Projects * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Projects * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Projects * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Projects * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Projects * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Projects * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Projects * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Projects * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Projects * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Projects * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Projects * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Projects * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        END_INTERFACE
    } ProjectsVtbl;

    interface Projects
    {
        CONST_VTBL struct ProjectsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Projects_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Projects_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Projects_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Projects_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Projects_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Projects_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Projects_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Projects_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define Projects_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Projects_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Projects__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Projects_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Projects_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define Projects_get_Kind(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Projects_Item_Proxy( 
    Projects * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Project **lppcReturn);


void __RPC_STUB Projects_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Parent_Proxy( 
    Projects * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Projects_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Count_Proxy( 
    Projects * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Projects_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Projects__NewEnum_Proxy( 
    Projects * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Projects__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_DTE_Proxy( 
    Projects * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Projects_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Properties_Proxy( 
    Projects * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB Projects_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Kind_Proxy( 
    Projects * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Projects_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Projects_INTERFACE_DEFINED__ */


#ifndef __Project_INTERFACE_DEFINED__
#define __Project_INTERFACE_DEFINED__

/* interface Project */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Project;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("866311e6-c887-4143-9833-645f5b93f6f1")
    Project : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL Dirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Projects **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR NewFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItems( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UniqueName( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ProjectModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL SavedFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationManager( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue] */ BSTR FileName = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentProjectItem( 
            /* [retval][out] */ ProjectItem **ppParentProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeModel( 
            /* [retval][out] */ CodeModel **ppCodeModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Project * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Project * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Project * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Project * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Project * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Project * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Project * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Project * This,
            /* [in] */ BSTR bstrName);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            Project * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            Project * This,
            /* [in] */ VARIANT_BOOL Dirty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Project * This,
            /* [retval][out] */ Projects **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            Project * This,
            /* [in] */ BSTR NewFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Project * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItems )( 
            Project * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Project * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UniqueName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Project * This,
            /* [retval][out] */ IDispatch **ProjectModel);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Project * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Project * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Project * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            Project * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            Project * This,
            /* [in] */ VARIANT_BOOL SavedFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationManager )( 
            Project * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            Project * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Project * This,
            /* [defaultvalue] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentProjectItem )( 
            Project * This,
            /* [retval][out] */ ProjectItem **ppParentProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeModel )( 
            Project * This,
            /* [retval][out] */ CodeModel **ppCodeModel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Project * This);
        
        END_INTERFACE
    } ProjectVtbl;

    interface Project
    {
        CONST_VTBL struct ProjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Project_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Project_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Project_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Project_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Project_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Project_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Project_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Project_get_Name(This,lpbstrName)	\
    (This)->lpVtbl -> get_Name(This,lpbstrName)

#define Project_put_Name(This,bstrName)	\
    (This)->lpVtbl -> put_Name(This,bstrName)

#define Project_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define Project_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define Project_put_IsDirty(This,Dirty)	\
    (This)->lpVtbl -> put_IsDirty(This,Dirty)

#define Project_get_Collection(This,lppaReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppaReturn)

#define Project_SaveAs(This,NewFileName)	\
    (This)->lpVtbl -> SaveAs(This,NewFileName)

#define Project_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Project_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define Project_get_ProjectItems(This,lppcReturn)	\
    (This)->lpVtbl -> get_ProjectItems(This,lppcReturn)

#define Project_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define Project_get_UniqueName(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_UniqueName(This,lpbstrFileName)

#define Project_get_Object(This,ProjectModel)	\
    (This)->lpVtbl -> get_Object(This,ProjectModel)

#define Project_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Project_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Project_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Project_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define Project_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define Project_put_Saved(This,SavedFlag)	\
    (This)->lpVtbl -> put_Saved(This,SavedFlag)

#define Project_get_ConfigurationManager(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_ConfigurationManager(This,ppConfigurationManager)

#define Project_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define Project_Save(This,FileName)	\
    (This)->lpVtbl -> Save(This,FileName)

#define Project_get_ParentProjectItem(This,ppParentProjectItem)	\
    (This)->lpVtbl -> get_ParentProjectItem(This,ppParentProjectItem)

#define Project_get_CodeModel(This,ppCodeModel)	\
    (This)->lpVtbl -> get_CodeModel(This,ppCodeModel)

#define Project_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Name_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrName);


void __RPC_STUB Project_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_Name_Proxy( 
    Project * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB Project_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_FileName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Project_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_IsDirty_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB Project_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_IsDirty_Proxy( 
    Project * This,
    /* [in] */ VARIANT_BOOL Dirty);


void __RPC_STUB Project_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Collection_Proxy( 
    Project * This,
    /* [retval][out] */ Projects **lppaReturn);


void __RPC_STUB Project_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_SaveAs_Proxy( 
    Project * This,
    /* [in] */ BSTR NewFileName);


void __RPC_STUB Project_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_DTE_Proxy( 
    Project * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Project_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Kind_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB Project_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ProjectItems_Proxy( 
    Project * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB Project_get_ProjectItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Properties_Proxy( 
    Project * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB Project_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_UniqueName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB Project_get_UniqueName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Object_Proxy( 
    Project * This,
    /* [retval][out] */ IDispatch **ProjectModel);


void __RPC_STUB Project_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Extender_Proxy( 
    Project * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Project_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ExtenderNames_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Project_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ExtenderCATID_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Project_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_FullName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Project_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Saved_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB Project_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_Saved_Proxy( 
    Project * This,
    /* [in] */ VARIANT_BOOL SavedFlag);


void __RPC_STUB Project_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ConfigurationManager_Proxy( 
    Project * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB Project_get_ConfigurationManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Globals_Proxy( 
    Project * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB Project_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_Save_Proxy( 
    Project * This,
    /* [defaultvalue] */ BSTR FileName);


void __RPC_STUB Project_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ParentProjectItem_Proxy( 
    Project * This,
    /* [retval][out] */ ProjectItem **ppParentProjectItem);


void __RPC_STUB Project_get_ParentProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_CodeModel_Proxy( 
    Project * This,
    /* [retval][out] */ CodeModel **ppCodeModel);


void __RPC_STUB Project_get_CodeModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_Delete_Proxy( 
    Project * This);


void __RPC_STUB Project_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Project_INTERFACE_DEFINED__ */


#ifndef __ProjectItems_INTERFACE_DEFINED__
#define __ProjectItems_INTERFACE_DEFINED__

/* interface ProjectItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ProjectItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8e2f1269-185e-43c7-8899-950ad2769ccf")
    ProjectItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromTemplate( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromDirectory( 
            /* [in] */ BSTR Directory,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainingProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFolder( 
            BSTR Name,
            /* [defaultvalue] */ BSTR Kind,
            /* [retval][out] */ ProjectItem **pProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFileCopy( 
            BSTR FilePath,
            /* [retval][out] */ ProjectItem **pProjectItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProjectItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProjectItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProjectItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProjectItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProjectItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProjectItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProjectItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ProjectItems * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProjectItems * This,
            /* [retval][out] */ IDispatch **lppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ProjectItems * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ProjectItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ProjectItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            ProjectItems * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            ProjectItems * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromTemplate )( 
            ProjectItems * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromDirectory )( 
            ProjectItems * This,
            /* [in] */ BSTR Directory,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingProject )( 
            ProjectItems * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFolder )( 
            ProjectItems * This,
            BSTR Name,
            /* [defaultvalue] */ BSTR Kind,
            /* [retval][out] */ ProjectItem **pProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFileCopy )( 
            ProjectItems * This,
            BSTR FilePath,
            /* [retval][out] */ ProjectItem **pProjectItem);
        
        END_INTERFACE
    } ProjectItemsVtbl;

    interface ProjectItems
    {
        CONST_VTBL struct ProjectItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProjectItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ProjectItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ProjectItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ProjectItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ProjectItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ProjectItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ProjectItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ProjectItems_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define ProjectItems_get_Parent(This,lppptReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppptReturn)

#define ProjectItems_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define ProjectItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ProjectItems_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ProjectItems_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define ProjectItems_AddFromFile(This,FileName,lppcReturn)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,lppcReturn)

#define ProjectItems_AddFromTemplate(This,FileName,Name,lppcReturn)	\
    (This)->lpVtbl -> AddFromTemplate(This,FileName,Name,lppcReturn)

#define ProjectItems_AddFromDirectory(This,Directory,lppcReturn)	\
    (This)->lpVtbl -> AddFromDirectory(This,Directory,lppcReturn)

#define ProjectItems_get_ContainingProject(This,ppProject)	\
    (This)->lpVtbl -> get_ContainingProject(This,ppProject)

#define ProjectItems_AddFolder(This,Name,Kind,pProjectItem)	\
    (This)->lpVtbl -> AddFolder(This,Name,Kind,pProjectItem)

#define ProjectItems_AddFromFileCopy(This,FilePath,pProjectItem)	\
    (This)->lpVtbl -> AddFromFileCopy(This,FilePath,pProjectItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_Item_Proxy( 
    ProjectItems * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Parent_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ IDispatch **lppptReturn);


void __RPC_STUB ProjectItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Count_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB ProjectItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ProjectItems__NewEnum_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ProjectItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_DTE_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ProjectItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Kind_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB ProjectItems_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromFile_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromTemplate_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR FileName,
    /* [in] */ BSTR Name,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromDirectory_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR Directory,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_ContainingProject_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItems_get_ContainingProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFolder_Proxy( 
    ProjectItems * This,
    BSTR Name,
    /* [defaultvalue] */ BSTR Kind,
    /* [retval][out] */ ProjectItem **pProjectItem);


void __RPC_STUB ProjectItems_AddFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromFileCopy_Proxy( 
    ProjectItems * This,
    BSTR FilePath,
    /* [retval][out] */ ProjectItem **pProjectItem);


void __RPC_STUB ProjectItems_AddFromFileCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ProjectItems_INTERFACE_DEFINED__ */


#ifndef __ProjectItem_INTERFACE_DEFINED__
#define __ProjectItem_INTERFACE_DEFINED__

/* interface ProjectItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ProjectItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0b48100a-473e-433c-ab8f-66b9739ab620")
    ProjectItem : public IDispatch
    {
    public:
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL DirtyFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileNames( 
            /* [in] */ short Index,
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR NewFileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCount( 
            /* [retval][out] */ short *lpsReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItems( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **lppfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExpandView( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ProjectItemModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL SavedFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationManager( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCodeModel( 
            /* [retval][out] */ FileCodeModel **ppFileCodeModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue] */ BSTR FileName = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainingProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProjectItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProjectItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProjectItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProjectItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProjectItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProjectItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProjectItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            ProjectItem * This,
            /* [in] */ VARIANT_BOOL DirtyFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileNames )( 
            ProjectItem * This,
            /* [in] */ short Index,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            ProjectItem * This,
            /* [in] */ BSTR NewFileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCount )( 
            ProjectItem * This,
            /* [retval][out] */ short *lpsReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *pbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ProjectItem * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ProjectItem * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            ProjectItem * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ProjectItem * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItems )( 
            ProjectItem * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            ProjectItem * This,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            ProjectItem * This,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **lppfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ProjectItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExpandView )( 
            ProjectItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            ProjectItem * This,
            /* [retval][out] */ IDispatch **ProjectItemModel);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            ProjectItem * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            ProjectItem * This,
            /* [in] */ VARIANT_BOOL SavedFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationManager )( 
            ProjectItem * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCodeModel )( 
            ProjectItem * This,
            /* [retval][out] */ FileCodeModel **ppFileCodeModel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ProjectItem * This,
            /* [defaultvalue] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            ProjectItem * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubProject )( 
            ProjectItem * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingProject )( 
            ProjectItem * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ProjectItem * This);
        
        END_INTERFACE
    } ProjectItemVtbl;

    interface ProjectItem
    {
        CONST_VTBL struct ProjectItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProjectItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ProjectItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ProjectItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ProjectItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ProjectItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ProjectItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ProjectItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ProjectItem_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define ProjectItem_put_IsDirty(This,DirtyFlag)	\
    (This)->lpVtbl -> put_IsDirty(This,DirtyFlag)

#define ProjectItem_get_FileNames(This,Index,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileNames(This,Index,lpbstrReturn)

#define ProjectItem_SaveAs(This,NewFileName,lpfReturn)	\
    (This)->lpVtbl -> SaveAs(This,NewFileName,lpfReturn)

#define ProjectItem_get_FileCount(This,lpsReturn)	\
    (This)->lpVtbl -> get_FileCount(This,lpsReturn)

#define ProjectItem_get_Name(This,pbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,pbstrReturn)

#define ProjectItem_put_Name(This,bstrName)	\
    (This)->lpVtbl -> put_Name(This,bstrName)

#define ProjectItem_get_Collection(This,lppcReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppcReturn)

#define ProjectItem_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define ProjectItem_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ProjectItem_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define ProjectItem_get_ProjectItems(This,lppcReturn)	\
    (This)->lpVtbl -> get_ProjectItems(This,lppcReturn)

#define ProjectItem_get_IsOpen(This,ViewKind,lpfReturn)	\
    (This)->lpVtbl -> get_IsOpen(This,ViewKind,lpfReturn)

#define ProjectItem_Open(This,ViewKind,lppfReturn)	\
    (This)->lpVtbl -> Open(This,ViewKind,lppfReturn)

#define ProjectItem_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#define ProjectItem_ExpandView(This)	\
    (This)->lpVtbl -> ExpandView(This)

#define ProjectItem_get_Object(This,ProjectItemModel)	\
    (This)->lpVtbl -> get_Object(This,ProjectItemModel)

#define ProjectItem_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define ProjectItem_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define ProjectItem_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define ProjectItem_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define ProjectItem_put_Saved(This,SavedFlag)	\
    (This)->lpVtbl -> put_Saved(This,SavedFlag)

#define ProjectItem_get_ConfigurationManager(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_ConfigurationManager(This,ppConfigurationManager)

#define ProjectItem_get_FileCodeModel(This,ppFileCodeModel)	\
    (This)->lpVtbl -> get_FileCodeModel(This,ppFileCodeModel)

#define ProjectItem_Save(This,FileName)	\
    (This)->lpVtbl -> Save(This,FileName)

#define ProjectItem_get_Document(This,ppDocument)	\
    (This)->lpVtbl -> get_Document(This,ppDocument)

#define ProjectItem_get_SubProject(This,ppProject)	\
    (This)->lpVtbl -> get_SubProject(This,ppProject)

#define ProjectItem_get_ContainingProject(This,ppProject)	\
    (This)->lpVtbl -> get_ContainingProject(This,ppProject)

#define ProjectItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_IsDirty_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_IsDirty_Proxy( 
    ProjectItem * This,
    /* [in] */ VARIANT_BOOL DirtyFlag);


void __RPC_STUB ProjectItem_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileNames_Proxy( 
    ProjectItem * This,
    /* [in] */ short Index,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB ProjectItem_get_FileNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_SaveAs_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR NewFileName,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileCount_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ short *lpsReturn);


void __RPC_STUB ProjectItem_get_FileCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Name_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *pbstrReturn);


void __RPC_STUB ProjectItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_Name_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB ProjectItem_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Collection_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB ProjectItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Properties_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB ProjectItem_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_DTE_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ProjectItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Kind_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB ProjectItem_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ProjectItems_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB ProjectItem_get_ProjectItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_IsOpen_Proxy( 
    ProjectItem * This,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Open_Proxy( 
    ProjectItem * This,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **lppfReturn);


void __RPC_STUB ProjectItem_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Remove_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_ExpandView_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_ExpandView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Object_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ IDispatch **ProjectItemModel);


void __RPC_STUB ProjectItem_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Extender_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB ProjectItem_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ExtenderNames_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB ProjectItem_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ExtenderCATID_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB ProjectItem_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Saved_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_Saved_Proxy( 
    ProjectItem * This,
    /* [in] */ VARIANT_BOOL SavedFlag);


void __RPC_STUB ProjectItem_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ConfigurationManager_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB ProjectItem_get_ConfigurationManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileCodeModel_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ FileCodeModel **ppFileCodeModel);


void __RPC_STUB ProjectItem_get_FileCodeModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Save_Proxy( 
    ProjectItem * This,
    /* [defaultvalue] */ BSTR FileName);


void __RPC_STUB ProjectItem_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Document_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB ProjectItem_get_Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_SubProject_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItem_get_SubProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ContainingProject_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItem_get_ContainingProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Delete_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ProjectItem_INTERFACE_DEFINED__ */


#ifndef __Commands_INTERFACE_DEFINED__
#define __Commands_INTERFACE_DEFINED__

/* interface Commands */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Commands;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e6b96cac-b8c7-40ae-b705-5c81878c4a9e")
    Commands : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [in] */ VARIANT *Control) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Raise( 
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [out][in] */ VARIANT *CustomIn,
            /* [out][in] */ VARIANT *CustomOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandInfo( 
            /* [in] */ IDispatch *CommandBarControl,
            /* [out] */ BSTR *Guid,
            /* [out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ Command **lppcReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamedCommand( 
            /* [in] */ AddIn *AddInInstance,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR ButtonText,
            /* [in] */ BSTR Tooltip,
            /* [in] */ VARIANT_BOOL MSOButton,
            /* [defaultvalue][in] */ long Bitmap,
            /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
            /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
            /* [retval][out] */ Command **pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCommandBar( 
            /* [in] */ BSTR Name,
            /* [in] */ vsCommandBarType Type,
            /* [defaultvalue][in] */ IDispatch *CommandBarParent,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveCommandBar( 
            /* [in] */ IDispatch *CommandBar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Commands * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Commands * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Commands * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Commands * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Commands * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Commands * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Commands * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Commands * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Commands * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Commands * This,
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [in] */ VARIANT *Control);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Raise )( 
            Commands * This,
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [out][in] */ VARIANT *CustomIn,
            /* [out][in] */ VARIANT *CustomOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CommandInfo )( 
            Commands * This,
            /* [in] */ IDispatch *CommandBarControl,
            /* [out] */ BSTR *Guid,
            /* [out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Commands * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Commands * This,
            /* [in] */ VARIANT Index,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ Command **lppcReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Commands * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamedCommand )( 
            Commands * This,
            /* [in] */ AddIn *AddInInstance,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR ButtonText,
            /* [in] */ BSTR Tooltip,
            /* [in] */ VARIANT_BOOL MSOButton,
            /* [defaultvalue][in] */ long Bitmap,
            /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
            /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
            /* [retval][out] */ Command **pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCommandBar )( 
            Commands * This,
            /* [in] */ BSTR Name,
            /* [in] */ vsCommandBarType Type,
            /* [defaultvalue][in] */ IDispatch *CommandBarParent,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCommandBar )( 
            Commands * This,
            /* [in] */ IDispatch *CommandBar);
        
        END_INTERFACE
    } CommandsVtbl;

    interface Commands
    {
        CONST_VTBL struct CommandsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Commands_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Commands_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Commands_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Commands_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Commands_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Commands_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Commands_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Commands_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Commands_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Commands_Add(This,Guid,ID,Control)	\
    (This)->lpVtbl -> Add(This,Guid,ID,Control)

#define Commands_Raise(This,Guid,ID,CustomIn,CustomOut)	\
    (This)->lpVtbl -> Raise(This,Guid,ID,CustomIn,CustomOut)

#define Commands_CommandInfo(This,CommandBarControl,Guid,ID)	\
    (This)->lpVtbl -> CommandInfo(This,CommandBarControl,Guid,ID)

#define Commands_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Commands_Item(This,Index,ID,lppcReturn)	\
    (This)->lpVtbl -> Item(This,Index,ID,lppcReturn)

#define Commands__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Commands_AddNamedCommand(This,AddInInstance,Name,ButtonText,Tooltip,MSOButton,Bitmap,ContextUIGUIDs,vsCommandDisabledFlagsValue,pVal)	\
    (This)->lpVtbl -> AddNamedCommand(This,AddInInstance,Name,ButtonText,Tooltip,MSOButton,Bitmap,ContextUIGUIDs,vsCommandDisabledFlagsValue,pVal)

#define Commands_AddCommandBar(This,Name,Type,CommandBarParent,Position,pVal)	\
    (This)->lpVtbl -> AddCommandBar(This,Name,Type,CommandBarParent,Position,pVal)

#define Commands_RemoveCommandBar(This,CommandBar)	\
    (This)->lpVtbl -> RemoveCommandBar(This,CommandBar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_DTE_Proxy( 
    Commands * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Commands_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_Parent_Proxy( 
    Commands * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Commands_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Add_Proxy( 
    Commands * This,
    /* [in] */ BSTR Guid,
    /* [in] */ long ID,
    /* [in] */ VARIANT *Control);


void __RPC_STUB Commands_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Raise_Proxy( 
    Commands * This,
    /* [in] */ BSTR Guid,
    /* [in] */ long ID,
    /* [out][in] */ VARIANT *CustomIn,
    /* [out][in] */ VARIANT *CustomOut);


void __RPC_STUB Commands_Raise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_CommandInfo_Proxy( 
    Commands * This,
    /* [in] */ IDispatch *CommandBarControl,
    /* [out] */ BSTR *Guid,
    /* [out] */ long *ID);


void __RPC_STUB Commands_CommandInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_Count_Proxy( 
    Commands * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Commands_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Item_Proxy( 
    Commands * This,
    /* [in] */ VARIANT Index,
    /* [defaultvalue][in] */ long ID,
    /* [retval][out] */ Command **lppcReturn);


void __RPC_STUB Commands_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Commands__NewEnum_Proxy( 
    Commands * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Commands__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_AddNamedCommand_Proxy( 
    Commands * This,
    /* [in] */ AddIn *AddInInstance,
    /* [in] */ BSTR Name,
    /* [in] */ BSTR ButtonText,
    /* [in] */ BSTR Tooltip,
    /* [in] */ VARIANT_BOOL MSOButton,
    /* [defaultvalue][in] */ long Bitmap,
    /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
    /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
    /* [retval][out] */ Command **pVal);


void __RPC_STUB Commands_AddNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_AddCommandBar_Proxy( 
    Commands * This,
    /* [in] */ BSTR Name,
    /* [in] */ vsCommandBarType Type,
    /* [defaultvalue][in] */ IDispatch *CommandBarParent,
    /* [defaultvalue][in] */ long Position,
    /* [retval][out] */ IDispatch **pVal);


void __RPC_STUB Commands_AddCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_RemoveCommandBar_Proxy( 
    Commands * This,
    /* [in] */ IDispatch *CommandBar);


void __RPC_STUB Commands_RemoveCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Commands_INTERFACE_DEFINED__ */


#ifndef __TextBuffer_INTERFACE_DEFINED__
#define __TextBuffer_INTERFACE_DEFINED__

/* interface TextBuffer */
/* [hidden][helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f47dc7e7-84b6-474f-bb91-631640aa0560")
    TextBuffer : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **retval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromString( 
            /* [in] */ BSTR String,
            /* [defaultvalue][in] */ long StartLine = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ long StartLine = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lines( 
            /* [in] */ long StartLine,
            /* [in] */ long Count,
            /* [retval][out] */ BSTR *String) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CountOfLines( 
            /* [retval][out] */ long *CountOfLines) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteLines( 
            /* [in] */ long StartLine,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR Target,
            /* [out][in] */ long *StartLine,
            /* [out][in] */ long *StartColumn,
            /* [out][in] */ long *EndLine,
            /* [out][in] */ long *EndColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
            /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
            /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextBuffer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextBuffer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextBuffer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextBuffer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextBuffer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextBuffer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextBuffer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextBuffer * This,
            /* [retval][out] */ Window **retval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextBuffer * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromString )( 
            TextBuffer * This,
            /* [in] */ BSTR String,
            /* [defaultvalue][in] */ long StartLine);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            TextBuffer * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ long StartLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lines )( 
            TextBuffer * This,
            /* [in] */ long StartLine,
            /* [in] */ long Count,
            /* [retval][out] */ BSTR *String);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CountOfLines )( 
            TextBuffer * This,
            /* [retval][out] */ long *CountOfLines);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteLines )( 
            TextBuffer * This,
            /* [in] */ long StartLine,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            TextBuffer * This,
            /* [in] */ BSTR Target,
            /* [out][in] */ long *StartLine,
            /* [out][in] */ long *StartColumn,
            /* [out][in] */ long *EndLine,
            /* [out][in] */ long *EndColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
            /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
            /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        END_INTERFACE
    } TextBufferVtbl;

    interface TextBuffer
    {
        CONST_VTBL struct TextBufferVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextBuffer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextBuffer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextBuffer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextBuffer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextBuffer_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define TextBuffer_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define TextBuffer_AddFromString(This,String,StartLine)	\
    (This)->lpVtbl -> AddFromString(This,String,StartLine)

#define TextBuffer_AddFromFile(This,FileName,StartLine)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,StartLine)

#define TextBuffer_get_Lines(This,StartLine,Count,String)	\
    (This)->lpVtbl -> get_Lines(This,StartLine,Count,String)

#define TextBuffer_get_CountOfLines(This,CountOfLines)	\
    (This)->lpVtbl -> get_CountOfLines(This,CountOfLines)

#define TextBuffer_DeleteLines(This,StartLine,Count)	\
    (This)->lpVtbl -> DeleteLines(This,StartLine,Count)

#define TextBuffer_Find(This,Target,StartLine,StartColumn,EndLine,EndColumn,WholeWord,MatchCase,PatternSearch,pfFound)	\
    (This)->lpVtbl -> Find(This,Target,StartLine,StartColumn,EndLine,EndColumn,WholeWord,MatchCase,PatternSearch,pfFound)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_Parent_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ Window **retval);


void __RPC_STUB TextBuffer_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_DTE_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB TextBuffer_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_AddFromString_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR String,
    /* [defaultvalue][in] */ long StartLine);


void __RPC_STUB TextBuffer_AddFromString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_AddFromFile_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ long StartLine);


void __RPC_STUB TextBuffer_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_Lines_Proxy( 
    TextBuffer * This,
    /* [in] */ long StartLine,
    /* [in] */ long Count,
    /* [retval][out] */ BSTR *String);


void __RPC_STUB TextBuffer_get_Lines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_CountOfLines_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ long *CountOfLines);


void __RPC_STUB TextBuffer_get_CountOfLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_DeleteLines_Proxy( 
    TextBuffer * This,
    /* [in] */ long StartLine,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextBuffer_DeleteLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_Find_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR Target,
    /* [out][in] */ long *StartLine,
    /* [out][in] */ long *StartColumn,
    /* [out][in] */ long *EndLine,
    /* [out][in] */ long *EndColumn,
    /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
    /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
    /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextBuffer_Find_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextBuffer_INTERFACE_DEFINED__ */


#ifndef __AddIns_INTERFACE_DEFINED__
#define __AddIns_INTERFACE_DEFINED__

/* interface AddIns */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_AddIns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50590801-d13e-4404-80c2-5ca30a4d0ee8")
    AddIns : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ AddIn **lppaddin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            BSTR ProgID,
            BSTR Description,
            BSTR Name,
            VARIANT_BOOL Connected,
            /* [retval][out] */ AddIn **__MIDL_0011) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AddIns * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ AddIn **lppaddin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIns * This,
            /* [retval][out] */ IDispatch **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AddIns * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            AddIns * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            AddIns * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            AddIns * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AddIns * This,
            BSTR ProgID,
            BSTR Description,
            BSTR Name,
            VARIANT_BOOL Connected,
            /* [retval][out] */ AddIn **__MIDL_0011);
        
        END_INTERFACE
    } AddInsVtbl;

    interface AddIns
    {
        CONST_VTBL struct AddInsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIns_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AddIns_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AddIns_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AddIns_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AddIns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AddIns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AddIns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define AddIns_Item(This,Index,lppaddin)	\
    (This)->lpVtbl -> Item(This,Index,lppaddin)

#define AddIns_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define AddIns_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define AddIns__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define AddIns_Update(This)	\
    (This)->lpVtbl -> Update(This)

#define AddIns_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define AddIns_Add(This,ProgID,Description,Name,Connected,__MIDL_0011)	\
    (This)->lpVtbl -> Add(This,ProgID,Description,Name,Connected,__MIDL_0011)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Item_Proxy( 
    AddIns * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ AddIn **lppaddin);


void __RPC_STUB AddIns_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIns_get_Parent_Proxy( 
    AddIns * This,
    /* [retval][out] */ IDispatch **lppaReturn);


void __RPC_STUB AddIns_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIns_get_Count_Proxy( 
    AddIns * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB AddIns_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE AddIns__NewEnum_Proxy( 
    AddIns * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB AddIns__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Update_Proxy( 
    AddIns * This);


void __RPC_STUB AddIns_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIns_get_DTE_Proxy( 
    AddIns * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB AddIns_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Add_Proxy( 
    AddIns * This,
    BSTR ProgID,
    BSTR Description,
    BSTR Name,
    VARIANT_BOOL Connected,
    /* [retval][out] */ AddIn **__MIDL_0011);


void __RPC_STUB AddIns_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __AddIns_INTERFACE_DEFINED__ */


#ifndef __AddIn_INTERFACE_DEFINED__
#define __AddIn_INTERFACE_DEFINED__

/* interface AddIn */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_AddIn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53a87fa1-ce93-48bf-958b-c6da793c5028")
    AddIn : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ AddIns **lppaddins) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProgID( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Guid( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Connected( 
            /* [retval][out] */ VARIANT_BOOL *lpfConnect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Connected( 
            /* [in] */ VARIANT_BOOL fConnect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **lppdisp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Object( 
            /* [in] */ IDispatch *_lpdispObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
        virtual /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_SatelliteDllPath( 
            /* [retval][out] */ BSTR *pbstrPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            AddIn * This,
            /* [in] */ BSTR bstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            AddIn * This,
            /* [retval][out] */ AddIns **lppaddins);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgID )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Guid )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Connected )( 
            AddIn * This,
            /* [retval][out] */ VARIANT_BOOL *lpfConnect);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Connected )( 
            AddIn * This,
            /* [in] */ VARIANT_BOOL fConnect);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            AddIn * This,
            /* [retval][out] */ IDispatch **lppdisp);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Object )( 
            AddIn * This,
            /* [in] */ IDispatch *_lpdispObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            AddIn * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            AddIn * This);
        
        /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *get_SatelliteDllPath )( 
            AddIn * This,
            /* [retval][out] */ BSTR *pbstrPath);
        
        END_INTERFACE
    } AddInVtbl;

    interface AddIn
    {
        CONST_VTBL struct AddInVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIn_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AddIn_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AddIn_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AddIn_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AddIn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AddIn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AddIn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define AddIn_get_Description(This,lpbstr)	\
    (This)->lpVtbl -> get_Description(This,lpbstr)

#define AddIn_put_Description(This,bstr)	\
    (This)->lpVtbl -> put_Description(This,bstr)

#define AddIn_get_Collection(This,lppaddins)	\
    (This)->lpVtbl -> get_Collection(This,lppaddins)

#define AddIn_get_ProgID(This,lpbstr)	\
    (This)->lpVtbl -> get_ProgID(This,lpbstr)

#define AddIn_get_Guid(This,lpbstr)	\
    (This)->lpVtbl -> get_Guid(This,lpbstr)

#define AddIn_get_Connected(This,lpfConnect)	\
    (This)->lpVtbl -> get_Connected(This,lpfConnect)

#define AddIn_put_Connected(This,fConnect)	\
    (This)->lpVtbl -> put_Connected(This,fConnect)

#define AddIn_get_Object(This,lppdisp)	\
    (This)->lpVtbl -> get_Object(This,lppdisp)

#define AddIn_put_Object(This,_lpdispObject)	\
    (This)->lpVtbl -> put_Object(This,_lpdispObject)

#define AddIn_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define AddIn_get_Name(This,lpbstr)	\
    (This)->lpVtbl -> get_Name(This,lpbstr)

#define AddIn_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#define AddIn_get_SatelliteDllPath(This,pbstrPath)	\
    (This)->lpVtbl -> get_SatelliteDllPath(This,pbstrPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Description_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE AddIn_put_Description_Proxy( 
    AddIn * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB AddIn_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Collection_Proxy( 
    AddIn * This,
    /* [retval][out] */ AddIns **lppaddins);


void __RPC_STUB AddIn_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_ProgID_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_ProgID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Guid_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Guid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Connected_Proxy( 
    AddIn * This,
    /* [retval][out] */ VARIANT_BOOL *lpfConnect);


void __RPC_STUB AddIn_get_Connected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE AddIn_put_Connected_Proxy( 
    AddIn * This,
    /* [in] */ VARIANT_BOOL fConnect);


void __RPC_STUB AddIn_put_Connected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Object_Proxy( 
    AddIn * This,
    /* [retval][out] */ IDispatch **lppdisp);


void __RPC_STUB AddIn_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE AddIn_put_Object_Proxy( 
    AddIn * This,
    /* [in] */ IDispatch *_lpdispObject);


void __RPC_STUB AddIn_put_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_DTE_Proxy( 
    AddIn * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB AddIn_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Name_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIn_Remove_Proxy( 
    AddIn * This);


void __RPC_STUB AddIn_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_SatelliteDllPath_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *pbstrPath);


void __RPC_STUB AddIn_get_SatelliteDllPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __AddIn_INTERFACE_DEFINED__ */


#ifndef __Properties_INTERFACE_DEFINED__
#define __Properties_INTERFACE_DEFINED__

/* interface Properties */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Properties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4cc8ccf5-a926-4646-b17f-b4940caed472")
    Properties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Property **lplppReturn) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Properties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Properties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Properties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Properties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Properties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Properties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Properties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Properties * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Property **lplppReturn);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Properties * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Properties * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Properties * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Properties * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Properties * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } PropertiesVtbl;

    interface Properties
    {
        CONST_VTBL struct PropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Properties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Properties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Properties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Properties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Properties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Properties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Properties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Properties_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define Properties_get_Application(This,lppidReturn)	\
    (This)->lpVtbl -> get_Application(This,lppidReturn)

#define Properties_get_Parent(This,lppidReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppidReturn)

#define Properties_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Properties__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Properties_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Properties_Item_Proxy( 
    Properties * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Property **lplppReturn);


void __RPC_STUB Properties_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_Application_Proxy( 
    Properties * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Properties_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_Parent_Proxy( 
    Properties * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Properties_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Properties_get_Count_Proxy( 
    Properties * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Properties_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Properties__NewEnum_Proxy( 
    Properties * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Properties__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_DTE_Proxy( 
    Properties * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Properties_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Properties_INTERFACE_DEFINED__ */


#ifndef __Property_INTERFACE_DEFINED__
#define __Property_INTERFACE_DEFINED__

/* interface Property */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Property;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b988e06-2581-485e-9322-04881e0600d0")
    Property : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *lppvReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT STDMETHODCALLTYPE putref_Value( 
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndexedValue( 
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [retval][out] */ VARIANT *Val) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndexedValue( 
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumIndices( 
            /* [retval][out] */ short *lpiRetVal) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Properties **lpppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Properties **lpppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **lppunk) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Object( 
            /* [in] */ IUnknown *lpunk) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Property * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Property * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Property * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Property * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Property * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Property * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Property * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Property * This,
            /* [retval][out] */ VARIANT *lppvReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Property * This,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT ( STDMETHODCALLTYPE *putref_Value )( 
            Property * This,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndexedValue )( 
            Property * This,
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [retval][out] */ VARIANT *Val);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndexedValue )( 
            Property * This,
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumIndices )( 
            Property * This,
            /* [retval][out] */ short *lpiRetVal);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Property * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Property * This,
            /* [retval][out] */ Properties **lpppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Property * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Property * This,
            /* [retval][out] */ Properties **lpppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Property * This,
            /* [retval][out] */ IDispatch **lppunk);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Object )( 
            Property * This,
            /* [in] */ IUnknown *lpunk);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Property * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } PropertyVtbl;

    interface Property
    {
        CONST_VTBL struct PropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Property_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Property_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Property_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Property_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Property_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Property_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Property_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Property_get_Value(This,lppvReturn)	\
    (This)->lpVtbl -> get_Value(This,lppvReturn)

#define Property_put_Value(This,NewValue)	\
    (This)->lpVtbl -> put_Value(This,NewValue)

#define Property_putref_Value(This,NewValue)	\
    (This)->lpVtbl -> putref_Value(This,NewValue)

#define Property_get_IndexedValue(This,Index1,Index2,Index3,Index4,Val)	\
    (This)->lpVtbl -> get_IndexedValue(This,Index1,Index2,Index3,Index4,Val)

#define Property_put_IndexedValue(This,Index1,Index2,Index3,Index4,NewValue)	\
    (This)->lpVtbl -> put_IndexedValue(This,Index1,Index2,Index3,Index4,NewValue)

#define Property_get_NumIndices(This,lpiRetVal)	\
    (This)->lpVtbl -> get_NumIndices(This,lpiRetVal)

#define Property_get_Application(This,lppidReturn)	\
    (This)->lpVtbl -> get_Application(This,lppidReturn)

#define Property_get_Parent(This,lpppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lpppReturn)

#define Property_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define Property_get_Collection(This,lpppReturn)	\
    (This)->lpVtbl -> get_Collection(This,lpppReturn)

#define Property_get_Object(This,lppunk)	\
    (This)->lpVtbl -> get_Object(This,lppunk)

#define Property_putref_Object(This,lpunk)	\
    (This)->lpVtbl -> putref_Object(This,lpunk)

#define Property_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Value_Proxy( 
    Property * This,
    /* [retval][out] */ VARIANT *lppvReturn);


void __RPC_STUB Property_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Property_put_Value_Proxy( 
    Property * This,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT STDMETHODCALLTYPE Property_putref_Value_Proxy( 
    Property * This,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_putref_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_IndexedValue_Proxy( 
    Property * This,
    /* [in] */ VARIANT Index1,
    /* [optional][in] */ VARIANT Index2,
    /* [optional][in] */ VARIANT Index3,
    /* [optional][in] */ VARIANT Index4,
    /* [retval][out] */ VARIANT *Val);


void __RPC_STUB Property_get_IndexedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Property_put_IndexedValue_Proxy( 
    Property * This,
    /* [in] */ VARIANT Index1,
    /* [optional][in] */ VARIANT Index2,
    /* [optional][in] */ VARIANT Index3,
    /* [optional][in] */ VARIANT Index4,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_put_IndexedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_NumIndices_Proxy( 
    Property * This,
    /* [retval][out] */ short *lpiRetVal);


void __RPC_STUB Property_get_NumIndices_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Application_Proxy( 
    Property * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Property_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Parent_Proxy( 
    Property * This,
    /* [retval][out] */ Properties **lpppReturn);


void __RPC_STUB Property_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Name_Proxy( 
    Property * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Property_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Collection_Proxy( 
    Property * This,
    /* [retval][out] */ Properties **lpppReturn);


void __RPC_STUB Property_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Object_Proxy( 
    Property * This,
    /* [retval][out] */ IDispatch **lppunk);


void __RPC_STUB Property_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT STDMETHODCALLTYPE Property_putref_Object_Proxy( 
    Property * This,
    /* [in] */ IUnknown *lpunk);


void __RPC_STUB Property_putref_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_DTE_Proxy( 
    Property * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Property_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Property_INTERFACE_DEFINED__ */


#ifndef __ISupportVSProperties_INTERFACE_DEFINED__
#define __ISupportVSProperties_INTERFACE_DEFINED__

/* interface ISupportVSProperties */
/* [object][hidden][uuid][oleautomation] */ 


EXTERN_C const IID IID_ISupportVSProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6659ed14-2ab6-47f3-a890-00c8aba43b84")
    ISupportVSProperties : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyPropertiesDelete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISupportVSPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISupportVSProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISupportVSProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISupportVSProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyPropertiesDelete )( 
            ISupportVSProperties * This);
        
        END_INTERFACE
    } ISupportVSPropertiesVtbl;

    interface ISupportVSProperties
    {
        CONST_VTBL struct ISupportVSPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISupportVSProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISupportVSProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISupportVSProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISupportVSProperties_NotifyPropertiesDelete(This)	\
    (This)->lpVtbl -> NotifyPropertiesDelete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISupportVSProperties_NotifyPropertiesDelete_Proxy( 
    ISupportVSProperties * This);


void __RPC_STUB ISupportVSProperties_NotifyPropertiesDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISupportVSProperties_INTERFACE_DEFINED__ */


#ifndef __SelectedItems_INTERFACE_DEFINED__
#define __SelectedItems_INTERFACE_DEFINED__

/* interface SelectedItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectedItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6caa67cf-43ae-4184-aaab-0200ddf6b240")
    SelectedItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ SelectedItem **lplppReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MultiSelect( 
            /* [retval][out] */ VARIANT_BOOL *pfMultiSelect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionContainer( 
            /* [retval][out] */ SelectionContainer **lppdispSelContainer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectedItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectedItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectedItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectedItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectedItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectedItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectedItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectedItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SelectedItems * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ SelectedItem **lplppReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SelectedItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SelectedItems * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SelectedItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectedItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MultiSelect )( 
            SelectedItems * This,
            /* [retval][out] */ VARIANT_BOOL *pfMultiSelect);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionContainer )( 
            SelectedItems * This,
            /* [retval][out] */ SelectionContainer **lppdispSelContainer);
        
        END_INTERFACE
    } SelectedItemsVtbl;

    interface SelectedItems
    {
        CONST_VTBL struct SelectedItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectedItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectedItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectedItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectedItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectedItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectedItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectedItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectedItems_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define SelectedItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define SelectedItems_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define SelectedItems_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define SelectedItems_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define SelectedItems_get_MultiSelect(This,pfMultiSelect)	\
    (This)->lpVtbl -> get_MultiSelect(This,pfMultiSelect)

#define SelectedItems_get_SelectionContainer(This,lppdispSelContainer)	\
    (This)->lpVtbl -> get_SelectionContainer(This,lppdispSelContainer)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_Item_Proxy( 
    SelectedItems * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ SelectedItem **lplppReturn);


void __RPC_STUB SelectedItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SelectedItems__NewEnum_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB SelectedItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_Count_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB SelectedItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_Parent_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB SelectedItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_DTE_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB SelectedItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_MultiSelect_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ VARIANT_BOOL *pfMultiSelect);


void __RPC_STUB SelectedItems_get_MultiSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_SelectionContainer_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ SelectionContainer **lppdispSelContainer);


void __RPC_STUB SelectedItems_get_SelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectedItems_INTERFACE_DEFINED__ */


#ifndef __SelectedItem_INTERFACE_DEFINED__
#define __SelectedItem_INTERFACE_DEFINED__

/* interface SelectedItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectedItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("049d2cdf-3731-4cb6-a233-be97bce922d3")
    SelectedItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SelectedItems **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE get_InfoCount( 
            /* [retval][out] */ short *lpnCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Info( 
            /* [in] */ short Index,
            /* [retval][out] */ VARIANT *lpbstrReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectedItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectedItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectedItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectedItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectedItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectedItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectedItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectedItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SelectedItem * This,
            /* [retval][out] */ SelectedItems **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectedItem * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            SelectedItem * This,
            /* [retval][out] */ Project **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            SelectedItem * This,
            /* [retval][out] */ ProjectItem **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SelectedItem * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoCount )( 
            SelectedItem * This,
            /* [retval][out] */ short *lpnCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Info )( 
            SelectedItem * This,
            /* [in] */ short Index,
            /* [retval][out] */ VARIANT *lpbstrReturn);
        
        END_INTERFACE
    } SelectedItemVtbl;

    interface SelectedItem
    {
        CONST_VTBL struct SelectedItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectedItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectedItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectedItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectedItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectedItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectedItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectedItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectedItem_get_Collection(This,lppReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppReturn)

#define SelectedItem_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#define SelectedItem_get_Project(This,lppReturn)	\
    (This)->lpVtbl -> get_Project(This,lppReturn)

#define SelectedItem_get_ProjectItem(This,lppReturn)	\
    (This)->lpVtbl -> get_ProjectItem(This,lppReturn)

#define SelectedItem_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define SelectedItem_get_InfoCount(This,lpnCount)	\
    (This)->lpVtbl -> get_InfoCount(This,lpnCount)

#define SelectedItem_get_Info(This,Index,lpbstrReturn)	\
    (This)->lpVtbl -> get_Info(This,Index,lpbstrReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Collection_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ SelectedItems **lppReturn);


void __RPC_STUB SelectedItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_DTE_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB SelectedItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Project_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ Project **lppReturn);


void __RPC_STUB SelectedItem_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_ProjectItem_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ ProjectItem **lppReturn);


void __RPC_STUB SelectedItem_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Name_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB SelectedItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_InfoCount_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ short *lpnCount);


void __RPC_STUB SelectedItem_get_InfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Info_Proxy( 
    SelectedItem * This,
    /* [in] */ short Index,
    /* [retval][out] */ VARIANT *lpbstrReturn);


void __RPC_STUB SelectedItem_get_Info_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectedItem_INTERFACE_DEFINED__ */


#ifndef __SelectionContainer_INTERFACE_DEFINED__
#define __SelectionContainer_INTERFACE_DEFINED__

/* interface SelectionContainer */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectionContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02273422-8dd4-4a9f-8a8b-d70443d510f4")
    SelectionContainer : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ IDispatch **lplppReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SelectedItems **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectionContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectionContainer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectionContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectionContainer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectionContainer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectionContainer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectionContainer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectionContainer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SelectionContainer * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ IDispatch **lplppReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SelectionContainer * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SelectionContainer * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SelectionContainer * This,
            /* [retval][out] */ SelectedItems **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectionContainer * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        END_INTERFACE
    } SelectionContainerVtbl;

    interface SelectionContainer
    {
        CONST_VTBL struct SelectionContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectionContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectionContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectionContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectionContainer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectionContainer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectionContainer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectionContainer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectionContainer_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define SelectionContainer__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define SelectionContainer_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define SelectionContainer_get_Parent(This,lppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppReturn)

#define SelectionContainer_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_Item_Proxy( 
    SelectionContainer * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ IDispatch **lplppReturn);


void __RPC_STUB SelectionContainer_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SelectionContainer__NewEnum_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB SelectionContainer__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_Count_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB SelectionContainer_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_Parent_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ SelectedItems **lppReturn);


void __RPC_STUB SelectionContainer_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_DTE_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB SelectionContainer_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectionContainer_INTERFACE_DEFINED__ */


#ifndef __Windows_INTERFACE_DEFINED__
#define __Windows_INTERFACE_DEFINED__

/* interface Windows */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Windows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2294311A-B7BC-4789-B365-1C15FF2CD17C")
    Windows : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateToolWindow( 
            /* [in] */ AddIn *AddInInst,
            /* [in] */ BSTR ProgId,
            /* [in] */ BSTR Caption,
            /* [in] */ BSTR GuidPosition,
            /* [out][in] */ IDispatch **DocObj,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLinkedWindowFrame( 
            /* [in] */ Window *Window1,
            /* [in] */ Window *Window2,
            /* [in] */ vsLinkedWindowType Link,
            /* [retval][out] */ Window **LinkedWindowFrame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Windows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Windows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Windows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Windows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Windows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Windows * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Windows * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Windows * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateToolWindow )( 
            Windows * This,
            /* [in] */ AddIn *AddInInst,
            /* [in] */ BSTR ProgId,
            /* [in] */ BSTR Caption,
            /* [in] */ BSTR GuidPosition,
            /* [out][in] */ IDispatch **DocObj,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Windows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Windows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLinkedWindowFrame )( 
            Windows * This,
            /* [in] */ Window *Window1,
            /* [in] */ Window *Window2,
            /* [in] */ vsLinkedWindowType Link,
            /* [retval][out] */ Window **LinkedWindowFrame);
        
        END_INTERFACE
    } WindowsVtbl;

    interface Windows
    {
        CONST_VTBL struct WindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Windows_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Windows_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Windows_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Windows_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Windows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Windows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Windows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Windows_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define Windows_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Windows__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Windows_CreateToolWindow(This,AddInInst,ProgId,Caption,GuidPosition,DocObj,lppcReturn)	\
    (This)->lpVtbl -> CreateToolWindow(This,AddInInst,ProgId,Caption,GuidPosition,DocObj,lppcReturn)

#define Windows_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Windows_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Windows_CreateLinkedWindowFrame(This,Window1,Window2,Link,LinkedWindowFrame)	\
    (This)->lpVtbl -> CreateLinkedWindowFrame(This,Window1,Window2,Link,LinkedWindowFrame)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_Item_Proxy( 
    Windows * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB Windows_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_Count_Proxy( 
    Windows * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Windows_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Windows__NewEnum_Proxy( 
    Windows * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Windows__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_CreateToolWindow_Proxy( 
    Windows * This,
    /* [in] */ AddIn *AddInInst,
    /* [in] */ BSTR ProgId,
    /* [in] */ BSTR Caption,
    /* [in] */ BSTR GuidPosition,
    /* [out][in] */ IDispatch **DocObj,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB Windows_CreateToolWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_DTE_Proxy( 
    Windows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Windows_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_Parent_Proxy( 
    Windows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Windows_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_CreateLinkedWindowFrame_Proxy( 
    Windows * This,
    /* [in] */ Window *Window1,
    /* [in] */ Window *Window2,
    /* [in] */ vsLinkedWindowType Link,
    /* [retval][out] */ Window **LinkedWindowFrame);


void __RPC_STUB Windows_CreateLinkedWindowFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Windows_INTERFACE_DEFINED__ */


#ifndef __Window_INTERFACE_DEFINED__
#define __Window_INTERFACE_DEFINED__

/* interface Window */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Window;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0beab46b-4c07-4f94-a8d7-1626020e4e53")
    Window : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Windows **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *pfVisible) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL fVisible) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *plLeft) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long lLeft) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *plTop) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long lTop_r) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *plWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long lWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *plHeight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long lHeight_r) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ vsWindowState *plWindowState) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ vsWindowState wstWindowState) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetFocus( void) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsWindowType *pKind) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE SetKind( 
            /* [in] */ vsWindowType eKind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkedWindows( 
            /* [retval][out] */ LinkedWindows **ppwnsCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkedWindowFrame( 
            /* [retval][out] */ Window **ppwinFrame) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ long lWindowHandle) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWnd( 
            /* [retval][out] */ long *plWindowHandle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *pbstrType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectKind( 
            /* [retval][out] */ BSTR *pbstrTypeGUID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppToolObject) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentData( 
            /* [defaultvalue][in] */ BSTR bstrWhichData,
            /* [retval][out] */ IDispatch **ppDataObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **ppProjItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **ppProj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ IDispatch **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Linkable( 
            /* [retval][out] */ VARIANT_BOOL *pLinkable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Linkable( 
            /* [in] */ VARIANT_BOOL Linkable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ vsSaveChanges SaveChanges = vsSaveChangesNo) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *pbstrTitle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR pbstrTitle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSelectionContainer( 
            SAFEARRAY * *Objects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFloating( 
            /* [retval][out] */ VARIANT_BOOL *Floating) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsFloating( 
            /* [in] */ VARIANT_BOOL Floating) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoHides( 
            /* [retval][out] */ VARIANT_BOOL *Hides) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoHides( 
            /* [in] */ VARIANT_BOOL Hides) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetTabPicture( 
            VARIANT Picture) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Window * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Window * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Window * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Window * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Window * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Window * This,
            /* [retval][out] */ Windows **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *pfVisible);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Window * This,
            /* [in] */ VARIANT_BOOL fVisible);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Window * This,
            /* [retval][out] */ long *plLeft);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Window * This,
            /* [in] */ long lLeft);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Window * This,
            /* [retval][out] */ long *plTop);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Window * This,
            /* [in] */ long lTop_r);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Window * This,
            /* [retval][out] */ long *plWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Window * This,
            /* [in] */ long lWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Window * This,
            /* [retval][out] */ long *plHeight);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Window * This,
            /* [in] */ long lHeight_r);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            Window * This,
            /* [retval][out] */ vsWindowState *plWindowState);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            Window * This,
            /* [in] */ vsWindowState wstWindowState);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetFocus )( 
            Window * This);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Window * This,
            /* [retval][out] */ vsWindowType *pKind);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *SetKind )( 
            Window * This,
            /* [in] */ vsWindowType eKind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkedWindows )( 
            Window * This,
            /* [retval][out] */ LinkedWindows **ppwnsCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkedWindowFrame )( 
            Window * This,
            /* [retval][out] */ Window **ppwinFrame);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            Window * This);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Attach )( 
            Window * This,
            /* [in] */ long lWindowHandle);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWnd )( 
            Window * This,
            /* [retval][out] */ long *plWindowHandle);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectKind )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrTypeGUID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Window * This,
            /* [retval][out] */ IDispatch **ppToolObject);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentData )( 
            Window * This,
            /* [defaultvalue][in] */ BSTR bstrWhichData,
            /* [retval][out] */ IDispatch **ppDataObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            Window * This,
            /* [retval][out] */ ProjectItem **ppProjItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            Window * This,
            /* [retval][out] */ Project **ppProj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Window * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            Window * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Window * This,
            /* [retval][out] */ IDispatch **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linkable )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *pLinkable);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linkable )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Linkable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Window * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Window * This,
            /* [defaultvalue][in] */ vsSaveChanges SaveChanges);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrTitle);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            Window * This,
            /* [in] */ BSTR pbstrTitle);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSelectionContainer )( 
            Window * This,
            SAFEARRAY * *Objects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFloating )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *Floating);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsFloating )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Floating);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoHides )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *Hides);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoHides )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Hides);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetTabPicture )( 
            Window * This,
            VARIANT Picture);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextAttributes )( 
            Window * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        END_INTERFACE
    } WindowVtbl;

    interface Window
    {
        CONST_VTBL struct WindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Window_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Window_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Window_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Window_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Window_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Window_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Window_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Window_get_Collection(This,lppaReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppaReturn)

#define Window_get_Visible(This,pfVisible)	\
    (This)->lpVtbl -> get_Visible(This,pfVisible)

#define Window_put_Visible(This,fVisible)	\
    (This)->lpVtbl -> put_Visible(This,fVisible)

#define Window_get_Left(This,plLeft)	\
    (This)->lpVtbl -> get_Left(This,plLeft)

#define Window_put_Left(This,lLeft)	\
    (This)->lpVtbl -> put_Left(This,lLeft)

#define Window_get_Top(This,plTop)	\
    (This)->lpVtbl -> get_Top(This,plTop)

#define Window_put_Top(This,lTop_r)	\
    (This)->lpVtbl -> put_Top(This,lTop_r)

#define Window_get_Width(This,plWidth)	\
    (This)->lpVtbl -> get_Width(This,plWidth)

#define Window_put_Width(This,lWidth)	\
    (This)->lpVtbl -> put_Width(This,lWidth)

#define Window_get_Height(This,plHeight)	\
    (This)->lpVtbl -> get_Height(This,plHeight)

#define Window_put_Height(This,lHeight_r)	\
    (This)->lpVtbl -> put_Height(This,lHeight_r)

#define Window_get_WindowState(This,plWindowState)	\
    (This)->lpVtbl -> get_WindowState(This,plWindowState)

#define Window_put_WindowState(This,wstWindowState)	\
    (This)->lpVtbl -> put_WindowState(This,wstWindowState)

#define Window_SetFocus(This)	\
    (This)->lpVtbl -> SetFocus(This)

#define Window_get_Type(This,pKind)	\
    (This)->lpVtbl -> get_Type(This,pKind)

#define Window_SetKind(This,eKind)	\
    (This)->lpVtbl -> SetKind(This,eKind)

#define Window_get_LinkedWindows(This,ppwnsCollection)	\
    (This)->lpVtbl -> get_LinkedWindows(This,ppwnsCollection)

#define Window_get_LinkedWindowFrame(This,ppwinFrame)	\
    (This)->lpVtbl -> get_LinkedWindowFrame(This,ppwinFrame)

#define Window_Detach(This)	\
    (This)->lpVtbl -> Detach(This)

#define Window_Attach(This,lWindowHandle)	\
    (This)->lpVtbl -> Attach(This,lWindowHandle)

#define Window_get_HWnd(This,plWindowHandle)	\
    (This)->lpVtbl -> get_HWnd(This,plWindowHandle)

#define Window_get_Kind(This,pbstrType)	\
    (This)->lpVtbl -> get_Kind(This,pbstrType)

#define Window_get_ObjectKind(This,pbstrTypeGUID)	\
    (This)->lpVtbl -> get_ObjectKind(This,pbstrTypeGUID)

#define Window_get_Object(This,ppToolObject)	\
    (This)->lpVtbl -> get_Object(This,ppToolObject)

#define Window_get_DocumentData(This,bstrWhichData,ppDataObject)	\
    (This)->lpVtbl -> get_DocumentData(This,bstrWhichData,ppDataObject)

#define Window_get_ProjectItem(This,ppProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,ppProjItem)

#define Window_get_Project(This,ppProj)	\
    (This)->lpVtbl -> get_Project(This,ppProj)

#define Window_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Window_get_Document(This,ppDocument)	\
    (This)->lpVtbl -> get_Document(This,ppDocument)

#define Window_get_Selection(This,ppDocument)	\
    (This)->lpVtbl -> get_Selection(This,ppDocument)

#define Window_get_Linkable(This,pLinkable)	\
    (This)->lpVtbl -> get_Linkable(This,pLinkable)

#define Window_put_Linkable(This,Linkable)	\
    (This)->lpVtbl -> put_Linkable(This,Linkable)

#define Window_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define Window_Close(This,SaveChanges)	\
    (This)->lpVtbl -> Close(This,SaveChanges)

#define Window_get_Caption(This,pbstrTitle)	\
    (This)->lpVtbl -> get_Caption(This,pbstrTitle)

#define Window_put_Caption(This,pbstrTitle)	\
    (This)->lpVtbl -> put_Caption(This,pbstrTitle)

#define Window_SetSelectionContainer(This,Objects)	\
    (This)->lpVtbl -> SetSelectionContainer(This,Objects)

#define Window_get_IsFloating(This,Floating)	\
    (This)->lpVtbl -> get_IsFloating(This,Floating)

#define Window_put_IsFloating(This,Floating)	\
    (This)->lpVtbl -> put_IsFloating(This,Floating)

#define Window_get_AutoHides(This,Hides)	\
    (This)->lpVtbl -> get_AutoHides(This,Hides)

#define Window_put_AutoHides(This,Hides)	\
    (This)->lpVtbl -> put_AutoHides(This,Hides)

#define Window_SetTabPicture(This,Picture)	\
    (This)->lpVtbl -> SetTabPicture(This,Picture)

#define Window_get_ContextAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_ContextAttributes(This,ppVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Collection_Proxy( 
    Window * This,
    /* [retval][out] */ Windows **lppaReturn);


void __RPC_STUB Window_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Visible_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *pfVisible);


void __RPC_STUB Window_get_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Visible_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL fVisible);


void __RPC_STUB Window_put_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Left_Proxy( 
    Window * This,
    /* [retval][out] */ long *plLeft);


void __RPC_STUB Window_get_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Left_Proxy( 
    Window * This,
    /* [in] */ long lLeft);


void __RPC_STUB Window_put_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Top_Proxy( 
    Window * This,
    /* [retval][out] */ long *plTop);


void __RPC_STUB Window_get_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Top_Proxy( 
    Window * This,
    /* [in] */ long lTop_r);


void __RPC_STUB Window_put_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Width_Proxy( 
    Window * This,
    /* [retval][out] */ long *plWidth);


void __RPC_STUB Window_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Width_Proxy( 
    Window * This,
    /* [in] */ long lWidth);


void __RPC_STUB Window_put_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Height_Proxy( 
    Window * This,
    /* [retval][out] */ long *plHeight);


void __RPC_STUB Window_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Height_Proxy( 
    Window * This,
    /* [in] */ long lHeight_r);


void __RPC_STUB Window_put_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_WindowState_Proxy( 
    Window * This,
    /* [retval][out] */ vsWindowState *plWindowState);


void __RPC_STUB Window_get_WindowState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_WindowState_Proxy( 
    Window * This,
    /* [in] */ vsWindowState wstWindowState);


void __RPC_STUB Window_put_WindowState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetFocus_Proxy( 
    Window * This);


void __RPC_STUB Window_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Type_Proxy( 
    Window * This,
    /* [retval][out] */ vsWindowType *pKind);


void __RPC_STUB Window_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_SetKind_Proxy( 
    Window * This,
    /* [in] */ vsWindowType eKind);


void __RPC_STUB Window_SetKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_LinkedWindows_Proxy( 
    Window * This,
    /* [retval][out] */ LinkedWindows **ppwnsCollection);


void __RPC_STUB Window_get_LinkedWindows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_LinkedWindowFrame_Proxy( 
    Window * This,
    /* [retval][out] */ Window **ppwinFrame);


void __RPC_STUB Window_get_LinkedWindowFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_Detach_Proxy( 
    Window * This);


void __RPC_STUB Window_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_Attach_Proxy( 
    Window * This,
    /* [in] */ long lWindowHandle);


void __RPC_STUB Window_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_HWnd_Proxy( 
    Window * This,
    /* [retval][out] */ long *plWindowHandle);


void __RPC_STUB Window_get_HWnd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Kind_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrType);


void __RPC_STUB Window_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ObjectKind_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrTypeGUID);


void __RPC_STUB Window_get_ObjectKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Object_Proxy( 
    Window * This,
    /* [retval][out] */ IDispatch **ppToolObject);


void __RPC_STUB Window_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_DocumentData_Proxy( 
    Window * This,
    /* [defaultvalue][in] */ BSTR bstrWhichData,
    /* [retval][out] */ IDispatch **ppDataObject);


void __RPC_STUB Window_get_DocumentData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ProjectItem_Proxy( 
    Window * This,
    /* [retval][out] */ ProjectItem **ppProjItem);


void __RPC_STUB Window_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Project_Proxy( 
    Window * This,
    /* [retval][out] */ Project **ppProj);


void __RPC_STUB Window_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_DTE_Proxy( 
    Window * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Window_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Document_Proxy( 
    Window * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Window_get_Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Selection_Proxy( 
    Window * This,
    /* [retval][out] */ IDispatch **ppDocument);


void __RPC_STUB Window_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Linkable_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *pLinkable);


void __RPC_STUB Window_get_Linkable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Linkable_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Linkable);


void __RPC_STUB Window_put_Linkable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_Activate_Proxy( 
    Window * This);


void __RPC_STUB Window_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_Close_Proxy( 
    Window * This,
    /* [defaultvalue][in] */ vsSaveChanges SaveChanges);


void __RPC_STUB Window_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Caption_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrTitle);


void __RPC_STUB Window_get_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Caption_Proxy( 
    Window * This,
    /* [in] */ BSTR pbstrTitle);


void __RPC_STUB Window_put_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetSelectionContainer_Proxy( 
    Window * This,
    SAFEARRAY * *Objects);


void __RPC_STUB Window_SetSelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_IsFloating_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *Floating);


void __RPC_STUB Window_get_IsFloating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_IsFloating_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Floating);


void __RPC_STUB Window_put_IsFloating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_AutoHides_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *Hides);


void __RPC_STUB Window_get_AutoHides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_AutoHides_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Hides);


void __RPC_STUB Window_put_AutoHides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetTabPicture_Proxy( 
    Window * This,
    VARIANT Picture);


void __RPC_STUB Window_SetTabPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ContextAttributes_Proxy( 
    Window * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB Window_get_ContextAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Window_INTERFACE_DEFINED__ */


#ifndef __LinkedWindows_INTERFACE_DEFINED__
#define __LinkedWindows_INTERFACE_DEFINED__

/* interface LinkedWindows */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_LinkedWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f00ef34a-a654-4c1b-897a-585d5bcbb35a")
    LinkedWindows : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ Window *Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Window *Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LinkedWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LinkedWindows * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LinkedWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LinkedWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LinkedWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LinkedWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LinkedWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LinkedWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LinkedWindows * This,
            /* [retval][out] */ Window **ppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            LinkedWindows * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            LinkedWindows * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            LinkedWindows * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            LinkedWindows * This,
            /* [in] */ Window *Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            LinkedWindows * This,
            /* [in] */ Window *Window);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            LinkedWindows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } LinkedWindowsVtbl;

    interface LinkedWindows
    {
        CONST_VTBL struct LinkedWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LinkedWindows_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define LinkedWindows_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define LinkedWindows_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define LinkedWindows_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define LinkedWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define LinkedWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define LinkedWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define LinkedWindows_get_Parent(This,ppptReturn)	\
    (This)->lpVtbl -> get_Parent(This,ppptReturn)

#define LinkedWindows_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define LinkedWindows_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define LinkedWindows__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define LinkedWindows_Remove(This,Window)	\
    (This)->lpVtbl -> Remove(This,Window)

#define LinkedWindows_Add(This,Window)	\
    (This)->lpVtbl -> Add(This,Window)

#define LinkedWindows_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_Parent_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ Window **ppptReturn);


void __RPC_STUB LinkedWindows_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Item_Proxy( 
    LinkedWindows * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB LinkedWindows_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_Count_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB LinkedWindows_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows__NewEnum_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB LinkedWindows__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Remove_Proxy( 
    LinkedWindows * This,
    /* [in] */ Window *Window);


void __RPC_STUB LinkedWindows_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Add_Proxy( 
    LinkedWindows * This,
    /* [in] */ Window *Window);


void __RPC_STUB LinkedWindows_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_DTE_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB LinkedWindows_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __LinkedWindows_INTERFACE_DEFINED__ */


#ifndef __Events_INTERFACE_DEFINED__
#define __Events_INTERFACE_DEFINED__

/* interface Events */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Events;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("134170F8-93B1-42dd-9F89-A2AC7010BA07")
    Events : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBarEvents( 
            /* [in] */ IDispatch *CommandBarControl,
            /* [retval][out] */ IDispatch **prceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandEvents( 
            /* [defaultvalue][in] */ BSTR Guid,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ CommandEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionEvents( 
            /* [retval][out] */ SelectionEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionEvents( 
            /* [retval][out] */ SolutionEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildEvents( 
            /* [retval][out] */ BuildEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowEvents( 
            /* [defaultvalue][in] */ Window *WindowFilter,
            /* [retval][out] */ WindowEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputWindowEvents( 
            /* [defaultvalue][in] */ BSTR Pane,
            /* [retval][out] */ OutputWindowEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindEvents( 
            /* [retval][out] */ FindEvents	**ppFindEvents) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TaskListEvents( 
            /* [defaultvalue][in] */ BSTR Filter,
            /* [retval][out] */ TaskListEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTEEvents( 
            /* [retval][out] */ DTEEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentEvents( 
            /* [defaultvalue][in] */ Document *Document,
            /* [retval][out] */ DocumentEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionItemsEvents( 
            /* [retval][out] */ ProjectItemsEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesEvents( 
            /* [retval][out] */ ProjectItemsEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DebuggerEvents( 
            /* [retval][out] */ DebuggerEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEditorEvents( 
            /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ TextEditorEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Events * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Events * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Events * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Events * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Events * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Events * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Events * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBarEvents )( 
            Events * This,
            /* [in] */ IDispatch *CommandBarControl,
            /* [retval][out] */ IDispatch **prceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Guid,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ CommandEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionEvents )( 
            Events * This,
            /* [retval][out] */ SelectionEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionEvents )( 
            Events * This,
            /* [retval][out] */ SolutionEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildEvents )( 
            Events * This,
            /* [retval][out] */ BuildEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowEvents )( 
            Events * This,
            /* [defaultvalue][in] */ Window *WindowFilter,
            /* [retval][out] */ WindowEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputWindowEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Pane,
            /* [retval][out] */ OutputWindowEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindEvents )( 
            Events * This,
            /* [retval][out] */ FindEvents	**ppFindEvents);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TaskListEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Filter,
            /* [retval][out] */ TaskListEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTEEvents )( 
            Events * This,
            /* [retval][out] */ DTEEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentEvents )( 
            Events * This,
            /* [defaultvalue][in] */ Document *Document,
            /* [retval][out] */ DocumentEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionItemsEvents )( 
            Events * This,
            /* [retval][out] */ ProjectItemsEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesEvents )( 
            Events * This,
            /* [retval][out] */ ProjectItemsEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DebuggerEvents )( 
            Events * This,
            /* [retval][out] */ DebuggerEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEditorEvents )( 
            Events * This,
            /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ TextEditorEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            Events * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        END_INTERFACE
    } EventsVtbl;

    interface Events
    {
        CONST_VTBL struct EventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Events_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Events_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Events_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Events_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Events_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Events_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Events_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Events_get_CommandBarEvents(This,CommandBarControl,prceNew)	\
    (This)->lpVtbl -> get_CommandBarEvents(This,CommandBarControl,prceNew)

#define Events_get_CommandEvents(This,Guid,ID,ppceNew)	\
    (This)->lpVtbl -> get_CommandEvents(This,Guid,ID,ppceNew)

#define Events_get_SelectionEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_SelectionEvents(This,ppceNew)

#define Events_get_SolutionEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_SolutionEvents(This,ppceNew)

#define Events_get_BuildEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_BuildEvents(This,ppceNew)

#define Events_get_WindowEvents(This,WindowFilter,ppceNew)	\
    (This)->lpVtbl -> get_WindowEvents(This,WindowFilter,ppceNew)

#define Events_get_OutputWindowEvents(This,Pane,ppceNew)	\
    (This)->lpVtbl -> get_OutputWindowEvents(This,Pane,ppceNew)

#define Events_get_FindEvents(This,ppFindEvents)	\
    (This)->lpVtbl -> get_FindEvents(This,ppFindEvents)

#define Events_get_TaskListEvents(This,Filter,ppceNew)	\
    (This)->lpVtbl -> get_TaskListEvents(This,Filter,ppceNew)

#define Events_get_DTEEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_DTEEvents(This,ppceNew)

#define Events_get_DocumentEvents(This,Document,ppceNew)	\
    (This)->lpVtbl -> get_DocumentEvents(This,Document,ppceNew)

#define Events_get_SolutionItemsEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_SolutionItemsEvents(This,ppeNew)

#define Events_get_MiscFilesEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_MiscFilesEvents(This,ppeNew)

#define Events_get_DebuggerEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_DebuggerEvents(This,ppeNew)

#define Events_get_TextEditorEvents(This,TextDocumentFilter,ppeNew)	\
    (This)->lpVtbl -> get_TextEditorEvents(This,TextDocumentFilter,ppeNew)

#define Events_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_CommandBarEvents_Proxy( 
    Events * This,
    /* [in] */ IDispatch *CommandBarControl,
    /* [retval][out] */ IDispatch **prceNew);


void __RPC_STUB Events_get_CommandBarEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_CommandEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Guid,
    /* [defaultvalue][in] */ long ID,
    /* [retval][out] */ CommandEvents	**ppceNew);


void __RPC_STUB Events_get_CommandEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SelectionEvents_Proxy( 
    Events * This,
    /* [retval][out] */ SelectionEvents	**ppceNew);


void __RPC_STUB Events_get_SelectionEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SolutionEvents_Proxy( 
    Events * This,
    /* [retval][out] */ SolutionEvents	**ppceNew);


void __RPC_STUB Events_get_SolutionEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_BuildEvents_Proxy( 
    Events * This,
    /* [retval][out] */ BuildEvents	**ppceNew);


void __RPC_STUB Events_get_BuildEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_WindowEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ Window *WindowFilter,
    /* [retval][out] */ WindowEvents	**ppceNew);


void __RPC_STUB Events_get_WindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_OutputWindowEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Pane,
    /* [retval][out] */ OutputWindowEvents	**ppceNew);


void __RPC_STUB Events_get_OutputWindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_FindEvents_Proxy( 
    Events * This,
    /* [retval][out] */ FindEvents	**ppFindEvents);


void __RPC_STUB Events_get_FindEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_TaskListEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Filter,
    /* [retval][out] */ TaskListEvents	**ppceNew);


void __RPC_STUB Events_get_TaskListEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DTEEvents_Proxy( 
    Events * This,
    /* [retval][out] */ DTEEvents	**ppceNew);


void __RPC_STUB Events_get_DTEEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DocumentEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ Document *Document,
    /* [retval][out] */ DocumentEvents	**ppceNew);


void __RPC_STUB Events_get_DocumentEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SolutionItemsEvents_Proxy( 
    Events * This,
    /* [retval][out] */ ProjectItemsEvents	**ppeNew);


void __RPC_STUB Events_get_SolutionItemsEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_MiscFilesEvents_Proxy( 
    Events * This,
    /* [retval][out] */ ProjectItemsEvents	**ppeNew);


void __RPC_STUB Events_get_MiscFilesEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DebuggerEvents_Proxy( 
    Events * This,
    /* [retval][out] */ DebuggerEvents	**ppeNew);


void __RPC_STUB Events_get_DebuggerEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_TextEditorEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
    /* [retval][out] */ TextEditorEvents	**ppeNew);


void __RPC_STUB Events_get_TextEditorEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Events_GetObject_Proxy( 
    Events * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB Events_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Events_INTERFACE_DEFINED__ */


#ifndef __TaskList_INTERFACE_DEFINED__
#define __TaskList_INTERFACE_DEFINED__

/* interface TaskList */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4e4f0569-e16a-4da1-92de-10882a4ddd8c")
    TaskList : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultCommentToken( 
            /* [retval][out] */ BSTR *pbstrToken) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TaskItems( 
            /* [retval][out] */ TaskItems **pTaskItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ VARIANT *Selections) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskList * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskList * This,
            /* [retval][out] */ Window **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultCommentToken )( 
            TaskList * This,
            /* [retval][out] */ BSTR *pbstrToken);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TaskItems )( 
            TaskList * This,
            /* [retval][out] */ TaskItems **pTaskItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            TaskList * This,
            /* [retval][out] */ VARIANT *Selections);
        
        END_INTERFACE
    } TaskListVtbl;

    interface TaskList
    {
        CONST_VTBL struct TaskListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskList_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#define TaskList_get_Parent(This,lppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppReturn)

#define TaskList_get_DefaultCommentToken(This,pbstrToken)	\
    (This)->lpVtbl -> get_DefaultCommentToken(This,pbstrToken)

#define TaskList_get_TaskItems(This,pTaskItems)	\
    (This)->lpVtbl -> get_TaskItems(This,pTaskItems)

#define TaskList_get_SelectedItems(This,Selections)	\
    (This)->lpVtbl -> get_SelectedItems(This,Selections)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_DTE_Proxy( 
    TaskList * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB TaskList_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_Parent_Proxy( 
    TaskList * This,
    /* [retval][out] */ Window **lppReturn);


void __RPC_STUB TaskList_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_DefaultCommentToken_Proxy( 
    TaskList * This,
    /* [retval][out] */ BSTR *pbstrToken);


void __RPC_STUB TaskList_get_DefaultCommentToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_TaskItems_Proxy( 
    TaskList * This,
    /* [retval][out] */ TaskItems **pTaskItems);


void __RPC_STUB TaskList_get_TaskItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_SelectedItems_Proxy( 
    TaskList * This,
    /* [retval][out] */ VARIANT *Selections);


void __RPC_STUB TaskList_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskList_INTERFACE_DEFINED__ */


#ifndef __TaskItems_INTERFACE_DEFINED__
#define __TaskItems_INTERFACE_DEFINED__

/* interface TaskItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4b51103d-513c-4773-b56a-354d0928fd04")
    TaskItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TaskList **pTaskList) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TaskItem **pTaskItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Category,
            /* [in] */ BSTR SubCategory,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ vsTaskPriority Priority,
            /* [optional][in] */ VARIANT Icon,
            /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
            /* [defaultvalue][in] */ BSTR File,
            /* [defaultvalue][in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
            /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
            /* [retval][out] */ TaskItem **pTaskItem) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ForceItemsToTaskList( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskItems * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskItems * This,
            /* [retval][out] */ TaskList **pTaskList);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TaskItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TaskItem **pTaskItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TaskItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TaskItems * This,
            /* [in] */ BSTR Category,
            /* [in] */ BSTR SubCategory,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ vsTaskPriority Priority,
            /* [optional][in] */ VARIANT Icon,
            /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
            /* [defaultvalue][in] */ BSTR File,
            /* [defaultvalue][in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
            /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
            /* [retval][out] */ TaskItem **pTaskItem);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TaskItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ForceItemsToTaskList )( 
            TaskItems * This);
        
        END_INTERFACE
    } TaskItemsVtbl;

    interface TaskItems
    {
        CONST_VTBL struct TaskItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskItems_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define TaskItems_get_Parent(This,pTaskList)	\
    (This)->lpVtbl -> get_Parent(This,pTaskList)

#define TaskItems_Item(This,Index,pTaskItem)	\
    (This)->lpVtbl -> Item(This,Index,pTaskItem)

#define TaskItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TaskItems_Add(This,Category,SubCategory,Description,Priority,Icon,Checkable,File,Line,CanUserDelete,FlushItem,pTaskItem)	\
    (This)->lpVtbl -> Add(This,Category,SubCategory,Description,Priority,Icon,Checkable,File,Line,CanUserDelete,FlushItem,pTaskItem)

#define TaskItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define TaskItems_ForceItemsToTaskList(This)	\
    (This)->lpVtbl -> ForceItemsToTaskList(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_DTE_Proxy( 
    TaskItems * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB TaskItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_Parent_Proxy( 
    TaskItems * This,
    /* [retval][out] */ TaskList **pTaskList);


void __RPC_STUB TaskItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_Item_Proxy( 
    TaskItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TaskItem **pTaskItem);


void __RPC_STUB TaskItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_Count_Proxy( 
    TaskItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TaskItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_Add_Proxy( 
    TaskItems * This,
    /* [in] */ BSTR Category,
    /* [in] */ BSTR SubCategory,
    /* [in] */ BSTR Description,
    /* [defaultvalue][in] */ vsTaskPriority Priority,
    /* [optional][in] */ VARIANT Icon,
    /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
    /* [defaultvalue][in] */ BSTR File,
    /* [defaultvalue][in] */ long Line,
    /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
    /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
    /* [retval][out] */ TaskItem **pTaskItem);


void __RPC_STUB TaskItems_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TaskItems__NewEnum_Proxy( 
    TaskItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TaskItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_ForceItemsToTaskList_Proxy( 
    TaskItems * This);


void __RPC_STUB TaskItems_ForceItemsToTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskItems_INTERFACE_DEFINED__ */


#ifndef __TaskItem_INTERFACE_DEFINED__
#define __TaskItem_INTERFACE_DEFINED__

/* interface TaskItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("58e4d419-6b8c-4c63-92de-70161cd95890")
    TaskItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TaskItems **pTaskItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ BSTR *pCategory) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubCategory( 
            /* [retval][out] */ BSTR *pSubCategory) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ vsTaskPriority *pPriority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ vsTaskPriority Priority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *pDescription) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *pFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSettable( 
            /* [in] */ vsTaskListColumn Column,
            /* [retval][out] */ VARIANT_BOOL *pSettable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Line( 
            /* [in] */ long Line) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Displayed( 
            /* [retval][out] */ VARIANT_BOOL *pDisplayed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ VARIANT_BOOL *pChecked) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ VARIANT_BOOL Checked) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Navigate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskItem * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TaskItem * This,
            /* [retval][out] */ TaskItems **pTaskItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pCategory);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubCategory )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pSubCategory);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            TaskItem * This,
            /* [retval][out] */ vsTaskPriority *pPriority);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            TaskItem * This,
            /* [in] */ vsTaskPriority Priority);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pDescription);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            TaskItem * This,
            /* [in] */ BSTR Description);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            TaskItem * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSettable )( 
            TaskItem * This,
            /* [in] */ vsTaskListColumn Column,
            /* [retval][out] */ VARIANT_BOOL *pSettable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            TaskItem * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Line )( 
            TaskItem * This,
            /* [in] */ long Line);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Displayed )( 
            TaskItem * This,
            /* [retval][out] */ VARIANT_BOOL *pDisplayed);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            TaskItem * This,
            /* [retval][out] */ VARIANT_BOOL *pChecked);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            TaskItem * This,
            /* [in] */ VARIANT_BOOL Checked);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Navigate )( 
            TaskItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TaskItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            TaskItem * This);
        
        END_INTERFACE
    } TaskItemVtbl;

    interface TaskItem
    {
        CONST_VTBL struct TaskItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskItem_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define TaskItem_get_Collection(This,pTaskItems)	\
    (This)->lpVtbl -> get_Collection(This,pTaskItems)

#define TaskItem_get_Category(This,pCategory)	\
    (This)->lpVtbl -> get_Category(This,pCategory)

#define TaskItem_get_SubCategory(This,pSubCategory)	\
    (This)->lpVtbl -> get_SubCategory(This,pSubCategory)

#define TaskItem_get_Priority(This,pPriority)	\
    (This)->lpVtbl -> get_Priority(This,pPriority)

#define TaskItem_put_Priority(This,Priority)	\
    (This)->lpVtbl -> put_Priority(This,Priority)

#define TaskItem_get_Description(This,pDescription)	\
    (This)->lpVtbl -> get_Description(This,pDescription)

#define TaskItem_put_Description(This,Description)	\
    (This)->lpVtbl -> put_Description(This,Description)

#define TaskItem_get_FileName(This,pFileName)	\
    (This)->lpVtbl -> get_FileName(This,pFileName)

#define TaskItem_put_FileName(This,FileName)	\
    (This)->lpVtbl -> put_FileName(This,FileName)

#define TaskItem_get_IsSettable(This,Column,pSettable)	\
    (This)->lpVtbl -> get_IsSettable(This,Column,pSettable)

#define TaskItem_get_Line(This,pLine)	\
    (This)->lpVtbl -> get_Line(This,pLine)

#define TaskItem_put_Line(This,Line)	\
    (This)->lpVtbl -> put_Line(This,Line)

#define TaskItem_get_Displayed(This,pDisplayed)	\
    (This)->lpVtbl -> get_Displayed(This,pDisplayed)

#define TaskItem_get_Checked(This,pChecked)	\
    (This)->lpVtbl -> get_Checked(This,pChecked)

#define TaskItem_put_Checked(This,Checked)	\
    (This)->lpVtbl -> put_Checked(This,Checked)

#define TaskItem_Navigate(This)	\
    (This)->lpVtbl -> Navigate(This)

#define TaskItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define TaskItem_Select(This)	\
    (This)->lpVtbl -> Select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_DTE_Proxy( 
    TaskItem * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB TaskItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Collection_Proxy( 
    TaskItem * This,
    /* [retval][out] */ TaskItems **pTaskItems);


void __RPC_STUB TaskItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Category_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pCategory);


void __RPC_STUB TaskItem_get_Category_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_SubCategory_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pSubCategory);


void __RPC_STUB TaskItem_get_SubCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Priority_Proxy( 
    TaskItem * This,
    /* [retval][out] */ vsTaskPriority *pPriority);


void __RPC_STUB TaskItem_get_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Priority_Proxy( 
    TaskItem * This,
    /* [in] */ vsTaskPriority Priority);


void __RPC_STUB TaskItem_put_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Description_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pDescription);


void __RPC_STUB TaskItem_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Description_Proxy( 
    TaskItem * This,
    /* [in] */ BSTR Description);


void __RPC_STUB TaskItem_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_FileName_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pFileName);


void __RPC_STUB TaskItem_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_FileName_Proxy( 
    TaskItem * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB TaskItem_put_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_IsSettable_Proxy( 
    TaskItem * This,
    /* [in] */ vsTaskListColumn Column,
    /* [retval][out] */ VARIANT_BOOL *pSettable);


void __RPC_STUB TaskItem_get_IsSettable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Line_Proxy( 
    TaskItem * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TaskItem_get_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Line_Proxy( 
    TaskItem * This,
    /* [in] */ long Line);


void __RPC_STUB TaskItem_put_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Displayed_Proxy( 
    TaskItem * This,
    /* [retval][out] */ VARIANT_BOOL *pDisplayed);


void __RPC_STUB TaskItem_get_Displayed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Checked_Proxy( 
    TaskItem * This,
    /* [retval][out] */ VARIANT_BOOL *pChecked);


void __RPC_STUB TaskItem_get_Checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Checked_Proxy( 
    TaskItem * This,
    /* [in] */ VARIANT_BOOL Checked);


void __RPC_STUB TaskItem_put_Checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Navigate_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Delete_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Select_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskItem_INTERFACE_DEFINED__ */


#ifndef __ToolBox_INTERFACE_DEFINED__
#define __ToolBox_INTERFACE_DEFINED__

/* interface ToolBox */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56fcd5af-7f17-4c5c-aa8d-ae2bb2ddbf38")
    ToolBox : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveTab( 
            /* [retval][out] */ ToolBoxTab **pToolBoxTab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToolBoxTabs( 
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBox * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBox * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBox * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveTab )( 
            ToolBox * This,
            /* [retval][out] */ ToolBoxTab **pToolBoxTab);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToolBoxTabs )( 
            ToolBox * This,
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);
        
        END_INTERFACE
    } ToolBoxVtbl;

    interface ToolBox
    {
        CONST_VTBL struct ToolBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBox_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBox_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBox_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBox_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBox_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBox_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBox_get_ActiveTab(This,pToolBoxTab)	\
    (This)->lpVtbl -> get_ActiveTab(This,pToolBoxTab)

#define ToolBox_get_ToolBoxTabs(This,pToolBoxTabs)	\
    (This)->lpVtbl -> get_ToolBoxTabs(This,pToolBoxTabs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_DTE_Proxy( 
    ToolBox * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBox_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_Parent_Proxy( 
    ToolBox * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB ToolBox_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_ActiveTab_Proxy( 
    ToolBox * This,
    /* [retval][out] */ ToolBoxTab **pToolBoxTab);


void __RPC_STUB ToolBox_get_ActiveTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_ToolBoxTabs_Proxy( 
    ToolBox * This,
    /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);


void __RPC_STUB ToolBox_get_ToolBoxTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBox_INTERFACE_DEFINED__ */


#ifndef __ToolBoxTabs_INTERFACE_DEFINED__
#define __ToolBoxTabs_INTERFACE_DEFINED__

/* interface ToolBoxTabs */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxTabs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cf177b52-4f2f-42a0-8da3-ce78679a0d2d")
    ToolBoxTabs : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ToolBoxTab **pItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ToolBox **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ ToolBoxTab **pToolBoxTabs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxTabsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxTabs * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxTabs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxTabs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxTabs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxTabs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxTabs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxTabs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ToolBoxTabs * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ToolBoxTabs * This,
            VARIANT Index,
            /* [retval][out] */ ToolBoxTab **pItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxTabs * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBoxTabs * This,
            /* [retval][out] */ ToolBox **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ToolBoxTabs * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ToolBoxTabs * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ToolBoxTab **pToolBoxTabs);
        
        END_INTERFACE
    } ToolBoxTabsVtbl;

    interface ToolBoxTabs
    {
        CONST_VTBL struct ToolBoxTabsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxTabs_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxTabs_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxTabs_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxTabs_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxTabs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxTabs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxTabs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxTabs__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ToolBoxTabs_Item(This,Index,pItem)	\
    (This)->lpVtbl -> Item(This,Index,pItem)

#define ToolBoxTabs_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxTabs_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBoxTabs_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ToolBoxTabs_Add(This,Name,pToolBoxTabs)	\
    (This)->lpVtbl -> Add(This,Name,pToolBoxTabs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs__NewEnum_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ToolBoxTabs__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_Item_Proxy( 
    ToolBoxTabs * This,
    VARIANT Index,
    /* [retval][out] */ ToolBoxTab **pItem);


void __RPC_STUB ToolBoxTabs_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_DTE_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxTabs_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_Parent_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ ToolBox **pParent);


void __RPC_STUB ToolBoxTabs_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_Count_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ToolBoxTabs_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_Add_Proxy( 
    ToolBoxTabs * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ ToolBoxTab **pToolBoxTabs);


void __RPC_STUB ToolBoxTabs_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxTabs_INTERFACE_DEFINED__ */


#ifndef __ToolBoxTab_INTERFACE_DEFINED__
#define __ToolBoxTab_INTERFACE_DEFINED__

/* interface ToolBoxTab */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxTab;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ce2def9e-3387-4bf2-967b-a1f7f70df325")
    ToolBoxTab : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToolBoxItems( 
            /* [retval][out] */ ToolBoxItems **pToolBoxItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListView( 
            /* [retval][out] */ VARIANT_BOOL *pListView) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ListView( 
            /* [in] */ VARIANT_BOOL ListView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxTabVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxTab * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxTab * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxTab * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxTab * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxTab * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxTab * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxTab * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ToolBoxTab * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ToolBoxTab * This,
            /* [in] */ BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ToolBoxTab * This,
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxTab * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ToolBoxTab * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ToolBoxTab * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToolBoxItems )( 
            ToolBoxTab * This,
            /* [retval][out] */ ToolBoxItems **pToolBoxItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListView )( 
            ToolBoxTab * This,
            /* [retval][out] */ VARIANT_BOOL *pListView);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ListView )( 
            ToolBoxTab * This,
            /* [in] */ VARIANT_BOOL ListView);
        
        END_INTERFACE
    } ToolBoxTabVtbl;

    interface ToolBoxTab
    {
        CONST_VTBL struct ToolBoxTabVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxTab_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxTab_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxTab_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxTab_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxTab_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxTab_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxTab_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxTab_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ToolBoxTab_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define ToolBoxTab_get_Collection(This,pToolBoxTabs)	\
    (This)->lpVtbl -> get_Collection(This,pToolBoxTabs)

#define ToolBoxTab_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxTab_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define ToolBoxTab_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define ToolBoxTab_get_ToolBoxItems(This,pToolBoxItems)	\
    (This)->lpVtbl -> get_ToolBoxItems(This,pToolBoxItems)

#define ToolBoxTab_get_ListView(This,pListView)	\
    (This)->lpVtbl -> get_ListView(This,pListView)

#define ToolBoxTab_put_ListView(This,ListView)	\
    (This)->lpVtbl -> put_ListView(This,ListView)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_Name_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ToolBoxTab_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_put_Name_Proxy( 
    ToolBoxTab * This,
    /* [in] */ BSTR NewName);


void __RPC_STUB ToolBoxTab_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_Collection_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);


void __RPC_STUB ToolBoxTab_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_DTE_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxTab_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_Activate_Proxy( 
    ToolBoxTab * This);


void __RPC_STUB ToolBoxTab_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_Delete_Proxy( 
    ToolBoxTab * This);


void __RPC_STUB ToolBoxTab_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_ToolBoxItems_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ ToolBoxItems **pToolBoxItems);


void __RPC_STUB ToolBoxTab_get_ToolBoxItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_ListView_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ VARIANT_BOOL *pListView);


void __RPC_STUB ToolBoxTab_get_ListView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_put_ListView_Proxy( 
    ToolBoxTab * This,
    /* [in] */ VARIANT_BOOL ListView);


void __RPC_STUB ToolBoxTab_put_ListView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxTab_INTERFACE_DEFINED__ */


#ifndef __ToolBoxItem_INTERFACE_DEFINED__
#define __ToolBoxItem_INTERFACE_DEFINED__

/* interface ToolBoxItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46538d1b-4d81-4002-8bb4-dbdb65babb23")
    ToolBoxItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ToolBoxItems **pToolBoxItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ToolBoxItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ToolBoxItem * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ToolBoxItem * This,
            /* [retval][out] */ ToolBoxItems **pToolBoxItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxItem * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ToolBoxItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ToolBoxItem * This);
        
        END_INTERFACE
    } ToolBoxItemVtbl;

    interface ToolBoxItem
    {
        CONST_VTBL struct ToolBoxItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxItem_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define ToolBoxItem_put_Name(This,Name)	\
    (This)->lpVtbl -> put_Name(This,Name)

#define ToolBoxItem_get_Collection(This,pToolBoxItems)	\
    (This)->lpVtbl -> get_Collection(This,pToolBoxItems)

#define ToolBoxItem_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define ToolBoxItem_Select(This)	\
    (This)->lpVtbl -> Select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_Name_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB ToolBoxItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_put_Name_Proxy( 
    ToolBoxItem * This,
    /* [in] */ BSTR Name);


void __RPC_STUB ToolBoxItem_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_Collection_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ ToolBoxItems **pToolBoxItems);


void __RPC_STUB ToolBoxItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_DTE_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_Delete_Proxy( 
    ToolBoxItem * This);


void __RPC_STUB ToolBoxItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_Select_Proxy( 
    ToolBoxItem * This);


void __RPC_STUB ToolBoxItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxItem_INTERFACE_DEFINED__ */


#ifndef __ToolBoxItems_INTERFACE_DEFINED__
#define __ToolBoxItems_INTERFACE_DEFINED__

/* interface ToolBoxItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("395c7dfb-f158-431c-8f43-dda83b4ef54e")
    ToolBoxItems : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ToolBoxItem **pItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ToolBoxTab **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Data,
            /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItem( 
            /* [retval][out] */ ToolBoxItem **pToolBoxItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ToolBoxItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ToolBoxItems * This,
            VARIANT Index,
            /* [retval][out] */ ToolBoxItem **pItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBoxItems * This,
            /* [retval][out] */ ToolBoxTab **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxItems * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ToolBoxItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ToolBoxItems * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Data,
            /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItem )( 
            ToolBoxItems * This,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem);
        
        END_INTERFACE
    } ToolBoxItemsVtbl;

    interface ToolBoxItems
    {
        CONST_VTBL struct ToolBoxItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ToolBoxItems_Item(This,Index,pItem)	\
    (This)->lpVtbl -> Item(This,Index,pItem)

#define ToolBoxItems_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBoxItems_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ToolBoxItems_Add(This,Name,Data,Format,pToolBoxItem)	\
    (This)->lpVtbl -> Add(This,Name,Data,Format,pToolBoxItem)

#define ToolBoxItems_get_SelectedItem(This,pToolBoxItem)	\
    (This)->lpVtbl -> get_SelectedItem(This,pToolBoxItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ToolBoxItems__NewEnum_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ToolBoxItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_Item_Proxy( 
    ToolBoxItems * This,
    VARIANT Index,
    /* [retval][out] */ ToolBoxItem **pItem);


void __RPC_STUB ToolBoxItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_Parent_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ ToolBoxTab **pParent);


void __RPC_STUB ToolBoxItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_DTE_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_Count_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ToolBoxItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_Add_Proxy( 
    ToolBoxItems * This,
    /* [in] */ BSTR Name,
    /* [in] */ VARIANT Data,
    /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
    /* [retval][out] */ ToolBoxItem **pToolBoxItem);


void __RPC_STUB ToolBoxItems_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_SelectedItem_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ ToolBoxItem **pToolBoxItem);


void __RPC_STUB ToolBoxItems_get_SelectedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxItems_INTERFACE_DEFINED__ */


#ifndef __OutputWindow_INTERFACE_DEFINED__
#define __OutputWindow_INTERFACE_DEFINED__

/* interface OutputWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eab0a63d-c3a8-496e-9acf-a82cef6a43b3")
    OutputWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputWindowPanes( 
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindow * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputWindow * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputWindowPanes )( 
            OutputWindow * This,
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            OutputWindow * This,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        END_INTERFACE
    } OutputWindowVtbl;

    interface OutputWindow
    {
        CONST_VTBL struct OutputWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindow_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindow_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define OutputWindow_get_OutputWindowPanes(This,pOutputWindowPanes)	\
    (This)->lpVtbl -> get_OutputWindowPanes(This,pOutputWindowPanes)

#define OutputWindow_get_ActivePane(This,pOutputWindowPane)	\
    (This)->lpVtbl -> get_ActivePane(This,pOutputWindowPane)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_DTE_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_Parent_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB OutputWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_OutputWindowPanes_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);


void __RPC_STUB OutputWindow_get_OutputWindowPanes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_ActivePane_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindow_get_ActivePane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindow_INTERFACE_DEFINED__ */


#ifndef __OutputWindowPanes_INTERFACE_DEFINED__
#define __OutputWindowPanes_INTERFACE_DEFINED__

/* interface OutputWindowPanes */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindowPanes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b02cf62a-9470-4308-a521-9675fba395ab")
    OutputWindowPanes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ OutputWindow **pOutputWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowPanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindowPanes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindowPanes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindowPanes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindowPanes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindowPanes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindowPanes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindowPanes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindowPanes * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputWindowPanes * This,
            /* [retval][out] */ OutputWindow **pOutputWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            OutputWindowPanes * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            OutputWindowPanes * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            OutputWindowPanes * This,
            VARIANT Index,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            OutputWindowPanes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } OutputWindowPanesVtbl;

    interface OutputWindowPanes
    {
        CONST_VTBL struct OutputWindowPanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindowPanes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindowPanes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindowPanes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindowPanes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindowPanes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindowPanes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindowPanes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindowPanes_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindowPanes_get_Parent(This,pOutputWindow)	\
    (This)->lpVtbl -> get_Parent(This,pOutputWindow)

#define OutputWindowPanes_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define OutputWindowPanes_Add(This,Name,pOutputWindowPane)	\
    (This)->lpVtbl -> Add(This,Name,pOutputWindowPane)

#define OutputWindowPanes_Item(This,Index,pOutputWindowPane)	\
    (This)->lpVtbl -> Item(This,Index,pOutputWindowPane)

#define OutputWindowPanes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_DTE_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindowPanes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_Parent_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ OutputWindow **pOutputWindow);


void __RPC_STUB OutputWindowPanes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_Count_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB OutputWindowPanes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_Add_Proxy( 
    OutputWindowPanes * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindowPanes_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_Item_Proxy( 
    OutputWindowPanes * This,
    VARIANT Index,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindowPanes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes__NewEnum_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB OutputWindowPanes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindowPanes_INTERFACE_DEFINED__ */


#ifndef __OutputWindowPane_INTERFACE_DEFINED__
#define __OutputWindowPane_INTERFACE_DEFINED__

/* interface OutputWindowPane */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindowPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffc9dfc4-61ca-4b0c-83c2-0703a24f5c16")
    OutputWindowPane : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GUID( 
            /* [retval][out] */ BSTR *pGUID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputString( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ForceItemsToTaskList( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputTaskItemString( 
            /* [in] */ BSTR Text,
            /* [in] */ vsTaskPriority Priority,
            /* [in] */ BSTR SubCategory,
            /* [in] */ vsTaskIcon Icon,
            /* [in] */ BSTR FileName,
            /* [in] */ long Line,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ VARIANT_BOOL Force = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDocument( 
            /* [retval][out] */ TextDocument **pDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindowPane * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindowPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindowPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindowPane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindowPane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindowPane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindowPane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            OutputWindowPane * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindowPane * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            OutputWindowPane * This,
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            OutputWindowPane * This,
            /* [retval][out] */ BSTR *pGUID);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputString )( 
            OutputWindowPane * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ForceItemsToTaskList )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputTaskItemString )( 
            OutputWindowPane * This,
            /* [in] */ BSTR Text,
            /* [in] */ vsTaskPriority Priority,
            /* [in] */ BSTR SubCategory,
            /* [in] */ vsTaskIcon Icon,
            /* [in] */ BSTR FileName,
            /* [in] */ long Line,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ VARIANT_BOOL Force);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDocument )( 
            OutputWindowPane * This,
            /* [retval][out] */ TextDocument **pDocument);
        
        END_INTERFACE
    } OutputWindowPaneVtbl;

    interface OutputWindowPane
    {
        CONST_VTBL struct OutputWindowPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindowPane_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindowPane_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindowPane_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindowPane_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindowPane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindowPane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindowPane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindowPane_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define OutputWindowPane_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindowPane_get_Collection(This,pOutputWindowPanes)	\
    (This)->lpVtbl -> get_Collection(This,pOutputWindowPanes)

#define OutputWindowPane_get_GUID(This,pGUID)	\
    (This)->lpVtbl -> get_GUID(This,pGUID)

#define OutputWindowPane_OutputString(This,Text)	\
    (This)->lpVtbl -> OutputString(This,Text)

#define OutputWindowPane_ForceItemsToTaskList(This)	\
    (This)->lpVtbl -> ForceItemsToTaskList(This)

#define OutputWindowPane_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define OutputWindowPane_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define OutputWindowPane_OutputTaskItemString(This,Text,Priority,SubCategory,Icon,FileName,Line,Description,Force)	\
    (This)->lpVtbl -> OutputTaskItemString(This,Text,Priority,SubCategory,Icon,FileName,Line,Description,Force)

#define OutputWindowPane_get_TextDocument(This,pDocument)	\
    (This)->lpVtbl -> get_TextDocument(This,pDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_Name_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputWindowPane_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_DTE_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindowPane_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_Collection_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);


void __RPC_STUB OutputWindowPane_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_GUID_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ BSTR *pGUID);


void __RPC_STUB OutputWindowPane_get_GUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_OutputString_Proxy( 
    OutputWindowPane * This,
    /* [in] */ BSTR Text);


void __RPC_STUB OutputWindowPane_OutputString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_ForceItemsToTaskList_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_ForceItemsToTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_Activate_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_Clear_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_OutputTaskItemString_Proxy( 
    OutputWindowPane * This,
    /* [in] */ BSTR Text,
    /* [in] */ vsTaskPriority Priority,
    /* [in] */ BSTR SubCategory,
    /* [in] */ vsTaskIcon Icon,
    /* [in] */ BSTR FileName,
    /* [in] */ long Line,
    /* [in] */ BSTR Description,
    /* [defaultvalue][in] */ VARIANT_BOOL Force);


void __RPC_STUB OutputWindowPane_OutputTaskItemString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_TextDocument_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ TextDocument **pDocument);


void __RPC_STUB OutputWindowPane_get_TextDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindowPane_INTERFACE_DEFINED__ */


#ifndef __IExtensibleObjectSite_INTERFACE_DEFINED__
#define __IExtensibleObjectSite_INTERFACE_DEFINED__

/* interface IExtensibleObjectSite */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IExtensibleObjectSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eb5be8a7-e593-4de6-a923-c2afecb96336")
    IExtensibleObjectSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyDelete( 
            /* [in] */ IUnknown *punkObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtensibleObjectSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtensibleObjectSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtensibleObjectSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtensibleObjectSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyDelete )( 
            IExtensibleObjectSite * This,
            /* [in] */ IUnknown *punkObj);
        
        END_INTERFACE
    } IExtensibleObjectSiteVtbl;

    interface IExtensibleObjectSite
    {
        CONST_VTBL struct IExtensibleObjectSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtensibleObjectSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtensibleObjectSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtensibleObjectSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtensibleObjectSite_NotifyDelete(This,punkObj)	\
    (This)->lpVtbl -> NotifyDelete(This,punkObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IExtensibleObjectSite_NotifyDelete_Proxy( 
    IExtensibleObjectSite * This,
    /* [in] */ IUnknown *punkObj);


void __RPC_STUB IExtensibleObjectSite_NotifyDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtensibleObjectSite_INTERFACE_DEFINED__ */


#ifndef __Document_INTERFACE_DEFINED__
#define __Document_INTERFACE_DEFINED__

/* interface Document */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Document;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63eb5c39-ca8f-498e-9a66-6dd4a27ac95b")
    Document : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *pKind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Documents **DocumentsObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [out][retval] */ Window **pWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [out][retval] */ VARIANT_BOOL *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [out][retval] */ VARIANT_BOOL *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL bSaved) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [out][retval] */ Windows **pWindows) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [out][retval] */ ProjectItem **pRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ vsSaveChanges Save = vsSaveChangesPrompt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ Window **pWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Redo( 
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Undo( 
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue][in] */ BSTR FileName,
            /* [retval][out] */ vsSaveStatus *pStatus) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ IDispatch **SelectionObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Object( 
            /* [defaultvalue][in] */ BSTR ModelKind,
            /* [retval][out] */ IDispatch **DataModelObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Language( 
            /* [in] */ BSTR Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadOnly( 
            /* [in] */ VARIANT_BOOL bReadOnly) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ClearBookmarks( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MarkText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [out][retval] */ BSTR *pType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Document * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Document * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Document * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Document * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Document * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Document * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Document * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Document * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Document * This,
            /* [retval][out] */ BSTR *pKind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Document * This,
            /* [retval][out] */ Documents **DocumentsObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            Document * This,
            /* [out][retval] */ Window **pWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            Document * This,
            /* [out][retval] */ VARIANT_BOOL *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            Document * This,
            /* [out][retval] */ VARIANT_BOOL *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            Document * This,
            /* [in] */ VARIANT_BOOL bSaved);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            Document * This,
            /* [out][retval] */ Windows **pWindows);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            Document * This,
            /* [out][retval] */ ProjectItem **pRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Document * This,
            /* [defaultvalue][in] */ vsSaveChanges Save);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            Document * This,
            /* [retval][out] */ Window **pWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Redo )( 
            Document * This,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Undo )( 
            Document * This,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Document * This,
            /* [defaultvalue][in] */ BSTR FileName,
            /* [retval][out] */ vsSaveStatus *pStatus);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Document * This,
            /* [retval][out] */ IDispatch **SelectionObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Object )( 
            Document * This,
            /* [defaultvalue][in] */ BSTR ModelKind,
            /* [retval][out] */ IDispatch **DataModelObject);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Document * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Document * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Document * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            Document * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            Document * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Language )( 
            Document * This,
            /* [in] */ BSTR Language);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadOnly )( 
            Document * This,
            /* [in] */ VARIANT_BOOL bReadOnly);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            Document * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmarks )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MarkText )( 
            Document * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            Document * This,
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Document * This,
            /* [out][retval] */ BSTR *pType);
        
        END_INTERFACE
    } DocumentVtbl;

    interface Document
    {
        CONST_VTBL struct DocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Document_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Document_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Document_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Document_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Document_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Document_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Document_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Document_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Document_get_Kind(This,pKind)	\
    (This)->lpVtbl -> get_Kind(This,pKind)

#define Document_get_Collection(This,DocumentsObject)	\
    (This)->lpVtbl -> get_Collection(This,DocumentsObject)

#define Document_get_ActiveWindow(This,pWindow)	\
    (This)->lpVtbl -> get_ActiveWindow(This,pWindow)

#define Document_get_FullName(This,pRetval)	\
    (This)->lpVtbl -> get_FullName(This,pRetval)

#define Document_get_Name(This,pRetval)	\
    (This)->lpVtbl -> get_Name(This,pRetval)

#define Document_get_Path(This,pRetval)	\
    (This)->lpVtbl -> get_Path(This,pRetval)

#define Document_get_ReadOnly(This,pRetval)	\
    (This)->lpVtbl -> get_ReadOnly(This,pRetval)

#define Document_get_Saved(This,pRetval)	\
    (This)->lpVtbl -> get_Saved(This,pRetval)

#define Document_put_Saved(This,bSaved)	\
    (This)->lpVtbl -> put_Saved(This,bSaved)

#define Document_get_Windows(This,pWindows)	\
    (This)->lpVtbl -> get_Windows(This,pWindows)

#define Document_get_ProjectItem(This,pRetVal)	\
    (This)->lpVtbl -> get_ProjectItem(This,pRetVal)

#define Document_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define Document_Close(This,Save)	\
    (This)->lpVtbl -> Close(This,Save)

#define Document_NewWindow(This,pWindow)	\
    (This)->lpVtbl -> NewWindow(This,pWindow)

#define Document_Redo(This,pbRetVal)	\
    (This)->lpVtbl -> Redo(This,pbRetVal)

#define Document_Undo(This,pbRetVal)	\
    (This)->lpVtbl -> Undo(This,pbRetVal)

#define Document_Save(This,FileName,pStatus)	\
    (This)->lpVtbl -> Save(This,FileName,pStatus)

#define Document_get_Selection(This,SelectionObject)	\
    (This)->lpVtbl -> get_Selection(This,SelectionObject)

#define Document_Object(This,ModelKind,DataModelObject)	\
    (This)->lpVtbl -> Object(This,ModelKind,DataModelObject)

#define Document_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Document_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Document_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Document_PrintOut(This)	\
    (This)->lpVtbl -> PrintOut(This)

#define Document_get_IndentSize(This,pSize)	\
    (This)->lpVtbl -> get_IndentSize(This,pSize)

#define Document_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define Document_put_Language(This,Language)	\
    (This)->lpVtbl -> put_Language(This,Language)

#define Document_put_ReadOnly(This,bReadOnly)	\
    (This)->lpVtbl -> put_ReadOnly(This,bReadOnly)

#define Document_get_TabSize(This,pSize)	\
    (This)->lpVtbl -> get_TabSize(This,pSize)

#define Document_ClearBookmarks(This)	\
    (This)->lpVtbl -> ClearBookmarks(This)

#define Document_MarkText(This,Pattern,Flags,pbRetVal)	\
    (This)->lpVtbl -> MarkText(This,Pattern,Flags,pbRetVal)

#define Document_ReplaceText(This,FindText,ReplaceText,Flags,pbRetVal)	\
    (This)->lpVtbl -> ReplaceText(This,FindText,ReplaceText,Flags,pbRetVal)

#define Document_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_DTE_Proxy( 
    Document * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Document_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Kind_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pKind);


void __RPC_STUB Document_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Collection_Proxy( 
    Document * This,
    /* [retval][out] */ Documents **DocumentsObject);


void __RPC_STUB Document_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ActiveWindow_Proxy( 
    Document * This,
    /* [out][retval] */ Window **pWindow);


void __RPC_STUB Document_get_ActiveWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_FullName_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Name_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Path_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ReadOnly_Proxy( 
    Document * This,
    /* [out][retval] */ VARIANT_BOOL *pRetval);


void __RPC_STUB Document_get_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Saved_Proxy( 
    Document * This,
    /* [out][retval] */ VARIANT_BOOL *pRetval);


void __RPC_STUB Document_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_Saved_Proxy( 
    Document * This,
    /* [in] */ VARIANT_BOOL bSaved);


void __RPC_STUB Document_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Windows_Proxy( 
    Document * This,
    /* [out][retval] */ Windows **pWindows);


void __RPC_STUB Document_get_Windows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ProjectItem_Proxy( 
    Document * This,
    /* [out][retval] */ ProjectItem **pRetVal);


void __RPC_STUB Document_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Activate_Proxy( 
    Document * This);


void __RPC_STUB Document_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Close_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ vsSaveChanges Save);


void __RPC_STUB Document_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_NewWindow_Proxy( 
    Document * This,
    /* [retval][out] */ Window **pWindow);


void __RPC_STUB Document_NewWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Redo_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_Redo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Undo_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_Undo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Save_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ BSTR FileName,
    /* [retval][out] */ vsSaveStatus *pStatus);


void __RPC_STUB Document_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Selection_Proxy( 
    Document * This,
    /* [retval][out] */ IDispatch **SelectionObject);


void __RPC_STUB Document_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Object_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ BSTR ModelKind,
    /* [retval][out] */ IDispatch **DataModelObject);


void __RPC_STUB Document_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Extender_Proxy( 
    Document * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Document_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ExtenderNames_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Document_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ExtenderCATID_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Document_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_PrintOut_Proxy( 
    Document * This);


void __RPC_STUB Document_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_IndentSize_Proxy( 
    Document * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB Document_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Language_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB Document_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_Language_Proxy( 
    Document * This,
    /* [in] */ BSTR Language);


void __RPC_STUB Document_put_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_ReadOnly_Proxy( 
    Document * This,
    /* [in] */ VARIANT_BOOL bReadOnly);


void __RPC_STUB Document_put_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_TabSize_Proxy( 
    Document * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB Document_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_ClearBookmarks_Proxy( 
    Document * This);


void __RPC_STUB Document_ClearBookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_MarkText_Proxy( 
    Document * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_MarkText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_ReplaceText_Proxy( 
    Document * This,
    /* [in] */ BSTR FindText,
    /* [in] */ BSTR ReplaceText,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_get_Type_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pType);


void __RPC_STUB Document_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Document_INTERFACE_DEFINED__ */


#ifndef __Documents_INTERFACE_DEFINED__
#define __Documents_INTERFACE_DEFINED__

/* interface Documents */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Documents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9e2cf3ea-140f-413e-bd4b-7d46740cd2f4")
    Documents : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Document **DocumentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *CountOfDocuments) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Kind,
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloseAll( 
            /* [defaultvalue][in] */ vsSaveChanges Save = vsSaveChangesPrompt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( void) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE Open( 
            BSTR PathName,
            /* [defaultvalue] */ BSTR Kind,
            /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
            /* [retval][out] */ Document **ppDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Documents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Documents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Documents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Documents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Documents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Documents * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Documents * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Documents * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Documents * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Document **DocumentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Documents * This,
            /* [retval][out] */ long *CountOfDocuments);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Documents * This,
            /* [in] */ BSTR Kind,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloseAll )( 
            Documents * This,
            /* [defaultvalue][in] */ vsSaveChanges Save);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            Documents * This);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Documents * This,
            BSTR PathName,
            /* [defaultvalue] */ BSTR Kind,
            /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
            /* [retval][out] */ Document **ppDocument);
        
        END_INTERFACE
    } DocumentsVtbl;

    interface Documents
    {
        CONST_VTBL struct DocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Documents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Documents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Documents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Documents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Documents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Documents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Documents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Documents_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Documents_get_Parent(This,DTEObject)	\
    (This)->lpVtbl -> get_Parent(This,DTEObject)

#define Documents__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Documents_Item(This,index,DocumentObject)	\
    (This)->lpVtbl -> Item(This,index,DocumentObject)

#define Documents_get_Count(This,CountOfDocuments)	\
    (This)->lpVtbl -> get_Count(This,CountOfDocuments)

#define Documents_Add(This,Kind,ppDocument)	\
    (This)->lpVtbl -> Add(This,Kind,ppDocument)

#define Documents_CloseAll(This,Save)	\
    (This)->lpVtbl -> CloseAll(This,Save)

#define Documents_SaveAll(This)	\
    (This)->lpVtbl -> SaveAll(This)

#define Documents_Open(This,PathName,Kind,ReadOnly,ppDocument)	\
    (This)->lpVtbl -> Open(This,PathName,Kind,ReadOnly,ppDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_DTE_Proxy( 
    Documents * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Documents_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_Parent_Proxy( 
    Documents * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Documents_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Documents__NewEnum_Proxy( 
    Documents * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Documents__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_Item_Proxy( 
    Documents * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Document **DocumentObject);


void __RPC_STUB Documents_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_Count_Proxy( 
    Documents * This,
    /* [retval][out] */ long *CountOfDocuments);


void __RPC_STUB Documents_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_Add_Proxy( 
    Documents * This,
    /* [in] */ BSTR Kind,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Documents_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_CloseAll_Proxy( 
    Documents * This,
    /* [defaultvalue][in] */ vsSaveChanges Save);


void __RPC_STUB Documents_CloseAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_SaveAll_Proxy( 
    Documents * This);


void __RPC_STUB Documents_SaveAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id] */ HRESULT STDMETHODCALLTYPE Documents_Open_Proxy( 
    Documents * This,
    BSTR PathName,
    /* [defaultvalue] */ BSTR Kind,
    /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Documents_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Documents_INTERFACE_DEFINED__ */


#ifndef __WindowConfigurations_INTERFACE_DEFINED__
#define __WindowConfigurations_INTERFACE_DEFINED__

/* interface WindowConfigurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_WindowConfigurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e577442a-98e1-46c5-bd2e-d25807ec81ce")
    WindowConfigurations : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **ppEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfigurationName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowConfigurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowConfigurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowConfigurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowConfigurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowConfigurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowConfigurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowConfigurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            WindowConfigurations * This,
            /* [retval][out] */ IUnknown **ppEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            WindowConfigurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            WindowConfigurations * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowConfigurations * This,
            /* [retval][out] */ DTE	**pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            WindowConfigurations * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            WindowConfigurations * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfigurationName )( 
            WindowConfigurations * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } WindowConfigurationsVtbl;

    interface WindowConfigurations
    {
        CONST_VTBL struct WindowConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowConfigurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define WindowConfigurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define WindowConfigurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define WindowConfigurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define WindowConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define WindowConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define WindowConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define WindowConfigurations__NewEnum(This,ppEnum)	\
    (This)->lpVtbl -> _NewEnum(This,ppEnum)

#define WindowConfigurations_Item(This,Index,pWindowConfiguration)	\
    (This)->lpVtbl -> Item(This,Index,pWindowConfiguration)

#define WindowConfigurations_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define WindowConfigurations_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define WindowConfigurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define WindowConfigurations_Add(This,Name,pWindowConfiguration)	\
    (This)->lpVtbl -> Add(This,Name,pWindowConfiguration)

#define WindowConfigurations_get_ActiveConfigurationName(This,pbstrName)	\
    (This)->lpVtbl -> get_ActiveConfigurationName(This,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations__NewEnum_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ IUnknown **ppEnum);


void __RPC_STUB WindowConfigurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_Item_Proxy( 
    WindowConfigurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ WindowConfiguration **pWindowConfiguration);


void __RPC_STUB WindowConfigurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_DTE_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB WindowConfigurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_Parent_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ DTE	**pParent);


void __RPC_STUB WindowConfigurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_Count_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB WindowConfigurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_Add_Proxy( 
    WindowConfigurations * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ WindowConfiguration **pWindowConfiguration);


void __RPC_STUB WindowConfigurations_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_ActiveConfigurationName_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB WindowConfigurations_get_ActiveConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __WindowConfigurations_INTERFACE_DEFINED__ */


#ifndef __WindowConfiguration_INTERFACE_DEFINED__
#define __WindowConfiguration_INTERFACE_DEFINED__

/* interface WindowConfiguration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_WindowConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41d02413-8a67-4c28-a980-ad7539ed415d")
    WindowConfiguration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ WindowConfigurations **pWindowConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( 
            /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowConfiguration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowConfiguration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowConfiguration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowConfiguration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowConfiguration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            WindowConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            WindowConfiguration * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            WindowConfiguration * This,
            /* [retval][out] */ WindowConfigurations **pWindowConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            WindowConfiguration * This,
            /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            WindowConfiguration * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            WindowConfiguration * This);
        
        END_INTERFACE
    } WindowConfigurationVtbl;

    interface WindowConfiguration
    {
        CONST_VTBL struct WindowConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowConfiguration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define WindowConfiguration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define WindowConfiguration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define WindowConfiguration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define WindowConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define WindowConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define WindowConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define WindowConfiguration_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define WindowConfiguration_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define WindowConfiguration_get_Collection(This,pWindowConfigurations)	\
    (This)->lpVtbl -> get_Collection(This,pWindowConfigurations)

#define WindowConfiguration_Apply(This,FromCustomViews)	\
    (This)->lpVtbl -> Apply(This,FromCustomViews)

#define WindowConfiguration_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define WindowConfiguration_Update(This)	\
    (This)->lpVtbl -> Update(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_Name_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB WindowConfiguration_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_DTE_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB WindowConfiguration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_Collection_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ WindowConfigurations **pWindowConfigurations);


void __RPC_STUB WindowConfiguration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Apply_Proxy( 
    WindowConfiguration * This,
    /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews);


void __RPC_STUB WindowConfiguration_Apply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Delete_Proxy( 
    WindowConfiguration * This);


void __RPC_STUB WindowConfiguration_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Update_Proxy( 
    WindowConfiguration * This);


void __RPC_STUB WindowConfiguration_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __WindowConfiguration_INTERFACE_DEFINED__ */


#ifndef __Command_INTERFACE_DEFINED__
#define __Command_INTERFACE_DEFINED__

/* interface Command */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Command;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5fe10fb0-91a1-4e55-baaa-eccae5cceb94")
    Command : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Commands **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GUID( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *lReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAvailable( 
            /* [retval][out] */ VARIANT_BOOL *pAvail) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddControl( 
            /* [in] */ IDispatch *Owner,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pCommandBarControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bindings( 
            /* [retval][out] */ VARIANT *pVar) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bindings( 
            VARIANT Bindings) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LocalizedName( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Command * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Command * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Command * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Command * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Command * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Command * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Command * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Command * This,
            /* [retval][out] */ Commands **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Command * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Command * This,
            /* [retval][out] */ long *lReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAvailable )( 
            Command * This,
            /* [retval][out] */ VARIANT_BOOL *pAvail);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddControl )( 
            Command * This,
            /* [in] */ IDispatch *Owner,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pCommandBarControl);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Command * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bindings )( 
            Command * This,
            /* [retval][out] */ VARIANT *pVar);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bindings )( 
            Command * This,
            VARIANT Bindings);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocalizedName )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        END_INTERFACE
    } CommandVtbl;

    interface Command
    {
        CONST_VTBL struct CommandVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Command_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Command_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Command_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Command_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Command_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Command_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Command_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Command_get_Name(This,lpbstr)	\
    (This)->lpVtbl -> get_Name(This,lpbstr)

#define Command_get_Collection(This,lppcReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppcReturn)

#define Command_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Command_get_GUID(This,lpbstr)	\
    (This)->lpVtbl -> get_GUID(This,lpbstr)

#define Command_get_ID(This,lReturn)	\
    (This)->lpVtbl -> get_ID(This,lReturn)

#define Command_get_IsAvailable(This,pAvail)	\
    (This)->lpVtbl -> get_IsAvailable(This,pAvail)

#define Command_AddControl(This,Owner,Position,pCommandBarControl)	\
    (This)->lpVtbl -> AddControl(This,Owner,Position,pCommandBarControl)

#define Command_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define Command_get_Bindings(This,pVar)	\
    (This)->lpVtbl -> get_Bindings(This,pVar)

#define Command_put_Bindings(This,Bindings)	\
    (This)->lpVtbl -> put_Bindings(This,Bindings)

#define Command_get_LocalizedName(This,lpbstr)	\
    (This)->lpVtbl -> get_LocalizedName(This,lpbstr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Name_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Collection_Proxy( 
    Command * This,
    /* [retval][out] */ Commands **lppcReturn);


void __RPC_STUB Command_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_DTE_Proxy( 
    Command * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Command_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_GUID_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_GUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_ID_Proxy( 
    Command * This,
    /* [retval][out] */ long *lReturn);


void __RPC_STUB Command_get_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_IsAvailable_Proxy( 
    Command * This,
    /* [retval][out] */ VARIANT_BOOL *pAvail);


void __RPC_STUB Command_get_IsAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Command_AddControl_Proxy( 
    Command * This,
    /* [in] */ IDispatch *Owner,
    /* [defaultvalue][in] */ long Position,
    /* [retval][out] */ IDispatch **pCommandBarControl);


void __RPC_STUB Command_AddControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Command_Delete_Proxy( 
    Command * This);


void __RPC_STUB Command_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Bindings_Proxy( 
    Command * This,
    /* [retval][out] */ VARIANT *pVar);


void __RPC_STUB Command_get_Bindings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Command_put_Bindings_Proxy( 
    Command * This,
    VARIANT Bindings);


void __RPC_STUB Command_put_Bindings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_LocalizedName_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_LocalizedName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Command_INTERFACE_DEFINED__ */


#ifndef __Globals_INTERFACE_DEFINED__
#define __Globals_INTERFACE_DEFINED__

/* interface Globals */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Globals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e68a3e0e-b435-4dde-86b7-f5adefc19df2")
    Globals : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableValue( 
            BSTR VariableName,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VariableValue( 
            BSTR VariableName,
            /* [in] */ VARIANT newVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VariablePersists( 
            BSTR VariableName,
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariablePersists( 
            BSTR VariableName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableExists( 
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableNames( 
            /* [retval][out] */ VARIANT *Names) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Globals * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Globals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Globals * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Globals * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Globals * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Globals * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Globals * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Globals * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Globals * This,
            /* [retval][out] */ IDispatch **pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableValue )( 
            Globals * This,
            BSTR VariableName,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VariableValue )( 
            Globals * This,
            BSTR VariableName,
            /* [in] */ VARIANT newVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VariablePersists )( 
            Globals * This,
            BSTR VariableName,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariablePersists )( 
            Globals * This,
            BSTR VariableName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableExists )( 
            Globals * This,
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableNames )( 
            Globals * This,
            /* [retval][out] */ VARIANT *Names);
        
        END_INTERFACE
    } GlobalsVtbl;

    interface Globals
    {
        CONST_VTBL struct GlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Globals_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Globals_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Globals_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Globals_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Globals_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Globals_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Globals_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Globals_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define Globals_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define Globals_get_VariableValue(This,VariableName,pVal)	\
    (This)->lpVtbl -> get_VariableValue(This,VariableName,pVal)

#define Globals_put_VariableValue(This,VariableName,newVal)	\
    (This)->lpVtbl -> put_VariableValue(This,VariableName,newVal)

#define Globals_put_VariablePersists(This,VariableName,pVal)	\
    (This)->lpVtbl -> put_VariablePersists(This,VariableName,pVal)

#define Globals_get_VariablePersists(This,VariableName,pVal)	\
    (This)->lpVtbl -> get_VariablePersists(This,VariableName,pVal)

#define Globals_get_VariableExists(This,Name,pVal)	\
    (This)->lpVtbl -> get_VariableExists(This,Name,pVal)

#define Globals_get_VariableNames(This,Names)	\
    (This)->lpVtbl -> get_VariableNames(This,Names)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_DTE_Proxy( 
    Globals * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Globals_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_Parent_Proxy( 
    Globals * This,
    /* [retval][out] */ IDispatch **pDTE);


void __RPC_STUB Globals_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableValue_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB Globals_get_VariableValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Globals_put_VariableValue_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [in] */ VARIANT newVal);


void __RPC_STUB Globals_put_VariableValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Globals_put_VariablePersists_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB Globals_put_VariablePersists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariablePersists_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB Globals_get_VariablePersists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableExists_Proxy( 
    Globals * This,
    BSTR Name,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB Globals_get_VariableExists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableNames_Proxy( 
    Globals * This,
    /* [retval][out] */ VARIANT *Names);


void __RPC_STUB Globals_get_VariableNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Globals_INTERFACE_DEFINED__ */


#ifndef __StatusBar_INTERFACE_DEFINED__
#define __StatusBar_INTERFACE_DEFINED__

/* interface StatusBar */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_StatusBar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c34301a1-3ef1-41d8-932a-fea4a8a8ce0c")
    StatusBar : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Animate( 
            VARIANT_BOOL On,
            VARIANT AnimationType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Progress( 
            VARIANT_BOOL InProgress,
            /* [defaultvalue][in] */ BSTR Label = L"",
            /* [defaultvalue][in] */ long AmountCompleted = 0,
            /* [defaultvalue][in] */ long Total = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetXYWidthHeight( 
            long X,
            long Y,
            long Width,
            long Height) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLineColumnCharacter( 
            long Line,
            long Column,
            long Character) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *pTextc) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Highlight( 
            VARIANT_BOOL Highlight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowTextUpdates( 
            VARIANT_BOOL TextUpdates,
            /* [retval][out] */ VARIANT_BOOL *WillShowUpdates) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StatusBarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StatusBar * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StatusBar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StatusBar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StatusBar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StatusBar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StatusBar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StatusBar * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StatusBar * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StatusBar * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            StatusBar * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Animate )( 
            StatusBar * This,
            VARIANT_BOOL On,
            VARIANT AnimationType);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Progress )( 
            StatusBar * This,
            VARIANT_BOOL InProgress,
            /* [defaultvalue][in] */ BSTR Label,
            /* [defaultvalue][in] */ long AmountCompleted,
            /* [defaultvalue][in] */ long Total);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetXYWidthHeight )( 
            StatusBar * This,
            long X,
            long Y,
            long Width,
            long Height);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLineColumnCharacter )( 
            StatusBar * This,
            long Line,
            long Column,
            long Character);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            StatusBar * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            StatusBar * This,
            /* [retval][out] */ BSTR *pTextc);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            StatusBar * This,
            VARIANT_BOOL Highlight);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowTextUpdates )( 
            StatusBar * This,
            VARIANT_BOOL TextUpdates,
            /* [retval][out] */ VARIANT_BOOL *WillShowUpdates);
        
        END_INTERFACE
    } StatusBarVtbl;

    interface StatusBar
    {
        CONST_VTBL struct StatusBarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StatusBar_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StatusBar_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StatusBar_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StatusBar_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StatusBar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StatusBar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StatusBar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StatusBar_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define StatusBar_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define StatusBar_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define StatusBar_Animate(This,On,AnimationType)	\
    (This)->lpVtbl -> Animate(This,On,AnimationType)

#define StatusBar_Progress(This,InProgress,Label,AmountCompleted,Total)	\
    (This)->lpVtbl -> Progress(This,InProgress,Label,AmountCompleted,Total)

#define StatusBar_SetXYWidthHeight(This,X,Y,Width,Height)	\
    (This)->lpVtbl -> SetXYWidthHeight(This,X,Y,Width,Height)

#define StatusBar_SetLineColumnCharacter(This,Line,Column,Character)	\
    (This)->lpVtbl -> SetLineColumnCharacter(This,Line,Column,Character)

#define StatusBar_put_Text(This,Text)	\
    (This)->lpVtbl -> put_Text(This,Text)

#define StatusBar_get_Text(This,pTextc)	\
    (This)->lpVtbl -> get_Text(This,pTextc)

#define StatusBar_Highlight(This,Highlight)	\
    (This)->lpVtbl -> Highlight(This,Highlight)

#define StatusBar_ShowTextUpdates(This,TextUpdates,WillShowUpdates)	\
    (This)->lpVtbl -> ShowTextUpdates(This,TextUpdates,WillShowUpdates)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_DTE_Proxy( 
    StatusBar * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB StatusBar_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_Parent_Proxy( 
    StatusBar * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB StatusBar_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Clear_Proxy( 
    StatusBar * This);


void __RPC_STUB StatusBar_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Animate_Proxy( 
    StatusBar * This,
    VARIANT_BOOL On,
    VARIANT AnimationType);


void __RPC_STUB StatusBar_Animate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Progress_Proxy( 
    StatusBar * This,
    VARIANT_BOOL InProgress,
    /* [defaultvalue][in] */ BSTR Label,
    /* [defaultvalue][in] */ long AmountCompleted,
    /* [defaultvalue][in] */ long Total);


void __RPC_STUB StatusBar_Progress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_SetXYWidthHeight_Proxy( 
    StatusBar * This,
    long X,
    long Y,
    long Width,
    long Height);


void __RPC_STUB StatusBar_SetXYWidthHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_SetLineColumnCharacter_Proxy( 
    StatusBar * This,
    long Line,
    long Column,
    long Character);


void __RPC_STUB StatusBar_SetLineColumnCharacter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE StatusBar_put_Text_Proxy( 
    StatusBar * This,
    /* [in] */ BSTR Text);


void __RPC_STUB StatusBar_put_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_Text_Proxy( 
    StatusBar * This,
    /* [retval][out] */ BSTR *pTextc);


void __RPC_STUB StatusBar_get_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Highlight_Proxy( 
    StatusBar * This,
    VARIANT_BOOL Highlight);


void __RPC_STUB StatusBar_Highlight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_ShowTextUpdates_Proxy( 
    StatusBar * This,
    VARIANT_BOOL TextUpdates,
    /* [retval][out] */ VARIANT_BOOL *WillShowUpdates);


void __RPC_STUB StatusBar_ShowTextUpdates_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StatusBar_INTERFACE_DEFINED__ */


#ifndef __Find_INTERFACE_DEFINED__
#define __Find_INTERFACE_DEFINED__

/* interface Find */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Find;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40d4b9b6-739b-4965-8d65-692aec692266")
    Find : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Action( 
            /* [retval][out] */ vsFindAction *pAction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Action( 
            /* [in] */ vsFindAction Action) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindWhat( 
            /* [retval][out] */ BSTR *pFindWhat) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindWhat( 
            /* [in] */ BSTR FindWhat) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchCase( 
            /* [retval][out] */ VARIANT_BOOL *pMatchCase) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchCase( 
            /* [in] */ VARIANT_BOOL MatchCase) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchWholeWord( 
            /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchWholeWord( 
            /* [in] */ VARIANT_BOOL MatchWholeWord) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchInHiddenText( 
            /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchInHiddenText( 
            /* [in] */ VARIANT_BOOL MatchInHiddenText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backwards( 
            /* [retval][out] */ VARIANT_BOOL *pBackwards) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backwards( 
            /* [in] */ VARIANT_BOOL Backwards) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchSubfolders( 
            /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchSubfolders( 
            /* [in] */ VARIANT_BOOL SearchSubfolders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepModifiedDocumentsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepModifiedDocumentsOpen( 
            /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternSyntax( 
            /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternSyntax( 
            /* [in] */ vsFindPatternSyntax PatternSyntax) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplaceWith( 
            /* [retval][out] */ BSTR *pReplaceWith) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplaceWith( 
            /* [in] */ BSTR ReplaceWith) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ vsFindTarget *pTarget) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ vsFindTarget Target) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchPath( 
            /* [retval][out] */ BSTR *pSearchPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchPath( 
            /* [in] */ BSTR SearchPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FilesOfType( 
            /* [retval][out] */ BSTR *pFilesOfType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FilesOfType( 
            /* [in] */ BSTR FilesOfType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultsLocation( 
            /* [retval][out] */ vsFindResultsLocation *pResultsLocation) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResultsLocation( 
            /* [in] */ vsFindResultsLocation ResultsLocation) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [retval][out] */ vsFindResult *pResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindReplace( 
            /* [in] */ vsFindAction Action,
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][in] */ BSTR ReplaceWith,
            /* [defaultvalue][in] */ vsFindTarget Target,
            /* [defaultvalue][in] */ BSTR SearchPath,
            /* [defaultvalue][in] */ BSTR FilesOfType,
            /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
            /* [retval][out] */ vsFindResult *pResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FindVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Find * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Find * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Find * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Find * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Find * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Find * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Find * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Action )( 
            Find * This,
            /* [retval][out] */ vsFindAction *pAction);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Action )( 
            Find * This,
            /* [in] */ vsFindAction Action);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindWhat )( 
            Find * This,
            /* [retval][out] */ BSTR *pFindWhat);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindWhat )( 
            Find * This,
            /* [in] */ BSTR FindWhat);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchCase )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchCase);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchCase )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchCase);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchWholeWord )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchWholeWord )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchWholeWord);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchInHiddenText )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchInHiddenText )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchInHiddenText);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backwards )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pBackwards);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backwards )( 
            Find * This,
            /* [in] */ VARIANT_BOOL Backwards);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchSubfolders )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchSubfolders )( 
            Find * This,
            /* [in] */ VARIANT_BOOL SearchSubfolders);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepModifiedDocumentsOpen )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepModifiedDocumentsOpen )( 
            Find * This,
            /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternSyntax )( 
            Find * This,
            /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternSyntax )( 
            Find * This,
            /* [in] */ vsFindPatternSyntax PatternSyntax);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceWith )( 
            Find * This,
            /* [retval][out] */ BSTR *pReplaceWith);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceWith )( 
            Find * This,
            /* [in] */ BSTR ReplaceWith);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            Find * This,
            /* [retval][out] */ vsFindTarget *pTarget);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            Find * This,
            /* [in] */ vsFindTarget Target);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchPath )( 
            Find * This,
            /* [retval][out] */ BSTR *pSearchPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchPath )( 
            Find * This,
            /* [in] */ BSTR SearchPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FilesOfType )( 
            Find * This,
            /* [retval][out] */ BSTR *pFilesOfType);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FilesOfType )( 
            Find * This,
            /* [in] */ BSTR FilesOfType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultsLocation )( 
            Find * This,
            /* [retval][out] */ vsFindResultsLocation *pResultsLocation);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultsLocation )( 
            Find * This,
            /* [in] */ vsFindResultsLocation ResultsLocation);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            Find * This,
            /* [retval][out] */ vsFindResult *pResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindReplace )( 
            Find * This,
            /* [in] */ vsFindAction Action,
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][in] */ BSTR ReplaceWith,
            /* [defaultvalue][in] */ vsFindTarget Target,
            /* [defaultvalue][in] */ BSTR SearchPath,
            /* [defaultvalue][in] */ BSTR FilesOfType,
            /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
            /* [retval][out] */ vsFindResult *pResult);
        
        END_INTERFACE
    } FindVtbl;

    interface Find
    {
        CONST_VTBL struct FindVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Find_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Find_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Find_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Find_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Find_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Find_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Find_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Find_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Find_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Find_get_Action(This,pAction)	\
    (This)->lpVtbl -> get_Action(This,pAction)

#define Find_put_Action(This,Action)	\
    (This)->lpVtbl -> put_Action(This,Action)

#define Find_get_FindWhat(This,pFindWhat)	\
    (This)->lpVtbl -> get_FindWhat(This,pFindWhat)

#define Find_put_FindWhat(This,FindWhat)	\
    (This)->lpVtbl -> put_FindWhat(This,FindWhat)

#define Find_get_MatchCase(This,pMatchCase)	\
    (This)->lpVtbl -> get_MatchCase(This,pMatchCase)

#define Find_put_MatchCase(This,MatchCase)	\
    (This)->lpVtbl -> put_MatchCase(This,MatchCase)

#define Find_get_MatchWholeWord(This,pMatchWholeWord)	\
    (This)->lpVtbl -> get_MatchWholeWord(This,pMatchWholeWord)

#define Find_put_MatchWholeWord(This,MatchWholeWord)	\
    (This)->lpVtbl -> put_MatchWholeWord(This,MatchWholeWord)

#define Find_get_MatchInHiddenText(This,pMatchInHiddenText)	\
    (This)->lpVtbl -> get_MatchInHiddenText(This,pMatchInHiddenText)

#define Find_put_MatchInHiddenText(This,MatchInHiddenText)	\
    (This)->lpVtbl -> put_MatchInHiddenText(This,MatchInHiddenText)

#define Find_get_Backwards(This,pBackwards)	\
    (This)->lpVtbl -> get_Backwards(This,pBackwards)

#define Find_put_Backwards(This,Backwards)	\
    (This)->lpVtbl -> put_Backwards(This,Backwards)

#define Find_get_SearchSubfolders(This,pSearchSubfolders)	\
    (This)->lpVtbl -> get_SearchSubfolders(This,pSearchSubfolders)

#define Find_put_SearchSubfolders(This,SearchSubfolders)	\
    (This)->lpVtbl -> put_SearchSubfolders(This,SearchSubfolders)

#define Find_get_KeepModifiedDocumentsOpen(This,pKeepModifiedDocumentsOpen)	\
    (This)->lpVtbl -> get_KeepModifiedDocumentsOpen(This,pKeepModifiedDocumentsOpen)

#define Find_put_KeepModifiedDocumentsOpen(This,KeepModifiedDocumentsOpen)	\
    (This)->lpVtbl -> put_KeepModifiedDocumentsOpen(This,KeepModifiedDocumentsOpen)

#define Find_get_PatternSyntax(This,pPatternSyntax)	\
    (This)->lpVtbl -> get_PatternSyntax(This,pPatternSyntax)

#define Find_put_PatternSyntax(This,PatternSyntax)	\
    (This)->lpVtbl -> put_PatternSyntax(This,PatternSyntax)

#define Find_get_ReplaceWith(This,pReplaceWith)	\
    (This)->lpVtbl -> get_ReplaceWith(This,pReplaceWith)

#define Find_put_ReplaceWith(This,ReplaceWith)	\
    (This)->lpVtbl -> put_ReplaceWith(This,ReplaceWith)

#define Find_get_Target(This,pTarget)	\
    (This)->lpVtbl -> get_Target(This,pTarget)

#define Find_put_Target(This,Target)	\
    (This)->lpVtbl -> put_Target(This,Target)

#define Find_get_SearchPath(This,pSearchPath)	\
    (This)->lpVtbl -> get_SearchPath(This,pSearchPath)

#define Find_put_SearchPath(This,SearchPath)	\
    (This)->lpVtbl -> put_SearchPath(This,SearchPath)

#define Find_get_FilesOfType(This,pFilesOfType)	\
    (This)->lpVtbl -> get_FilesOfType(This,pFilesOfType)

#define Find_put_FilesOfType(This,FilesOfType)	\
    (This)->lpVtbl -> put_FilesOfType(This,FilesOfType)

#define Find_get_ResultsLocation(This,pResultsLocation)	\
    (This)->lpVtbl -> get_ResultsLocation(This,pResultsLocation)

#define Find_put_ResultsLocation(This,ResultsLocation)	\
    (This)->lpVtbl -> put_ResultsLocation(This,ResultsLocation)

#define Find_Execute(This,pResult)	\
    (This)->lpVtbl -> Execute(This,pResult)

#define Find_FindReplace(This,Action,FindWhat,vsFindOptionsValue,ReplaceWith,Target,SearchPath,FilesOfType,ResultsLocation,pResult)	\
    (This)->lpVtbl -> FindReplace(This,Action,FindWhat,vsFindOptionsValue,ReplaceWith,Target,SearchPath,FilesOfType,ResultsLocation,pResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_DTE_Proxy( 
    Find * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Find_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Parent_Proxy( 
    Find * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Find_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Action_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindAction *pAction);


void __RPC_STUB Find_get_Action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Action_Proxy( 
    Find * This,
    /* [in] */ vsFindAction Action);


void __RPC_STUB Find_put_Action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_FindWhat_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pFindWhat);


void __RPC_STUB Find_get_FindWhat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_FindWhat_Proxy( 
    Find * This,
    /* [in] */ BSTR FindWhat);


void __RPC_STUB Find_put_FindWhat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchCase_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchCase);


void __RPC_STUB Find_get_MatchCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchCase_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchCase);


void __RPC_STUB Find_put_MatchCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchWholeWord_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord);


void __RPC_STUB Find_get_MatchWholeWord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchWholeWord_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchWholeWord);


void __RPC_STUB Find_put_MatchWholeWord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchInHiddenText_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText);


void __RPC_STUB Find_get_MatchInHiddenText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchInHiddenText_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchInHiddenText);


void __RPC_STUB Find_put_MatchInHiddenText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Backwards_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pBackwards);


void __RPC_STUB Find_get_Backwards_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Backwards_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL Backwards);


void __RPC_STUB Find_put_Backwards_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_SearchSubfolders_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders);


void __RPC_STUB Find_get_SearchSubfolders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_SearchSubfolders_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL SearchSubfolders);


void __RPC_STUB Find_put_SearchSubfolders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_KeepModifiedDocumentsOpen_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen);


void __RPC_STUB Find_get_KeepModifiedDocumentsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_KeepModifiedDocumentsOpen_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen);


void __RPC_STUB Find_put_KeepModifiedDocumentsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_PatternSyntax_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax);


void __RPC_STUB Find_get_PatternSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_PatternSyntax_Proxy( 
    Find * This,
    /* [in] */ vsFindPatternSyntax PatternSyntax);


void __RPC_STUB Find_put_PatternSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_ReplaceWith_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pReplaceWith);


void __RPC_STUB Find_get_ReplaceWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_ReplaceWith_Proxy( 
    Find * This,
    /* [in] */ BSTR ReplaceWith);


void __RPC_STUB Find_put_ReplaceWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Target_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindTarget *pTarget);


void __RPC_STUB Find_get_Target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Target_Proxy( 
    Find * This,
    /* [in] */ vsFindTarget Target);


void __RPC_STUB Find_put_Target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_SearchPath_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pSearchPath);


void __RPC_STUB Find_get_SearchPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_SearchPath_Proxy( 
    Find * This,
    /* [in] */ BSTR SearchPath);


void __RPC_STUB Find_put_SearchPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_FilesOfType_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pFilesOfType);


void __RPC_STUB Find_get_FilesOfType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_FilesOfType_Proxy( 
    Find * This,
    /* [in] */ BSTR FilesOfType);


void __RPC_STUB Find_put_FilesOfType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_ResultsLocation_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindResultsLocation *pResultsLocation);


void __RPC_STUB Find_get_ResultsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_ResultsLocation_Proxy( 
    Find * This,
    /* [in] */ vsFindResultsLocation ResultsLocation);


void __RPC_STUB Find_put_ResultsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find_Execute_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindResult *pResult);


void __RPC_STUB Find_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find_FindReplace_Proxy( 
    Find * This,
    /* [in] */ vsFindAction Action,
    /* [in] */ BSTR FindWhat,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][in] */ BSTR ReplaceWith,
    /* [defaultvalue][in] */ vsFindTarget Target,
    /* [defaultvalue][in] */ BSTR SearchPath,
    /* [defaultvalue][in] */ BSTR FilesOfType,
    /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
    /* [retval][out] */ vsFindResult *pResult);


void __RPC_STUB Find_FindReplace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Find_INTERFACE_DEFINED__ */


#ifndef __ItemOperations_INTERFACE_DEFINED__
#define __ItemOperations_INTERFACE_DEFINED__

/* interface ItemOperations */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_ItemOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5dbe57b-c074-4e95-b015-abeeaa391693")
    ItemOperations : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewFile( 
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsFileOpen( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *pfRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddExistingItem( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **ProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNewItem( 
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **ProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Navigate( 
            /* [defaultvalue][in] */ BSTR URL,
            /* [defaultvalue][in] */ vsNavigateOptions Options,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PromptToSave( 
            /* [retval][out] */ vsPromptResult *Saved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ItemOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ItemOperations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ItemOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ItemOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ItemOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ItemOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ItemOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ItemOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ItemOperations * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ItemOperations * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenFile )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewFile )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsFileOpen )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *pfRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddExistingItem )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **ProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNewItem )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **ProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Navigate )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR URL,
            /* [defaultvalue][in] */ vsNavigateOptions Options,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PromptToSave )( 
            ItemOperations * This,
            /* [retval][out] */ vsPromptResult *Saved);
        
        END_INTERFACE
    } ItemOperationsVtbl;

    interface ItemOperations
    {
        CONST_VTBL struct ItemOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ItemOperations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ItemOperations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ItemOperations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ItemOperations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ItemOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ItemOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ItemOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ItemOperations_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ItemOperations_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ItemOperations_OpenFile(This,FileName,ViewKind,Window)	\
    (This)->lpVtbl -> OpenFile(This,FileName,ViewKind,Window)

#define ItemOperations_NewFile(This,Item,Name,ViewKind,Window)	\
    (This)->lpVtbl -> NewFile(This,Item,Name,ViewKind,Window)

#define ItemOperations_IsFileOpen(This,FileName,ViewKind,pfRetval)	\
    (This)->lpVtbl -> IsFileOpen(This,FileName,ViewKind,pfRetval)

#define ItemOperations_AddExistingItem(This,FileName,ProjectItem)	\
    (This)->lpVtbl -> AddExistingItem(This,FileName,ProjectItem)

#define ItemOperations_AddNewItem(This,Item,Name,ProjectItem)	\
    (This)->lpVtbl -> AddNewItem(This,Item,Name,ProjectItem)

#define ItemOperations_Navigate(This,URL,Options,Window)	\
    (This)->lpVtbl -> Navigate(This,URL,Options,Window)

#define ItemOperations_get_PromptToSave(This,Saved)	\
    (This)->lpVtbl -> get_PromptToSave(This,Saved)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_DTE_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ItemOperations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_Parent_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ItemOperations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_OpenFile_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_OpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_NewFile_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR Item,
    /* [defaultvalue][in] */ BSTR Name,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_NewFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_IsFileOpen_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ VARIANT_BOOL *pfRetval);


void __RPC_STUB ItemOperations_IsFileOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_AddExistingItem_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ ProjectItem **ProjectItem);


void __RPC_STUB ItemOperations_AddExistingItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_AddNewItem_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR Item,
    /* [defaultvalue][in] */ BSTR Name,
    /* [retval][out] */ ProjectItem **ProjectItem);


void __RPC_STUB ItemOperations_AddNewItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_Navigate_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR URL,
    /* [defaultvalue][in] */ vsNavigateOptions Options,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_Navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_PromptToSave_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ vsPromptResult *Saved);


void __RPC_STUB ItemOperations_get_PromptToSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ItemOperations_INTERFACE_DEFINED__ */


#ifndef __IVsProfferCommands_INTERFACE_DEFINED__
#define __IVsProfferCommands_INTERFACE_DEFINED__

/* interface IVsProfferCommands */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IVsProfferCommands;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8cc0cde1-c16a-4749-99af-6f7523c34a57")
    IVsProfferCommands : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddNamedCommand( 
            /* [in] */ const GUID *pguidPackage,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [out] */ DWORD *pdwCmdId,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
            /* [string][in] */ const LPCOLESTR pszBtnText,
            /* [string][in] */ const LPCOLESTR pszCmdTooltip,
            /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
            /* [in] */ DWORD dwBitmapResourceId,
            /* [in] */ DWORD dwBitmapImageIndex,
            /* [in] */ DWORD dwCmdFlagsDefault,
            /* [in] */ DWORD cUIContexts,
            /* [size_is][in] */ const GUID *rgguidUIContexts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveNamedCommand( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenameNamedCommand( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCommandBarControl( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [in] */ DWORD dwCmdType,
            /* [out] */ IDispatch **ppCmdBarCtrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCommandBarControl( 
            /* [in] */ IDispatch *pCmdBarCtrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCommandBar( 
            /* [string][in] */ const LPCOLESTR pszCmdBarName,
            /* [in] */ vsCommandBarType dwType,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [out] */ IDispatch **ppCmdBar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCommandBar( 
            /* [in] */ IDispatch *pCmdBar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindCommandBar( 
            /* [in] */ void *pToolbarSet,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [in] */ DWORD dwMenuId,
            /* [retval][out] */ IDispatch **ppdispCmdBar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsProfferCommandsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsProfferCommands * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsProfferCommands * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsProfferCommands * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddNamedCommand )( 
            IVsProfferCommands * This,
            /* [in] */ const GUID *pguidPackage,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [out] */ DWORD *pdwCmdId,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
            /* [string][in] */ const LPCOLESTR pszBtnText,
            /* [string][in] */ const LPCOLESTR pszCmdTooltip,
            /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
            /* [in] */ DWORD dwBitmapResourceId,
            /* [in] */ DWORD dwBitmapImageIndex,
            /* [in] */ DWORD dwCmdFlagsDefault,
            /* [in] */ DWORD cUIContexts,
            /* [size_is][in] */ const GUID *rgguidUIContexts);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveNamedCommand )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical);
        
        HRESULT ( STDMETHODCALLTYPE *RenameNamedCommand )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew);
        
        HRESULT ( STDMETHODCALLTYPE *AddCommandBarControl )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [in] */ DWORD dwCmdType,
            /* [out] */ IDispatch **ppCmdBarCtrl);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCommandBarControl )( 
            IVsProfferCommands * This,
            /* [in] */ IDispatch *pCmdBarCtrl);
        
        HRESULT ( STDMETHODCALLTYPE *AddCommandBar )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdBarName,
            /* [in] */ vsCommandBarType dwType,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [out] */ IDispatch **ppCmdBar);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCommandBar )( 
            IVsProfferCommands * This,
            /* [in] */ IDispatch *pCmdBar);
        
        HRESULT ( STDMETHODCALLTYPE *FindCommandBar )( 
            IVsProfferCommands * This,
            /* [in] */ void *pToolbarSet,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [in] */ DWORD dwMenuId,
            /* [retval][out] */ IDispatch **ppdispCmdBar);
        
        END_INTERFACE
    } IVsProfferCommandsVtbl;

    interface IVsProfferCommands
    {
        CONST_VTBL struct IVsProfferCommandsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsProfferCommands_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsProfferCommands_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsProfferCommands_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsProfferCommands_AddNamedCommand(This,pguidPackage,pguidCmdGroup,pszCmdNameCanonical,pdwCmdId,pszCmdNameLocalized,pszBtnText,pszCmdTooltip,pszSatelliteDLL,dwBitmapResourceId,dwBitmapImageIndex,dwCmdFlagsDefault,cUIContexts,rgguidUIContexts)	\
    (This)->lpVtbl -> AddNamedCommand(This,pguidPackage,pguidCmdGroup,pszCmdNameCanonical,pdwCmdId,pszCmdNameLocalized,pszBtnText,pszCmdTooltip,pszSatelliteDLL,dwBitmapResourceId,dwBitmapImageIndex,dwCmdFlagsDefault,cUIContexts,rgguidUIContexts)

#define IVsProfferCommands_RemoveNamedCommand(This,pszCmdNameCanonical)	\
    (This)->lpVtbl -> RemoveNamedCommand(This,pszCmdNameCanonical)

#define IVsProfferCommands_RenameNamedCommand(This,pszCmdNameCanonical,pszCmdNameCanonicalNew,pszCmdNameLocalizedNew)	\
    (This)->lpVtbl -> RenameNamedCommand(This,pszCmdNameCanonical,pszCmdNameCanonicalNew,pszCmdNameLocalizedNew)

#define IVsProfferCommands_AddCommandBarControl(This,pszCmdNameCanonical,pCmdBarParent,dwIndex,dwCmdType,ppCmdBarCtrl)	\
    (This)->lpVtbl -> AddCommandBarControl(This,pszCmdNameCanonical,pCmdBarParent,dwIndex,dwCmdType,ppCmdBarCtrl)

#define IVsProfferCommands_RemoveCommandBarControl(This,pCmdBarCtrl)	\
    (This)->lpVtbl -> RemoveCommandBarControl(This,pCmdBarCtrl)

#define IVsProfferCommands_AddCommandBar(This,pszCmdBarName,dwType,pCmdBarParent,dwIndex,ppCmdBar)	\
    (This)->lpVtbl -> AddCommandBar(This,pszCmdBarName,dwType,pCmdBarParent,dwIndex,ppCmdBar)

#define IVsProfferCommands_RemoveCommandBar(This,pCmdBar)	\
    (This)->lpVtbl -> RemoveCommandBar(This,pCmdBar)

#define IVsProfferCommands_FindCommandBar(This,pToolbarSet,pguidCmdGroup,dwMenuId,ppdispCmdBar)	\
    (This)->lpVtbl -> FindCommandBar(This,pToolbarSet,pguidCmdGroup,dwMenuId,ppdispCmdBar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ const GUID *pguidPackage,
    /* [in] */ const GUID *pguidCmdGroup,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [out] */ DWORD *pdwCmdId,
    /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
    /* [string][in] */ const LPCOLESTR pszBtnText,
    /* [string][in] */ const LPCOLESTR pszCmdTooltip,
    /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
    /* [in] */ DWORD dwBitmapResourceId,
    /* [in] */ DWORD dwBitmapImageIndex,
    /* [in] */ DWORD dwCmdFlagsDefault,
    /* [in] */ DWORD cUIContexts,
    /* [size_is][in] */ const GUID *rgguidUIContexts);


void __RPC_STUB IVsProfferCommands_AddNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical);


void __RPC_STUB IVsProfferCommands_RemoveNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RenameNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
    /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew);


void __RPC_STUB IVsProfferCommands_RenameNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddCommandBarControl_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [in] */ IDispatch *pCmdBarParent,
    /* [in] */ DWORD dwIndex,
    /* [in] */ DWORD dwCmdType,
    /* [out] */ IDispatch **ppCmdBarCtrl);


void __RPC_STUB IVsProfferCommands_AddCommandBarControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveCommandBarControl_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ IDispatch *pCmdBarCtrl);


void __RPC_STUB IVsProfferCommands_RemoveCommandBarControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdBarName,
    /* [in] */ vsCommandBarType dwType,
    /* [in] */ IDispatch *pCmdBarParent,
    /* [in] */ DWORD dwIndex,
    /* [out] */ IDispatch **ppCmdBar);


void __RPC_STUB IVsProfferCommands_AddCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ IDispatch *pCmdBar);


void __RPC_STUB IVsProfferCommands_RemoveCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_FindCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ void *pToolbarSet,
    /* [in] */ const GUID *pguidCmdGroup,
    /* [in] */ DWORD dwMenuId,
    /* [retval][out] */ IDispatch **ppdispCmdBar);


void __RPC_STUB IVsProfferCommands_FindCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsProfferCommands_INTERFACE_DEFINED__ */


#ifndef __ObjectExtenders_INTERFACE_DEFINED__
#define __ObjectExtenders_INTERFACE_DEFINED__

/* interface ObjectExtenders */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_ObjectExtenders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d0aa9cc-8465-42f3-ad6e-dfde28ccc75d")
    ObjectExtenders : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RegisterExtenderProvider( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProvider *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UnregisterExtenderProvider( 
            /* [in] */ long Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtenderNames( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetContextualExtenderCATIDs( 
            /* [retval][out] */ VARIANT *ExtenderCATIDs) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE GetLocalizedExtenderName( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ BSTR *pLocalizedName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RegisterExtenderProviderUnk( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProviderUnk *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ObjectExtendersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ObjectExtenders * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ObjectExtenders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ObjectExtenders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ObjectExtenders * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ObjectExtenders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ObjectExtenders * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ObjectExtenders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ObjectExtenders * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ObjectExtenders * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterExtenderProvider )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProvider *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UnregisterExtenderProvider )( 
            ObjectExtenders * This,
            /* [in] */ long Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtenderNames )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetContextualExtenderCATIDs )( 
            ObjectExtenders * This,
            /* [retval][out] */ VARIANT *ExtenderCATIDs);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetLocalizedExtenderName )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ BSTR *pLocalizedName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RegisterExtenderProviderUnk )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProviderUnk *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie);
        
        END_INTERFACE
    } ObjectExtendersVtbl;

    interface ObjectExtenders
    {
        CONST_VTBL struct ObjectExtendersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ObjectExtenders_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ObjectExtenders_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ObjectExtenders_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ObjectExtenders_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ObjectExtenders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ObjectExtenders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ObjectExtenders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ObjectExtenders_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ObjectExtenders_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ObjectExtenders_RegisterExtenderProvider(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)	\
    (This)->lpVtbl -> RegisterExtenderProvider(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)

#define ObjectExtenders_UnregisterExtenderProvider(This,Cookie)	\
    (This)->lpVtbl -> UnregisterExtenderProvider(This,Cookie)

#define ObjectExtenders_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,Extender)

#define ObjectExtenders_GetExtenderNames(This,ExtenderCATID,ExtendeeObject,ExtenderNames)	\
    (This)->lpVtbl -> GetExtenderNames(This,ExtenderCATID,ExtendeeObject,ExtenderNames)

#define ObjectExtenders_GetContextualExtenderCATIDs(This,ExtenderCATIDs)	\
    (This)->lpVtbl -> GetContextualExtenderCATIDs(This,ExtenderCATIDs)

#define ObjectExtenders_GetLocalizedExtenderName(This,ExtenderCATID,ExtenderName,pLocalizedName)	\
    (This)->lpVtbl -> GetLocalizedExtenderName(This,ExtenderCATID,ExtenderName,pLocalizedName)

#define ObjectExtenders_RegisterExtenderProviderUnk(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)	\
    (This)->lpVtbl -> RegisterExtenderProviderUnk(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_get_DTE_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ObjectExtenders_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_get_Parent_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ObjectExtenders_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_RegisterExtenderProvider_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IExtenderProvider *ExtenderProvider,
    /* [defaultvalue][in] */ BSTR LocalizedName,
    /* [retval][out] */ long *Cookie);


void __RPC_STUB ObjectExtenders_RegisterExtenderProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_UnregisterExtenderProvider_Proxy( 
    ObjectExtenders * This,
    /* [in] */ long Cookie);


void __RPC_STUB ObjectExtenders_UnregisterExtenderProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetExtender_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB ObjectExtenders_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetExtenderNames_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB ObjectExtenders_GetExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetContextualExtenderCATIDs_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ VARIANT *ExtenderCATIDs);


void __RPC_STUB ObjectExtenders_GetContextualExtenderCATIDs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetLocalizedExtenderName_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ BSTR *pLocalizedName);


void __RPC_STUB ObjectExtenders_GetLocalizedExtenderName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_RegisterExtenderProviderUnk_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IExtenderProviderUnk *ExtenderProvider,
    /* [defaultvalue][in] */ BSTR LocalizedName,
    /* [retval][out] */ long *Cookie);


void __RPC_STUB ObjectExtenders_RegisterExtenderProviderUnk_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ObjectExtenders_INTERFACE_DEFINED__ */


#ifndef __IExtenderSite_INTERFACE_DEFINED__
#define __IExtenderSite_INTERFACE_DEFINED__

/* interface IExtenderSite */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e57c510b-968b-4a3c-a467-ee4013157dc9")
    IExtenderSite : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NotifyDelete( 
            /* [in] */ long Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderSite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderSite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderSite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderSite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NotifyDelete )( 
            IExtenderSite * This,
            /* [in] */ long Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IExtenderSite * This,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        END_INTERFACE
    } IExtenderSiteVtbl;

    interface IExtenderSite
    {
        CONST_VTBL struct IExtenderSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderSite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderSite_NotifyDelete(This,Cookie)	\
    (This)->lpVtbl -> NotifyDelete(This,Cookie)

#define IExtenderSite_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderSite_NotifyDelete_Proxy( 
    IExtenderSite * This,
    /* [in] */ long Cookie);


void __RPC_STUB IExtenderSite_NotifyDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderSite_GetObject_Proxy( 
    IExtenderSite * This,
    /* [defaultvalue][in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB IExtenderSite_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderSite_INTERFACE_DEFINED__ */


#ifndef __IExtenderProvider_INTERFACE_DEFINED__
#define __IExtenderProvider_INTERFACE_DEFINED__

/* interface IExtenderProvider */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4db06329-23f4-443b-9abd-9cf611e8ae07")
    IExtenderProvider : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanExtend( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderProvider * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderProvider * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderProvider * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderProvider * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            IExtenderProvider * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanExtend )( 
            IExtenderProvider * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval);
        
        END_INTERFACE
    } IExtenderProviderVtbl;

    interface IExtenderProvider
    {
        CONST_VTBL struct IExtenderProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderProvider_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderProvider_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderProvider_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderProvider_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderProvider_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)

#define IExtenderProvider_CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)	\
    (This)->lpVtbl -> CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProvider_GetExtender_Proxy( 
    IExtenderProvider * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IDispatch *ExtendeeObject,
    /* [in] */ IExtenderSite *ExtenderSite,
    /* [in] */ long Cookie,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB IExtenderProvider_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProvider_CanExtend_Proxy( 
    IExtenderProvider * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IDispatch *ExtendeeObject,
    /* [retval][out] */ VARIANT_BOOL *fRetval);


void __RPC_STUB IExtenderProvider_CanExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderProvider_INTERFACE_DEFINED__ */


#ifndef __IExtenderProviderUnk_INTERFACE_DEFINED__
#define __IExtenderProviderUnk_INTERFACE_DEFINED__

/* interface IExtenderProviderUnk */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderProviderUnk;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F69B64A3-9017-4e48-9784-E152B51AA722")
    IExtenderProviderUnk : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanExtend( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderProviderUnkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderProviderUnk * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderProviderUnk * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderProviderUnk * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderProviderUnk * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderProviderUnk * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderProviderUnk * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderProviderUnk * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            IExtenderProviderUnk * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanExtend )( 
            IExtenderProviderUnk * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval);
        
        END_INTERFACE
    } IExtenderProviderUnkVtbl;

    interface IExtenderProviderUnk
    {
        CONST_VTBL struct IExtenderProviderUnkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderProviderUnk_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderProviderUnk_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderProviderUnk_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderProviderUnk_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderProviderUnk_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderProviderUnk_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderProviderUnk_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderProviderUnk_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)

#define IExtenderProviderUnk_CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)	\
    (This)->lpVtbl -> CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProviderUnk_GetExtender_Proxy( 
    IExtenderProviderUnk * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [in] */ IExtenderSite *ExtenderSite,
    /* [in] */ long Cookie,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB IExtenderProviderUnk_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProviderUnk_CanExtend_Proxy( 
    IExtenderProviderUnk * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ VARIANT_BOOL *fRetval);


void __RPC_STUB IExtenderProviderUnk_CanExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderProviderUnk_INTERFACE_DEFINED__ */


#ifndef __IFilterProperties_INTERFACE_DEFINED__
#define __IFilterProperties_INTERFACE_DEFINED__

/* interface IFilterProperties */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IFilterProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aade1f59-6ace-43d1-8fca-42af3a5c4f3c")
    IFilterProperties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsPropertyHidden( 
            /* [in] */ BSTR PropertyName,
            /* [retval][out] */ vsFilterProperties *pRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFilterPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFilterProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFilterProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFilterProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFilterProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFilterProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFilterProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFilterProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsPropertyHidden )( 
            IFilterProperties * This,
            /* [in] */ BSTR PropertyName,
            /* [retval][out] */ vsFilterProperties *pRetval);
        
        END_INTERFACE
    } IFilterPropertiesVtbl;

    interface IFilterProperties
    {
        CONST_VTBL struct IFilterPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFilterProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFilterProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFilterProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFilterProperties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFilterProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFilterProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFilterProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFilterProperties_IsPropertyHidden(This,PropertyName,pRetval)	\
    (This)->lpVtbl -> IsPropertyHidden(This,PropertyName,pRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IFilterProperties_IsPropertyHidden_Proxy( 
    IFilterProperties * This,
    /* [in] */ BSTR PropertyName,
    /* [retval][out] */ vsFilterProperties *pRetval);


void __RPC_STUB IFilterProperties_IsPropertyHidden_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFilterProperties_INTERFACE_DEFINED__ */


#ifndef ___dispDTEEvents_DISPINTERFACE_DEFINED__
#define ___dispDTEEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDTEEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispDTEEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("b50c9708-c909-4b87-a03d-af6cc4bfb422")
    _dispDTEEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDTEEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDTEEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDTEEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDTEEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDTEEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDTEEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDTEEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDTEEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDTEEventsVtbl;

    interface _dispDTEEvents
    {
        CONST_VTBL struct _dispDTEEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDTEEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDTEEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDTEEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDTEEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDTEEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDTEEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDTEEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDTEEvents_DISPINTERFACE_DEFINED__ */


#ifndef __BuildDependencies_INTERFACE_DEFINED__
#define __BuildDependencies_INTERFACE_DEFINED__

/* interface BuildDependencies */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_BuildDependencies;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ead260eb-1e5b-450a-b628-4cfada11b4a1")
    BuildDependencies : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionBuild **ppSolutionBuild) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ BuildDependency **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BuildDependenciesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BuildDependencies * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BuildDependencies * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BuildDependencies * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BuildDependencies * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BuildDependencies * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BuildDependencies * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BuildDependencies * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            BuildDependencies * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BuildDependencies * This,
            /* [retval][out] */ SolutionBuild **ppSolutionBuild);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            BuildDependencies * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BuildDependencies * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ BuildDependency **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BuildDependencies * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } BuildDependenciesVtbl;

    interface BuildDependencies
    {
        CONST_VTBL struct BuildDependenciesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BuildDependencies_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define BuildDependencies_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define BuildDependencies_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define BuildDependencies_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define BuildDependencies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define BuildDependencies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define BuildDependencies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define BuildDependencies_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define BuildDependencies_get_Parent(This,ppSolutionBuild)	\
    (This)->lpVtbl -> get_Parent(This,ppSolutionBuild)

#define BuildDependencies__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define BuildDependencies_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define BuildDependencies_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_DTE_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB BuildDependencies_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_Parent_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ SolutionBuild **ppSolutionBuild);


void __RPC_STUB BuildDependencies_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE BuildDependencies__NewEnum_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB BuildDependencies__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_Item_Proxy( 
    BuildDependencies * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ BuildDependency **ppOut);


void __RPC_STUB BuildDependencies_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_Count_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB BuildDependencies_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __BuildDependencies_INTERFACE_DEFINED__ */


#ifndef __BuildDependency_INTERFACE_DEFINED__
#define __BuildDependency_INTERFACE_DEFINED__

/* interface BuildDependency */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_BuildDependency;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c5ceaac-062f-4434-a2ed-78ab4d6134fe")
    BuildDependency : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ BuildDependencies **ppBuildDependencies) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RequiredProjects( 
            /* [retval][out] */ VARIANT *pProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProject( 
            BSTR ProjectUniqueName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveProject( 
            BSTR ProjectUniqueName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAllProjects( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BuildDependencyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BuildDependency * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BuildDependency * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BuildDependency * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BuildDependency * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BuildDependency * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BuildDependency * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BuildDependency * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            BuildDependency * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            BuildDependency * This,
            /* [retval][out] */ BuildDependencies **ppBuildDependencies);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            BuildDependency * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RequiredProjects )( 
            BuildDependency * This,
            /* [retval][out] */ VARIANT *pProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProject )( 
            BuildDependency * This,
            BSTR ProjectUniqueName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveProject )( 
            BuildDependency * This,
            BSTR ProjectUniqueName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAllProjects )( 
            BuildDependency * This);
        
        END_INTERFACE
    } BuildDependencyVtbl;

    interface BuildDependency
    {
        CONST_VTBL struct BuildDependencyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BuildDependency_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define BuildDependency_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define BuildDependency_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define BuildDependency_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define BuildDependency_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define BuildDependency_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define BuildDependency_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define BuildDependency_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define BuildDependency_get_Collection(This,ppBuildDependencies)	\
    (This)->lpVtbl -> get_Collection(This,ppBuildDependencies)

#define BuildDependency_get_Project(This,ppProject)	\
    (This)->lpVtbl -> get_Project(This,ppProject)

#define BuildDependency_get_RequiredProjects(This,pProjects)	\
    (This)->lpVtbl -> get_RequiredProjects(This,pProjects)

#define BuildDependency_AddProject(This,ProjectUniqueName)	\
    (This)->lpVtbl -> AddProject(This,ProjectUniqueName)

#define BuildDependency_RemoveProject(This,ProjectUniqueName)	\
    (This)->lpVtbl -> RemoveProject(This,ProjectUniqueName)

#define BuildDependency_RemoveAllProjects(This)	\
    (This)->lpVtbl -> RemoveAllProjects(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_DTE_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB BuildDependency_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_Collection_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ BuildDependencies **ppBuildDependencies);


void __RPC_STUB BuildDependency_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_Project_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB BuildDependency_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_RequiredProjects_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ VARIANT *pProjects);


void __RPC_STUB BuildDependency_get_RequiredProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_AddProject_Proxy( 
    BuildDependency * This,
    BSTR ProjectUniqueName);


void __RPC_STUB BuildDependency_AddProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_RemoveProject_Proxy( 
    BuildDependency * This,
    BSTR ProjectUniqueName);


void __RPC_STUB BuildDependency_RemoveProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_RemoveAllProjects_Proxy( 
    BuildDependency * This);


void __RPC_STUB BuildDependency_RemoveAllProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __BuildDependency_INTERFACE_DEFINED__ */


#ifndef __SolutionConfigurations_INTERFACE_DEFINED__
#define __SolutionConfigurations_INTERFACE_DEFINED__

/* interface SolutionConfigurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionConfigurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23e78ed7-c9e1-462d-8bc6-366003486ed9")
    SolutionConfigurations : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionConfiguration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionBuild **ppBuild) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR NewName,
            /* [in] */ BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionConfigurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionConfigurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionConfigurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionConfigurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionConfigurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionConfigurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionConfigurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SolutionConfigurations * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SolutionConfigurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionConfiguration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionConfigurations * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionConfigurations * This,
            /* [retval][out] */ SolutionBuild **ppBuild);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            SolutionConfigurations * This,
            /* [in] */ BSTR NewName,
            /* [in] */ BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SolutionConfigurations * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } SolutionConfigurationsVtbl;

    interface SolutionConfigurations
    {
        CONST_VTBL struct SolutionConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionConfigurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionConfigurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionConfigurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionConfigurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionConfigurations__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define SolutionConfigurations_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define SolutionConfigurations_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionConfigurations_get_Parent(This,ppBuild)	\
    (This)->lpVtbl -> get_Parent(This,ppBuild)

#define SolutionConfigurations_Add(This,NewName,ExistingName,Propagate,ppSolutionConfiguration)	\
    (This)->lpVtbl -> Add(This,NewName,ExistingName,Propagate,ppSolutionConfiguration)

#define SolutionConfigurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations__NewEnum_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB SolutionConfigurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_Item_Proxy( 
    SolutionConfigurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ SolutionConfiguration **ppOut);


void __RPC_STUB SolutionConfigurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_DTE_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionConfigurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_Parent_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ SolutionBuild **ppBuild);


void __RPC_STUB SolutionConfigurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_Add_Proxy( 
    SolutionConfigurations * This,
    /* [in] */ BSTR NewName,
    /* [in] */ BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionConfigurations_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_Count_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB SolutionConfigurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionConfigurations_INTERFACE_DEFINED__ */


#ifndef __SolutionConfiguration_INTERFACE_DEFINED__
#define __SolutionConfiguration_INTERFACE_DEFINED__

/* interface SolutionConfiguration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60aaad75-cb8d-4c62-9959-24d6a6a50de7")
    SolutionConfiguration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionContexts( 
            /* [retval][out] */ SolutionContexts **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionConfiguration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionConfiguration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionConfiguration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionConfiguration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionConfiguration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionConfiguration * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SolutionConfiguration * This,
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SolutionConfiguration * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionContexts )( 
            SolutionConfiguration * This,
            /* [retval][out] */ SolutionContexts **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SolutionConfiguration * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            SolutionConfiguration * This);
        
        END_INTERFACE
    } SolutionConfigurationVtbl;

    interface SolutionConfiguration
    {
        CONST_VTBL struct SolutionConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionConfiguration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionConfiguration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionConfiguration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionConfiguration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionConfiguration_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionConfiguration_get_Collection(This,ppSolutionConfigurations)	\
    (This)->lpVtbl -> get_Collection(This,ppSolutionConfigurations)

#define SolutionConfiguration_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define SolutionConfiguration_get_SolutionContexts(This,ppOut)	\
    (This)->lpVtbl -> get_SolutionContexts(This,ppOut)

#define SolutionConfiguration_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define SolutionConfiguration_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_DTE_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionConfiguration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_Collection_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);


void __RPC_STUB SolutionConfiguration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_Name_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB SolutionConfiguration_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_SolutionContexts_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ SolutionContexts **ppOut);


void __RPC_STUB SolutionConfiguration_get_SolutionContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_Delete_Proxy( 
    SolutionConfiguration * This);


void __RPC_STUB SolutionConfiguration_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_Activate_Proxy( 
    SolutionConfiguration * This);


void __RPC_STUB SolutionConfiguration_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionConfiguration_INTERFACE_DEFINED__ */


#ifndef __SolutionContext_INTERFACE_DEFINED__
#define __SolutionContext_INTERFACE_DEFINED__

/* interface SolutionContext */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc6a1a82-9c8a-47bb-a046-6e965df5a99b")
    SolutionContext : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SolutionContexts **ppSolutionContexts) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationName( 
            /* [retval][out] */ BSTR *pConfigurationName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfigurationName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformName( 
            /* [retval][out] */ BSTR *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShouldBuild( 
            /* [retval][out] */ VARIANT_BOOL *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShouldBuild( 
            /* [in] */ VARIANT_BOOL IsBuilt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShouldDeploy( 
            /* [retval][out] */ VARIANT_BOOL *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShouldDeploy( 
            /* [in] */ VARIANT_BOOL IsDeployed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionContext * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SolutionContext * This,
            /* [retval][out] */ SolutionContexts **ppSolutionContexts);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pConfigurationName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfigurationName )( 
            SolutionContext * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShouldBuild )( 
            SolutionContext * This,
            /* [retval][out] */ VARIANT_BOOL *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShouldBuild )( 
            SolutionContext * This,
            /* [in] */ VARIANT_BOOL IsBuilt);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShouldDeploy )( 
            SolutionContext * This,
            /* [retval][out] */ VARIANT_BOOL *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShouldDeploy )( 
            SolutionContext * This,
            /* [in] */ VARIANT_BOOL IsDeployed);
        
        END_INTERFACE
    } SolutionContextVtbl;

    interface SolutionContext
    {
        CONST_VTBL struct SolutionContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionContext_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionContext_get_Collection(This,ppSolutionContexts)	\
    (This)->lpVtbl -> get_Collection(This,ppSolutionContexts)

#define SolutionContext_get_ProjectName(This,pName)	\
    (This)->lpVtbl -> get_ProjectName(This,pName)

#define SolutionContext_get_ConfigurationName(This,pConfigurationName)	\
    (This)->lpVtbl -> get_ConfigurationName(This,pConfigurationName)

#define SolutionContext_put_ConfigurationName(This,Name)	\
    (This)->lpVtbl -> put_ConfigurationName(This,Name)

#define SolutionContext_get_PlatformName(This,pPlatformName)	\
    (This)->lpVtbl -> get_PlatformName(This,pPlatformName)

#define SolutionContext_get_ShouldBuild(This,pPlatformName)	\
    (This)->lpVtbl -> get_ShouldBuild(This,pPlatformName)

#define SolutionContext_put_ShouldBuild(This,IsBuilt)	\
    (This)->lpVtbl -> put_ShouldBuild(This,IsBuilt)

#define SolutionContext_get_ShouldDeploy(This,pPlatformName)	\
    (This)->lpVtbl -> get_ShouldDeploy(This,pPlatformName)

#define SolutionContext_put_ShouldDeploy(This,IsDeployed)	\
    (This)->lpVtbl -> put_ShouldDeploy(This,IsDeployed)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_DTE_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionContext_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_Collection_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ SolutionContexts **ppSolutionContexts);


void __RPC_STUB SolutionContext_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ProjectName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB SolutionContext_get_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ConfigurationName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pConfigurationName);


void __RPC_STUB SolutionContext_get_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ConfigurationName_Proxy( 
    SolutionContext * This,
    /* [in] */ BSTR Name);


void __RPC_STUB SolutionContext_put_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_PlatformName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pPlatformName);


void __RPC_STUB SolutionContext_get_PlatformName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ShouldBuild_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ VARIANT_BOOL *pPlatformName);


void __RPC_STUB SolutionContext_get_ShouldBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ShouldBuild_Proxy( 
    SolutionContext * This,
    /* [in] */ VARIANT_BOOL IsBuilt);


void __RPC_STUB SolutionContext_put_ShouldBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ShouldDeploy_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ VARIANT_BOOL *pPlatformName);


void __RPC_STUB SolutionContext_get_ShouldDeploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ShouldDeploy_Proxy( 
    SolutionContext * This,
    /* [in] */ VARIANT_BOOL IsDeployed);


void __RPC_STUB SolutionContext_put_ShouldDeploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionContext_INTERFACE_DEFINED__ */


#ifndef __SolutionBuild_INTERFACE_DEFINED__
#define __SolutionBuild_INTERFACE_DEFINED__

/* interface SolutionBuild */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionBuild;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3c1c40c-9218-4d4c-9daa-075f64f6922c")
    SolutionBuild : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Solution	**ppSolution) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfiguration( 
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildDependencies( 
            /* [retval][out] */ BuildDependencies **ppBuildDependencies) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildState( 
            /* [retval][out] */ vsBuildState *pvsBuildState) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastBuildInfo( 
            /* [retval][out] */ long *pBuiltSuccessfully) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartupProjects( 
            /* [in] */ VARIANT Projects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartupProjects( 
            /* [retval][out] */ VARIANT *pProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Build( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debug( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Deploy( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clean( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Run( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionConfigurations( 
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildProject( 
            BSTR SolutionConfiguration,
            BSTR ProjectUniqueName,
            /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionBuildVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionBuild * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionBuild * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionBuild * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionBuild * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionBuild * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionBuild * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionBuild * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionBuild * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionBuild * This,
            /* [retval][out] */ Solution	**ppSolution);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfiguration )( 
            SolutionBuild * This,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildDependencies )( 
            SolutionBuild * This,
            /* [retval][out] */ BuildDependencies **ppBuildDependencies);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildState )( 
            SolutionBuild * This,
            /* [retval][out] */ vsBuildState *pvsBuildState);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastBuildInfo )( 
            SolutionBuild * This,
            /* [retval][out] */ long *pBuiltSuccessfully);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartupProjects )( 
            SolutionBuild * This,
            /* [in] */ VARIANT Projects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartupProjects )( 
            SolutionBuild * This,
            /* [retval][out] */ VARIANT *pProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Build )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Debug )( 
            SolutionBuild * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Deploy )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clean )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            SolutionBuild * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionConfigurations )( 
            SolutionBuild * This,
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildProject )( 
            SolutionBuild * This,
            BSTR SolutionConfiguration,
            BSTR ProjectUniqueName,
            /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish);
        
        END_INTERFACE
    } SolutionBuildVtbl;

    interface SolutionBuild
    {
        CONST_VTBL struct SolutionBuildVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionBuild_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionBuild_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionBuild_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionBuild_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionBuild_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionBuild_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionBuild_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionBuild_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionBuild_get_Parent(This,ppSolution)	\
    (This)->lpVtbl -> get_Parent(This,ppSolution)

#define SolutionBuild_get_ActiveConfiguration(This,ppSolutionConfiguration)	\
    (This)->lpVtbl -> get_ActiveConfiguration(This,ppSolutionConfiguration)

#define SolutionBuild_get_BuildDependencies(This,ppBuildDependencies)	\
    (This)->lpVtbl -> get_BuildDependencies(This,ppBuildDependencies)

#define SolutionBuild_get_BuildState(This,pvsBuildState)	\
    (This)->lpVtbl -> get_BuildState(This,pvsBuildState)

#define SolutionBuild_get_LastBuildInfo(This,pBuiltSuccessfully)	\
    (This)->lpVtbl -> get_LastBuildInfo(This,pBuiltSuccessfully)

#define SolutionBuild_put_StartupProjects(This,Projects)	\
    (This)->lpVtbl -> put_StartupProjects(This,Projects)

#define SolutionBuild_get_StartupProjects(This,pProject)	\
    (This)->lpVtbl -> get_StartupProjects(This,pProject)

#define SolutionBuild_Build(This,WaitForBuildToFinish)	\
    (This)->lpVtbl -> Build(This,WaitForBuildToFinish)

#define SolutionBuild_Debug(This)	\
    (This)->lpVtbl -> Debug(This)

#define SolutionBuild_Deploy(This,WaitForDeployToFinish)	\
    (This)->lpVtbl -> Deploy(This,WaitForDeployToFinish)

#define SolutionBuild_Clean(This,WaitForCleanToFinish)	\
    (This)->lpVtbl -> Clean(This,WaitForCleanToFinish)

#define SolutionBuild_Run(This)	\
    (This)->lpVtbl -> Run(This)

#define SolutionBuild_get_SolutionConfigurations(This,ppSolutionConfigurations)	\
    (This)->lpVtbl -> get_SolutionConfigurations(This,ppSolutionConfigurations)

#define SolutionBuild_BuildProject(This,SolutionConfiguration,ProjectUniqueName,WaitForBuildToFinish)	\
    (This)->lpVtbl -> BuildProject(This,SolutionConfiguration,ProjectUniqueName,WaitForBuildToFinish)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_DTE_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionBuild_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_Parent_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ Solution	**ppSolution);


void __RPC_STUB SolutionBuild_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_ActiveConfiguration_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionBuild_get_ActiveConfiguration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_BuildDependencies_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ BuildDependencies **ppBuildDependencies);


void __RPC_STUB SolutionBuild_get_BuildDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_BuildState_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ vsBuildState *pvsBuildState);


void __RPC_STUB SolutionBuild_get_BuildState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_LastBuildInfo_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ long *pBuiltSuccessfully);


void __RPC_STUB SolutionBuild_get_LastBuildInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_put_StartupProjects_Proxy( 
    SolutionBuild * This,
    /* [in] */ VARIANT Projects);


void __RPC_STUB SolutionBuild_put_StartupProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_StartupProjects_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ VARIANT *pProject);


void __RPC_STUB SolutionBuild_get_StartupProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Build_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish);


void __RPC_STUB SolutionBuild_Build_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Debug_Proxy( 
    SolutionBuild * This);


void __RPC_STUB SolutionBuild_Debug_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Deploy_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish);


void __RPC_STUB SolutionBuild_Deploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Clean_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish);


void __RPC_STUB SolutionBuild_Clean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Run_Proxy( 
    SolutionBuild * This);


void __RPC_STUB SolutionBuild_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_SolutionConfigurations_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);


void __RPC_STUB SolutionBuild_get_SolutionConfigurations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_BuildProject_Proxy( 
    SolutionBuild * This,
    BSTR SolutionConfiguration,
    BSTR ProjectUniqueName,
    /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish);


void __RPC_STUB SolutionBuild_BuildProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionBuild_INTERFACE_DEFINED__ */


#ifndef __UIHierarchyItem_INTERFACE_DEFINED__
#define __UIHierarchyItem_INTERFACE_DEFINED__

/* interface UIHierarchyItem */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_UIHierarchyItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fbd0d024-09cd-4d9f-9e2b-cacd628426a5")
    UIHierarchyItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UIHierarchyItems( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppDispatch) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [in] */ vsUISelectionType How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSelected( 
            /* [retval][out] */ VARIANT_BOOL *pfSelected) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchyItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchyItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchyItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchyItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchyItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchyItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchyItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchyItem * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            UIHierarchyItem * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            UIHierarchyItem * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UIHierarchyItems )( 
            UIHierarchyItem * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            UIHierarchyItem * This,
            /* [retval][out] */ IDispatch **ppDispatch);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            UIHierarchyItem * This,
            /* [in] */ vsUISelectionType How);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSelected )( 
            UIHierarchyItem * This,
            /* [retval][out] */ VARIANT_BOOL *pfSelected);
        
        END_INTERFACE
    } UIHierarchyItemVtbl;

    interface UIHierarchyItem
    {
        CONST_VTBL struct UIHierarchyItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchyItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchyItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchyItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchyItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchyItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchyItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchyItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchyItem_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchyItem_get_Collection(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_Collection(This,ppUIHierarchyItems)

#define UIHierarchyItem_get_Name(This,pbstrName)	\
    (This)->lpVtbl -> get_Name(This,pbstrName)

#define UIHierarchyItem_get_UIHierarchyItems(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_UIHierarchyItems(This,ppUIHierarchyItems)

#define UIHierarchyItem_get_Object(This,ppDispatch)	\
    (This)->lpVtbl -> get_Object(This,ppDispatch)

#define UIHierarchyItem_Select(This,How)	\
    (This)->lpVtbl -> Select(This,How)

#define UIHierarchyItem_get_IsSelected(This,pfSelected)	\
    (This)->lpVtbl -> get_IsSelected(This,pfSelected)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_DTE_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchyItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Collection_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchyItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Name_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB UIHierarchyItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_UIHierarchyItems_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchyItem_get_UIHierarchyItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Object_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ IDispatch **ppDispatch);


void __RPC_STUB UIHierarchyItem_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_Select_Proxy( 
    UIHierarchyItem * This,
    /* [in] */ vsUISelectionType How);


void __RPC_STUB UIHierarchyItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_IsSelected_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ VARIANT_BOOL *pfSelected);


void __RPC_STUB UIHierarchyItem_get_IsSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchyItem_INTERFACE_DEFINED__ */


#ifndef __UIHierarchyItems_INTERFACE_DEFINED__
#define __UIHierarchyItems_INTERFACE_DEFINED__

/* interface UIHierarchyItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UIHierarchyItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("db8406b0-a916-449c-a277-bb04028f4394")
    UIHierarchyItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppDispatch) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Expanded( 
            /* [retval][out] */ VARIANT_BOOL *pfExpanded) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Expanded( 
            /* [in] */ VARIANT_BOOL Expanded) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **ppUnknown) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchyItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchyItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchyItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchyItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchyItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchyItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchyItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchyItems * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UIHierarchyItems * This,
            /* [retval][out] */ IDispatch **ppDispatch);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            UIHierarchyItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            UIHierarchyItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Expanded )( 
            UIHierarchyItems * This,
            /* [retval][out] */ VARIANT_BOOL *pfExpanded);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Expanded )( 
            UIHierarchyItems * This,
            /* [in] */ VARIANT_BOOL Expanded);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            UIHierarchyItems * This,
            /* [retval][out] */ IUnknown **ppUnknown);
        
        END_INTERFACE
    } UIHierarchyItemsVtbl;

    interface UIHierarchyItems
    {
        CONST_VTBL struct UIHierarchyItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchyItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchyItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchyItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchyItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchyItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchyItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchyItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchyItems_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchyItems_get_Parent(This,ppDispatch)	\
    (This)->lpVtbl -> get_Parent(This,ppDispatch)

#define UIHierarchyItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define UIHierarchyItems_Item(This,Index,ppUIHierarchyItem)	\
    (This)->lpVtbl -> Item(This,Index,ppUIHierarchyItem)

#define UIHierarchyItems_get_Expanded(This,pfExpanded)	\
    (This)->lpVtbl -> get_Expanded(This,pfExpanded)

#define UIHierarchyItems_put_Expanded(This,Expanded)	\
    (This)->lpVtbl -> put_Expanded(This,Expanded)

#define UIHierarchyItems__NewEnum(This,ppUnknown)	\
    (This)->lpVtbl -> _NewEnum(This,ppUnknown)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_DTE_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchyItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Parent_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ IDispatch **ppDispatch);


void __RPC_STUB UIHierarchyItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Count_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB UIHierarchyItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_Item_Proxy( 
    UIHierarchyItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);


void __RPC_STUB UIHierarchyItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Expanded_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ VARIANT_BOOL *pfExpanded);


void __RPC_STUB UIHierarchyItems_get_Expanded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_put_Expanded_Proxy( 
    UIHierarchyItems * This,
    /* [in] */ VARIANT_BOOL Expanded);


void __RPC_STUB UIHierarchyItems_put_Expanded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems__NewEnum_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ IUnknown **ppUnknown);


void __RPC_STUB UIHierarchyItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchyItems_INTERFACE_DEFINED__ */


#ifndef __UIHierarchy_INTERFACE_DEFINED__
#define __UIHierarchy_INTERFACE_DEFINED__

/* interface UIHierarchy */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UIHierarchy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72a2a2ef-c209-408c-a377-76871774adb7")
    UIHierarchy : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UIHierarchyItems( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ VARIANT *pvarSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetItem( 
            /* [in] */ BSTR Names,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectUp( 
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectDown( 
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DoDefaultAction( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchy * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchy * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchy * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchy * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchy * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchy * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UIHierarchy * This,
            /* [retval][out] */ Window **ppwin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UIHierarchyItems )( 
            UIHierarchy * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            UIHierarchy * This,
            /* [retval][out] */ VARIANT *pvarSel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetItem )( 
            UIHierarchy * This,
            /* [in] */ BSTR Names,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectUp )( 
            UIHierarchy * This,
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectDown )( 
            UIHierarchy * This,
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DoDefaultAction )( 
            UIHierarchy * This);
        
        END_INTERFACE
    } UIHierarchyVtbl;

    interface UIHierarchy
    {
        CONST_VTBL struct UIHierarchyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchy_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchy_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchy_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchy_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchy_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchy_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchy_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchy_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchy_get_Parent(This,ppwin)	\
    (This)->lpVtbl -> get_Parent(This,ppwin)

#define UIHierarchy_get_UIHierarchyItems(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_UIHierarchyItems(This,ppUIHierarchyItems)

#define UIHierarchy_get_SelectedItems(This,pvarSel)	\
    (This)->lpVtbl -> get_SelectedItems(This,pvarSel)

#define UIHierarchy_GetItem(This,Names,ppUIHierarchyItem)	\
    (This)->lpVtbl -> GetItem(This,Names,ppUIHierarchyItem)

#define UIHierarchy_SelectUp(This,How,Count)	\
    (This)->lpVtbl -> SelectUp(This,How,Count)

#define UIHierarchy_SelectDown(This,How,Count)	\
    (This)->lpVtbl -> SelectDown(This,How,Count)

#define UIHierarchy_DoDefaultAction(This)	\
    (This)->lpVtbl -> DoDefaultAction(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_DTE_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchy_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_Parent_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB UIHierarchy_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_UIHierarchyItems_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchy_get_UIHierarchyItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_SelectedItems_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ VARIANT *pvarSel);


void __RPC_STUB UIHierarchy_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_GetItem_Proxy( 
    UIHierarchy * This,
    /* [in] */ BSTR Names,
    /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);


void __RPC_STUB UIHierarchy_GetItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_SelectUp_Proxy( 
    UIHierarchy * This,
    /* [in] */ vsUISelectionType How,
    /* [in] */ long Count);


void __RPC_STUB UIHierarchy_SelectUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_SelectDown_Proxy( 
    UIHierarchy * This,
    /* [in] */ vsUISelectionType How,
    /* [in] */ long Count);


void __RPC_STUB UIHierarchy_SelectDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_DoDefaultAction_Proxy( 
    UIHierarchy * This);


void __RPC_STUB UIHierarchy_DoDefaultAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchy_INTERFACE_DEFINED__ */


#ifndef __UndoContext_INTERFACE_DEFINED__
#define __UndoContext_INTERFACE_DEFINED__

/* interface UndoContext */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UndoContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d8dec44d-caf2-4b39-a539-b91ae921ba92")
    UndoContext : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR Name,
            /* [defaultvalue][in] */ VARIANT_BOOL Strict = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAborted( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsStrict( 
            /* [retval][out] */ VARIANT_BOOL *pIsStrict) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAborted( 
            /* [retval][out] */ VARIANT_BOOL *pIsAborted) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pIsOpen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UndoContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UndoContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UndoContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UndoContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UndoContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UndoContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UndoContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UndoContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UndoContext * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UndoContext * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            UndoContext * This,
            /* [in] */ BSTR Name,
            /* [defaultvalue][in] */ VARIANT_BOOL Strict);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            UndoContext * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAborted )( 
            UndoContext * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsStrict )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsStrict);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAborted )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAborted);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsOpen);
        
        END_INTERFACE
    } UndoContextVtbl;

    interface UndoContext
    {
        CONST_VTBL struct UndoContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UndoContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UndoContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UndoContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UndoContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UndoContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UndoContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UndoContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UndoContext_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define UndoContext_get_Parent(This,DTEObject)	\
    (This)->lpVtbl -> get_Parent(This,DTEObject)

#define UndoContext_Open(This,Name,Strict)	\
    (This)->lpVtbl -> Open(This,Name,Strict)

#define UndoContext_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define UndoContext_SetAborted(This)	\
    (This)->lpVtbl -> SetAborted(This)

#define UndoContext_get_IsStrict(This,pIsStrict)	\
    (This)->lpVtbl -> get_IsStrict(This,pIsStrict)

#define UndoContext_get_IsAborted(This,pIsAborted)	\
    (This)->lpVtbl -> get_IsAborted(This,pIsAborted)

#define UndoContext_get_IsOpen(This,pIsOpen)	\
    (This)->lpVtbl -> get_IsOpen(This,pIsOpen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_DTE_Proxy( 
    UndoContext * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB UndoContext_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_Parent_Proxy( 
    UndoContext * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB UndoContext_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_Open_Proxy( 
    UndoContext * This,
    /* [in] */ BSTR Name,
    /* [defaultvalue][in] */ VARIANT_BOOL Strict);


void __RPC_STUB UndoContext_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_Close_Proxy( 
    UndoContext * This);


void __RPC_STUB UndoContext_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_SetAborted_Proxy( 
    UndoContext * This);


void __RPC_STUB UndoContext_SetAborted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsStrict_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsStrict);


void __RPC_STUB UndoContext_get_IsStrict_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsAborted_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAborted);


void __RPC_STUB UndoContext_get_IsAborted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsOpen_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsOpen);


void __RPC_STUB UndoContext_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UndoContext_INTERFACE_DEFINED__ */


#ifndef __Configuration_INTERFACE_DEFINED__
#define __Configuration_INTERFACE_DEFINED__

/* interface Configuration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Configuration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("90813589-fe21-4aa4-a2e5-053fd274e980")
    Configuration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsConfigurationType *pType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Owner( 
            /* [retval][out] */ IDispatch **ppOwner) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppProperties) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBuildable( 
            /* [retval][out] */ VARIANT_BOOL *pBuildable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsRunable( 
            /* [retval][out] */ VARIANT_BOOL *pRunable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDeployable( 
            /* [retval][out] */ VARIANT_BOOL *pDeployable) = 0;
        
        virtual /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputGroups( 
            /* [retval][out] */ OutputGroups **ppOutputGroups) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Configuration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Configuration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Configuration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Configuration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Configuration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Configuration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Configuration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Configuration * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Configuration * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationName )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformName )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Configuration * This,
            /* [retval][out] */ vsConfigurationType *pType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Owner )( 
            Configuration * This,
            /* [retval][out] */ IDispatch **ppOwner);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Configuration * This,
            /* [retval][out] */ Properties **ppProperties);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBuildable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pBuildable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsRunable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pRunable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDeployable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pDeployable);
        
        /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Configuration * This,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Configuration * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Configuration * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputGroups )( 
            Configuration * This,
            /* [retval][out] */ OutputGroups **ppOutputGroups);
        
        END_INTERFACE
    } ConfigurationVtbl;

    interface Configuration
    {
        CONST_VTBL struct ConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Configuration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Configuration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Configuration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Configuration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Configuration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Configuration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Configuration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Configuration_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define Configuration_get_Collection(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_Collection(This,ppConfigurationManager)

#define Configuration_get_ConfigurationName(This,pName)	\
    (This)->lpVtbl -> get_ConfigurationName(This,pName)

#define Configuration_get_PlatformName(This,pName)	\
    (This)->lpVtbl -> get_PlatformName(This,pName)

#define Configuration_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define Configuration_get_Owner(This,ppOwner)	\
    (This)->lpVtbl -> get_Owner(This,ppOwner)

#define Configuration_get_Properties(This,ppProperties)	\
    (This)->lpVtbl -> get_Properties(This,ppProperties)

#define Configuration_get_IsBuildable(This,pBuildable)	\
    (This)->lpVtbl -> get_IsBuildable(This,pBuildable)

#define Configuration_get_IsRunable(This,pRunable)	\
    (This)->lpVtbl -> get_IsRunable(This,pRunable)

#define Configuration_get_IsDeployable(This,pDeployable)	\
    (This)->lpVtbl -> get_IsDeployable(This,pDeployable)

#define Configuration_get_Object(This,ppDisp)	\
    (This)->lpVtbl -> get_Object(This,ppDisp)

#define Configuration_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Configuration_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Configuration_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Configuration_get_OutputGroups(This,ppOutputGroups)	\
    (This)->lpVtbl -> get_OutputGroups(This,ppOutputGroups)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_DTE_Proxy( 
    Configuration * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB Configuration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Collection_Proxy( 
    Configuration * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB Configuration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ConfigurationName_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configuration_get_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_PlatformName_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configuration_get_PlatformName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Type_Proxy( 
    Configuration * This,
    /* [retval][out] */ vsConfigurationType *pType);


void __RPC_STUB Configuration_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Owner_Proxy( 
    Configuration * This,
    /* [retval][out] */ IDispatch **ppOwner);


void __RPC_STUB Configuration_get_Owner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Properties_Proxy( 
    Configuration * This,
    /* [retval][out] */ Properties **ppProperties);


void __RPC_STUB Configuration_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsBuildable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pBuildable);


void __RPC_STUB Configuration_get_IsBuildable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsRunable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pRunable);


void __RPC_STUB Configuration_get_IsRunable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsDeployable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pDeployable);


void __RPC_STUB Configuration_get_IsDeployable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Object_Proxy( 
    Configuration * This,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Configuration_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Extender_Proxy( 
    Configuration * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Configuration_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ExtenderNames_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Configuration_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ExtenderCATID_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Configuration_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_OutputGroups_Proxy( 
    Configuration * This,
    /* [retval][out] */ OutputGroups **ppOutputGroups);


void __RPC_STUB Configuration_get_OutputGroups_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Configuration_INTERFACE_DEFINED__ */


#ifndef __SolutionContexts_INTERFACE_DEFINED__
#define __SolutionContexts_INTERFACE_DEFINED__

/* interface SolutionContexts */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionContexts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0685b546-fb84-4917-ab98-98d40f892d61")
    SolutionContexts : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionContext **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionContextsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionContexts * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionContexts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionContexts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionContexts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionContexts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionContexts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionContexts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionContexts * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionContexts * This,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SolutionContexts * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SolutionContexts * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionContext **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SolutionContexts * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } SolutionContextsVtbl;

    interface SolutionContexts
    {
        CONST_VTBL struct SolutionContextsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionContexts_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionContexts_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionContexts_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionContexts_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionContexts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionContexts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionContexts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionContexts_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionContexts_get_Parent(This,ppSolutionConfiguration)	\
    (This)->lpVtbl -> get_Parent(This,ppSolutionConfiguration)

#define SolutionContexts__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define SolutionContexts_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define SolutionContexts_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_DTE_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionContexts_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_Parent_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionContexts_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SolutionContexts__NewEnum_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB SolutionContexts__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_Item_Proxy( 
    SolutionContexts * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ SolutionContext **ppOut);


void __RPC_STUB SolutionContexts_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_Count_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB SolutionContexts_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionContexts_INTERFACE_DEFINED__ */


#ifndef __Configurations_INTERFACE_DEFINED__
#define __Configurations_INTERFACE_DEFINED__

/* interface Configurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Configurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b6b4c8d6-4d27-43b9-b45c-52bd16b6ba38")
    Configurations : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Configuration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsConfigurationType *pType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Configurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Configurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Configurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Configurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Configurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Configurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Configurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Configurations * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Configurations * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Configurations * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Configurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Configuration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Configurations * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Configurations * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Configurations * This,
            /* [retval][out] */ vsConfigurationType *pType);
        
        END_INTERFACE
    } ConfigurationsVtbl;

    interface Configurations
    {
        CONST_VTBL struct ConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Configurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Configurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Configurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Configurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Configurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Configurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Configurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Configurations_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define Configurations_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define Configurations__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Configurations_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define Configurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define Configurations_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define Configurations_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_DTE_Proxy( 
    Configurations * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB Configurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Parent_Proxy( 
    Configurations * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB Configurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Configurations__NewEnum_Proxy( 
    Configurations * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Configurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Configurations_Item_Proxy( 
    Configurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB Configurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Count_Proxy( 
    Configurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB Configurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Name_Proxy( 
    Configurations * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configurations_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Type_Proxy( 
    Configurations * This,
    /* [retval][out] */ vsConfigurationType *pType);


void __RPC_STUB Configurations_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Configurations_INTERFACE_DEFINED__ */


#ifndef __ConfigurationManager_INTERFACE_DEFINED__
#define __ConfigurationManager_INTERFACE_DEFINED__

/* interface ConfigurationManager */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ConfigurationManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9043fda1-345b-4364-900f-bc8598eb8e4f")
    ConfigurationManager : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [defaultvalue] */ BSTR Platform,
            /* [retval][out] */ Configuration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationRow( 
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddConfigurationRow( 
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteConfigurationRow( 
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationRowNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Platform( 
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPlatform( 
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeletePlatform( 
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SupportedPlatforms( 
            /* [retval][out] */ VARIANT *pPlatforms) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfiguration( 
            /* [retval][out] */ Configuration **ppOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ConfigurationManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ConfigurationManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ConfigurationManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ConfigurationManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ConfigurationManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ConfigurationManager * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ConfigurationManager * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ConfigurationManager * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ConfigurationManager * This,
            /* [in] */ VARIANT Index,
            /* [defaultvalue] */ BSTR Platform,
            /* [retval][out] */ Configuration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ConfigurationManager * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationRow )( 
            ConfigurationManager * This,
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddConfigurationRow )( 
            ConfigurationManager * This,
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteConfigurationRow )( 
            ConfigurationManager * This,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationRowNames )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Platform )( 
            ConfigurationManager * This,
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPlatform )( 
            ConfigurationManager * This,
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeletePlatform )( 
            ConfigurationManager * This,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformNames )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportedPlatforms )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pPlatforms);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfiguration )( 
            ConfigurationManager * This,
            /* [retval][out] */ Configuration **ppOut);
        
        END_INTERFACE
    } ConfigurationManagerVtbl;

    interface ConfigurationManager
    {
        CONST_VTBL struct ConfigurationManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ConfigurationManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ConfigurationManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ConfigurationManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ConfigurationManager_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ConfigurationManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ConfigurationManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ConfigurationManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ConfigurationManager_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define ConfigurationManager_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define ConfigurationManager__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define ConfigurationManager_Item(This,Index,Platform,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,Platform,ppOut)

#define ConfigurationManager_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ConfigurationManager_ConfigurationRow(This,Name,ppOut)	\
    (This)->lpVtbl -> ConfigurationRow(This,Name,ppOut)

#define ConfigurationManager_AddConfigurationRow(This,NewName,ExistingName,Propagate,ppOut)	\
    (This)->lpVtbl -> AddConfigurationRow(This,NewName,ExistingName,Propagate,ppOut)

#define ConfigurationManager_DeleteConfigurationRow(This,Name)	\
    (This)->lpVtbl -> DeleteConfigurationRow(This,Name)

#define ConfigurationManager_get_ConfigurationRowNames(This,pNames)	\
    (This)->lpVtbl -> get_ConfigurationRowNames(This,pNames)

#define ConfigurationManager_Platform(This,Name,ppOut)	\
    (This)->lpVtbl -> Platform(This,Name,ppOut)

#define ConfigurationManager_AddPlatform(This,NewName,ExistingName,Propagate,ppOut)	\
    (This)->lpVtbl -> AddPlatform(This,NewName,ExistingName,Propagate,ppOut)

#define ConfigurationManager_DeletePlatform(This,Name)	\
    (This)->lpVtbl -> DeletePlatform(This,Name)

#define ConfigurationManager_get_PlatformNames(This,pNames)	\
    (This)->lpVtbl -> get_PlatformNames(This,pNames)

#define ConfigurationManager_get_SupportedPlatforms(This,pPlatforms)	\
    (This)->lpVtbl -> get_SupportedPlatforms(This,pPlatforms)

#define ConfigurationManager_get_ActiveConfiguration(This,ppOut)	\
    (This)->lpVtbl -> get_ActiveConfiguration(This,ppOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_DTE_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB ConfigurationManager_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_Parent_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB ConfigurationManager_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ConfigurationManager__NewEnum_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB ConfigurationManager__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_Item_Proxy( 
    ConfigurationManager * This,
    /* [in] */ VARIANT Index,
    /* [defaultvalue] */ BSTR Platform,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB ConfigurationManager_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_Count_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ConfigurationManager_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_ConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR Name,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_ConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_AddConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR NewName,
    BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_AddConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_DeleteConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR Name);


void __RPC_STUB ConfigurationManager_DeleteConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_ConfigurationRowNames_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB ConfigurationManager_get_ConfigurationRowNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_Platform_Proxy( 
    ConfigurationManager * This,
    BSTR Name,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_Platform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_AddPlatform_Proxy( 
    ConfigurationManager * This,
    BSTR NewName,
    BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_AddPlatform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_DeletePlatform_Proxy( 
    ConfigurationManager * This,
    BSTR Name);


void __RPC_STUB ConfigurationManager_DeletePlatform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_PlatformNames_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB ConfigurationManager_get_PlatformNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_SupportedPlatforms_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pPlatforms);


void __RPC_STUB ConfigurationManager_get_SupportedPlatforms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_ActiveConfiguration_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB ConfigurationManager_get_ActiveConfiguration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ConfigurationManager_INTERFACE_DEFINED__ */


#ifndef __Macros_INTERFACE_DEFINED__
#define __Macros_INTERFACE_DEFINED__

/* interface Macros */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Macros;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9f99155-6d4d-49b1-ad63-c78c3e8a5916")
    Macros : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsRecording( 
            /* [retval][out] */ VARIANT_BOOL *vbIsRecording) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EmitMacroCode( 
            BSTR Code) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MacrosVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Macros * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Macros * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Macros * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Macros * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Macros * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Macros * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Macros * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Macros * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Macros * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecording )( 
            Macros * This,
            /* [retval][out] */ VARIANT_BOOL *vbIsRecording);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EmitMacroCode )( 
            Macros * This,
            BSTR Code);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            Macros * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            Macros * This);
        
        END_INTERFACE
    } MacrosVtbl;

    interface Macros
    {
        CONST_VTBL struct MacrosVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Macros_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Macros_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Macros_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Macros_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Macros_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Macros_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Macros_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Macros_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define Macros_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define Macros_get_IsRecording(This,vbIsRecording)	\
    (This)->lpVtbl -> get_IsRecording(This,vbIsRecording)

#define Macros_EmitMacroCode(This,Code)	\
    (This)->lpVtbl -> EmitMacroCode(This,Code)

#define Macros_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define Macros_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Macros_get_DTE_Proxy( 
    Macros * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Macros_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Macros_get_Parent_Proxy( 
    Macros * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Macros_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Macros_get_IsRecording_Proxy( 
    Macros * This,
    /* [retval][out] */ VARIANT_BOOL *vbIsRecording);


void __RPC_STUB Macros_get_IsRecording_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_EmitMacroCode_Proxy( 
    Macros * This,
    BSTR Code);


void __RPC_STUB Macros_EmitMacroCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_Pause_Proxy( 
    Macros * This);


void __RPC_STUB Macros_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_Resume_Proxy( 
    Macros * This);


void __RPC_STUB Macros_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Macros_INTERFACE_DEFINED__ */


#ifndef __OutputGroups_INTERFACE_DEFINED__
#define __OutputGroups_INTERFACE_DEFINED__

/* interface OutputGroups */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputGroups;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9fa748e-e302-44cf-891b-e263189d585e")
    OutputGroups : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Configuration **ppConfiguration) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ OutputGroup **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputGroupsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputGroups * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputGroups * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputGroups * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputGroups * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputGroups * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputGroups * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputGroups * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputGroups * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputGroups * This,
            /* [retval][out] */ Configuration **ppConfiguration);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            OutputGroups * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            OutputGroups * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ OutputGroup **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            OutputGroups * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } OutputGroupsVtbl;

    interface OutputGroups
    {
        CONST_VTBL struct OutputGroupsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputGroups_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputGroups_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputGroups_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputGroups_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputGroups_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define OutputGroups_get_Parent(This,ppConfiguration)	\
    (This)->lpVtbl -> get_Parent(This,ppConfiguration)

#define OutputGroups__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define OutputGroups_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define OutputGroups_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_DTE_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB OutputGroups_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_Parent_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ Configuration **ppConfiguration);


void __RPC_STUB OutputGroups_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE OutputGroups__NewEnum_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB OutputGroups__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_Item_Proxy( 
    OutputGroups * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ OutputGroup **ppOut);


void __RPC_STUB OutputGroups_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_Count_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB OutputGroups_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputGroups_INTERFACE_DEFINED__ */


#ifndef __OutputGroup_INTERFACE_DEFINED__
#define __OutputGroup_INTERFACE_DEFINED__

/* interface OutputGroup */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3a80783-875f-435b-9639-e5ce888df737")
    OutputGroup : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ OutputGroups **ppOutputGroups) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCount( 
            /* [retval][out] */ long *pCountNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanonicalName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileURLs( 
            /* [retval][out] */ VARIANT *pURLs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *pDesc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputGroup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputGroup * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            OutputGroup * This,
            /* [retval][out] */ OutputGroups **ppOutputGroups);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileNames )( 
            OutputGroup * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCount )( 
            OutputGroup * This,
            /* [retval][out] */ long *pCountNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanonicalName )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileURLs )( 
            OutputGroup * This,
            /* [retval][out] */ VARIANT *pURLs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pDesc);
        
        END_INTERFACE
    } OutputGroupVtbl;

    interface OutputGroup
    {
        CONST_VTBL struct OutputGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputGroup_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputGroup_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputGroup_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputGroup_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputGroup_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define OutputGroup_get_Collection(This,ppOutputGroups)	\
    (This)->lpVtbl -> get_Collection(This,ppOutputGroups)

#define OutputGroup_get_FileNames(This,pNames)	\
    (This)->lpVtbl -> get_FileNames(This,pNames)

#define OutputGroup_get_FileCount(This,pCountNames)	\
    (This)->lpVtbl -> get_FileCount(This,pCountNames)

#define OutputGroup_get_DisplayName(This,pName)	\
    (This)->lpVtbl -> get_DisplayName(This,pName)

#define OutputGroup_get_CanonicalName(This,pName)	\
    (This)->lpVtbl -> get_CanonicalName(This,pName)

#define OutputGroup_get_FileURLs(This,pURLs)	\
    (This)->lpVtbl -> get_FileURLs(This,pURLs)

#define OutputGroup_get_Description(This,pDesc)	\
    (This)->lpVtbl -> get_Description(This,pDesc)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_DTE_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB OutputGroup_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_Collection_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ OutputGroups **ppOutputGroups);


void __RPC_STUB OutputGroup_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileNames_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB OutputGroup_get_FileNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileCount_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ long *pCountNames);


void __RPC_STUB OutputGroup_get_FileCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_DisplayName_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputGroup_get_DisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_CanonicalName_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputGroup_get_CanonicalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileURLs_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ VARIANT *pURLs);


void __RPC_STUB OutputGroup_get_FileURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_Description_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pDesc);


void __RPC_STUB OutputGroup_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputGroup_INTERFACE_DEFINED__ */


#ifndef __ContextAttributes_INTERFACE_DEFINED__
#define __ContextAttributes_INTERFACE_DEFINED__

/* interface ContextAttributes */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ContextAttributes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33c5ebb8-244e-449d-9cee-fad70a774e59")
    ContextAttributes : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ContextAttribute **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            BSTR AttributeName,
            BSTR AttributeValue,
            vsContextAttributeType Type,
            /* [retval][out] */ ContextAttribute **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsContextAttributes *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HighPriorityAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ContextAttributesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ContextAttributes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ContextAttributes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ContextAttributes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ContextAttributes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ContextAttributes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ContextAttributes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ContextAttributes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ContextAttributes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ContextAttributes * This,
            VARIANT Index,
            /* [retval][out] */ ContextAttribute **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ContextAttributes * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ContextAttributes * This,
            /* [retval][out] */ IDispatch **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ContextAttributes * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ContextAttributes * This,
            BSTR AttributeName,
            BSTR AttributeValue,
            vsContextAttributeType Type,
            /* [retval][out] */ ContextAttribute **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ContextAttributes * This,
            /* [retval][out] */ vsContextAttributes *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HighPriorityAttributes )( 
            ContextAttributes * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            ContextAttributes * This);
        
        END_INTERFACE
    } ContextAttributesVtbl;

    interface ContextAttributes
    {
        CONST_VTBL struct ContextAttributesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ContextAttributes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ContextAttributes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ContextAttributes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ContextAttributes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ContextAttributes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ContextAttributes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ContextAttributes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ContextAttributes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ContextAttributes_Item(This,Index,ppVal)	\
    (This)->lpVtbl -> Item(This,Index,ppVal)

#define ContextAttributes_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ContextAttributes_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ContextAttributes_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#define ContextAttributes_Add(This,AttributeName,AttributeValue,Type,ppVal)	\
    (This)->lpVtbl -> Add(This,AttributeName,AttributeValue,Type,ppVal)

#define ContextAttributes_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define ContextAttributes_get_HighPriorityAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_HighPriorityAttributes(This,ppVal)

#define ContextAttributes_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes__NewEnum_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ContextAttributes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Item_Proxy( 
    ContextAttributes * This,
    VARIANT Index,
    /* [retval][out] */ ContextAttribute **ppVal);


void __RPC_STUB ContextAttributes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_DTE_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ContextAttributes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Parent_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ IDispatch **lppaReturn);


void __RPC_STUB ContextAttributes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Count_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB ContextAttributes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Add_Proxy( 
    ContextAttributes * This,
    BSTR AttributeName,
    BSTR AttributeValue,
    vsContextAttributeType Type,
    /* [retval][out] */ ContextAttribute **ppVal);


void __RPC_STUB ContextAttributes_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Type_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ vsContextAttributes *Type);


void __RPC_STUB ContextAttributes_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_HighPriorityAttributes_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB ContextAttributes_get_HighPriorityAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Refresh_Proxy( 
    ContextAttributes * This);


void __RPC_STUB ContextAttributes_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ContextAttributes_INTERFACE_DEFINED__ */


#ifndef __SourceControl_INTERFACE_DEFINED__
#define __SourceControl_INTERFACE_DEFINED__

/* interface SourceControl */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SourceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f1ddc2c2-df76-4ebb-9de8-48ad2557062c")
    SourceControl : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**ppDTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsItemUnderSCC( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfControlled) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsItemCheckedOut( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOutItem( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOutItems( 
            /* [in] */ SAFEARRAY * *ItemNames,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExcludeItem( 
            /* [in] */ BSTR ProjectFile,
            /* [in] */ BSTR ItemName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExcludeItems( 
            /* [in] */ BSTR ProjectFile,
            /* [in] */ SAFEARRAY * *ItemNames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SourceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SourceControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SourceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SourceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SourceControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SourceControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SourceControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SourceControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SourceControl * This,
            /* [retval][out] */ DTE	**ppDTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SourceControl * This,
            /* [retval][out] */ DTE	**ppDTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsItemUnderSCC )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfControlled);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsItemCheckedOut )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOutItem )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOutItems )( 
            SourceControl * This,
            /* [in] */ SAFEARRAY * *ItemNames,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExcludeItem )( 
            SourceControl * This,
            /* [in] */ BSTR ProjectFile,
            /* [in] */ BSTR ItemName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExcludeItems )( 
            SourceControl * This,
            /* [in] */ BSTR ProjectFile,
            /* [in] */ SAFEARRAY * *ItemNames);
        
        END_INTERFACE
    } SourceControlVtbl;

    interface SourceControl
    {
        CONST_VTBL struct SourceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SourceControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SourceControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SourceControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SourceControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SourceControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SourceControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SourceControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SourceControl_get_DTE(This,ppDTEObject)	\
    (This)->lpVtbl -> get_DTE(This,ppDTEObject)

#define SourceControl_get_Parent(This,ppDTEObject)	\
    (This)->lpVtbl -> get_Parent(This,ppDTEObject)

#define SourceControl_IsItemUnderSCC(This,ItemName,pfControlled)	\
    (This)->lpVtbl -> IsItemUnderSCC(This,ItemName,pfControlled)

#define SourceControl_IsItemCheckedOut(This,ItemName,pfCheckedOut)	\
    (This)->lpVtbl -> IsItemCheckedOut(This,ItemName,pfCheckedOut)

#define SourceControl_CheckOutItem(This,ItemName,pfCheckedOut)	\
    (This)->lpVtbl -> CheckOutItem(This,ItemName,pfCheckedOut)

#define SourceControl_CheckOutItems(This,ItemNames,pfCheckedOut)	\
    (This)->lpVtbl -> CheckOutItems(This,ItemNames,pfCheckedOut)

#define SourceControl_ExcludeItem(This,ProjectFile,ItemName)	\
    (This)->lpVtbl -> ExcludeItem(This,ProjectFile,ItemName)

#define SourceControl_ExcludeItems(This,ProjectFile,ItemNames)	\
    (This)->lpVtbl -> ExcludeItems(This,ProjectFile,ItemNames)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SourceControl_get_DTE_Proxy( 
    SourceControl * This,
    /* [retval][out] */ DTE	**ppDTEObject);


void __RPC_STUB SourceControl_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SourceControl_get_Parent_Proxy( 
    SourceControl * This,
    /* [retval][out] */ DTE	**ppDTEObject);


void __RPC_STUB SourceControl_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_IsItemUnderSCC_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfControlled);


void __RPC_STUB SourceControl_IsItemUnderSCC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_IsItemCheckedOut_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_IsItemCheckedOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_CheckOutItem_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_CheckOutItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_CheckOutItems_Proxy( 
    SourceControl * This,
    /* [in] */ SAFEARRAY * *ItemNames,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_CheckOutItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE SourceControl_ExcludeItem_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ProjectFile,
    /* [in] */ BSTR ItemName);


void __RPC_STUB SourceControl_ExcludeItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE SourceControl_ExcludeItems_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ProjectFile,
    /* [in] */ SAFEARRAY * *ItemNames);


void __RPC_STUB SourceControl_ExcludeItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SourceControl_INTERFACE_DEFINED__ */


#ifndef __TextPoint_INTERFACE_DEFINED__
#define __TextPoint_INTERFACE_DEFINED__

/* interface TextPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f59e94e-4939-40d2-9f7f-b7651c25905d")
    TextPoint : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineCharOffset( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AbsoluteCharOffset( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayColumn( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtEndOfDocument( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtStartOfDocument( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtEndOfLine( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtStartOfLine( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineLength( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EqualTo( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LessThan( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GreaterThan( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TryToShow( 
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElement( 
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateEditPoint( 
            /* [retval][out] */ EditPoint **lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            TextPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            TextPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            TextPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        END_INTERFACE
    } TextPointVtbl;

    interface TextPoint
    {
        CONST_VTBL struct TextPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define TextPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define TextPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define TextPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define TextPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define TextPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define TextPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define TextPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define TextPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define TextPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define TextPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define TextPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define TextPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define TextPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define TextPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define TextPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define TextPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_DTE_Proxy( 
    TextPoint * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB TextPoint_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_Parent_Proxy( 
    TextPoint * This,
    /* [retval][out] */ TextDocument **lppaReturn);


void __RPC_STUB TextPoint_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_Line_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_LineCharOffset_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_LineCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AbsoluteCharOffset_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_AbsoluteCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_DisplayColumn_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_DisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtEndOfDocument_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtEndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtStartOfDocument_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtStartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtEndOfLine_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtEndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtStartOfLine_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtStartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_LineLength_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_LineLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_EqualTo_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_EqualTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_LessThan_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_LessThan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_GreaterThan_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_GreaterThan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_TryToShow_Proxy( 
    TextPoint * This,
    /* [defaultvalue][in] */ vsPaneShowHow How,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPoint_TryToShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_CodeElement_Proxy( 
    TextPoint * This,
    /* [in] */ vsCMElement Scope,
    /* [retval][out] */ CodeElement **ppResult);


void __RPC_STUB TextPoint_get_CodeElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_CreateEditPoint_Proxy( 
    TextPoint * This,
    /* [retval][out] */ EditPoint **lppaReturn);


void __RPC_STUB TextPoint_CreateEditPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPoint_INTERFACE_DEFINED__ */


#ifndef __EditPoint_INTERFACE_DEFINED__
#define __EditPoint_INTERFACE_DEFINED__

/* interface EditPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_EditPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c1ffe800-028b-4475-a907-14f51f19bb7d")
    EditPoint : public TextPoint
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharRight( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfDocument( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfDocument( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordRight( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineUp( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineDown( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToPoint( 
            /* [in] */ TextPoint *Point) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToLineAndOffset( 
            /* [in] */ long Line,
            /* [in] */ long Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToAbsoluteOffset( 
            /* [in] */ long Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PadToColumn( 
            /* [in] */ long Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFromFile( 
            /* [in] */ BSTR File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ BSTR *pbstrText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetLines( 
            /* [in] */ long Start,
            /* [in] */ long ExclusiveEnd,
            /* [retval][out] */ BSTR *pbstrText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( 
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VARIANT PointOrCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReadOnly( 
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *lfResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPattern( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ EditPoint **EndPoint,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ TextPoint *Point,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( 
            /* [defaultvalue][in] */ TextPoint *Point = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unindent( 
            /* [defaultvalue][in] */ TextPoint *Point = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmartFormat( 
            /* [in] */ TextPoint *Point) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineSection( 
            /* [in] */ VARIANT PointOrCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ BSTR Text,
            /* [in] */ long Flags) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeCase( 
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ vsCaseOptions How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWhitespace( 
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction = vsWhitespaceOptionsHorizontal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EditPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EditPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EditPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EditPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EditPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EditPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EditPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EditPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            EditPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EditPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            EditPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            EditPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            EditPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharLeft )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharRight )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfLine )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfLine )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfDocument )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfDocument )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordLeft )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordRight )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineUp )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineDown )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToPoint )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToLineAndOffset )( 
            EditPoint * This,
            /* [in] */ long Line,
            /* [in] */ long Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToAbsoluteOffset )( 
            EditPoint * This,
            /* [in] */ long Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBookmark )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmark )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextBookmark )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousBookmark )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PadToColumn )( 
            EditPoint * This,
            /* [in] */ long Column);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            EditPoint * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFromFile )( 
            EditPoint * This,
            /* [in] */ BSTR File);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetText )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ BSTR *pbstrText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetLines )( 
            EditPoint * This,
            /* [in] */ long Start,
            /* [in] */ long ExclusiveEnd,
            /* [retval][out] */ BSTR *pbstrText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReadOnly )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *lfResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPattern )( 
            EditPoint * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ EditPoint **EndPoint,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            EditPoint * This,
            /* [defaultvalue][in] */ TextPoint *Point,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unindent )( 
            EditPoint * This,
            /* [defaultvalue][in] */ TextPoint *Point,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmartFormat )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineSection )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ BSTR Text,
            /* [in] */ long Flags);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCase )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ vsCaseOptions How);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWhitespace )( 
            EditPoint * This,
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction);
        
        END_INTERFACE
    } EditPointVtbl;

    interface EditPoint
    {
        CONST_VTBL struct EditPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EditPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define EditPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define EditPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define EditPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define EditPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define EditPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define EditPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define EditPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define EditPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define EditPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define EditPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define EditPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define EditPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define EditPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define EditPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define EditPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define EditPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define EditPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define EditPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define EditPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define EditPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define EditPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define EditPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define EditPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)


#define EditPoint_CharLeft(This,Count)	\
    (This)->lpVtbl -> CharLeft(This,Count)

#define EditPoint_CharRight(This,Count)	\
    (This)->lpVtbl -> CharRight(This,Count)

#define EditPoint_EndOfLine(This)	\
    (This)->lpVtbl -> EndOfLine(This)

#define EditPoint_StartOfLine(This)	\
    (This)->lpVtbl -> StartOfLine(This)

#define EditPoint_EndOfDocument(This)	\
    (This)->lpVtbl -> EndOfDocument(This)

#define EditPoint_StartOfDocument(This)	\
    (This)->lpVtbl -> StartOfDocument(This)

#define EditPoint_WordLeft(This,Count)	\
    (This)->lpVtbl -> WordLeft(This,Count)

#define EditPoint_WordRight(This,Count)	\
    (This)->lpVtbl -> WordRight(This,Count)

#define EditPoint_LineUp(This,Count)	\
    (This)->lpVtbl -> LineUp(This,Count)

#define EditPoint_LineDown(This,Count)	\
    (This)->lpVtbl -> LineDown(This,Count)

#define EditPoint_MoveToPoint(This,Point)	\
    (This)->lpVtbl -> MoveToPoint(This,Point)

#define EditPoint_MoveToLineAndOffset(This,Line,Offset)	\
    (This)->lpVtbl -> MoveToLineAndOffset(This,Line,Offset)

#define EditPoint_MoveToAbsoluteOffset(This,Offset)	\
    (This)->lpVtbl -> MoveToAbsoluteOffset(This,Offset)

#define EditPoint_SetBookmark(This)	\
    (This)->lpVtbl -> SetBookmark(This)

#define EditPoint_ClearBookmark(This)	\
    (This)->lpVtbl -> ClearBookmark(This)

#define EditPoint_NextBookmark(This,pbFound)	\
    (This)->lpVtbl -> NextBookmark(This,pbFound)

#define EditPoint_PreviousBookmark(This,pbFound)	\
    (This)->lpVtbl -> PreviousBookmark(This,pbFound)

#define EditPoint_PadToColumn(This,Column)	\
    (This)->lpVtbl -> PadToColumn(This,Column)

#define EditPoint_Insert(This,Text)	\
    (This)->lpVtbl -> Insert(This,Text)

#define EditPoint_InsertFromFile(This,File)	\
    (This)->lpVtbl -> InsertFromFile(This,File)

#define EditPoint_GetText(This,PointOrCount,pbstrText)	\
    (This)->lpVtbl -> GetText(This,PointOrCount,pbstrText)

#define EditPoint_GetLines(This,Start,ExclusiveEnd,pbstrText)	\
    (This)->lpVtbl -> GetLines(This,Start,ExclusiveEnd,pbstrText)

#define EditPoint_Copy(This,PointOrCount,Append)	\
    (This)->lpVtbl -> Copy(This,PointOrCount,Append)

#define EditPoint_Cut(This,PointOrCount,Append)	\
    (This)->lpVtbl -> Cut(This,PointOrCount,Append)

#define EditPoint_Delete(This,PointOrCount)	\
    (This)->lpVtbl -> Delete(This,PointOrCount)

#define EditPoint_Paste(This)	\
    (This)->lpVtbl -> Paste(This)

#define EditPoint_ReadOnly(This,PointOrCount,lfResult)	\
    (This)->lpVtbl -> ReadOnly(This,PointOrCount,lfResult)

#define EditPoint_FindPattern(This,Pattern,vsFindOptionsValue,EndPoint,Tags,pbFound)	\
    (This)->lpVtbl -> FindPattern(This,Pattern,vsFindOptionsValue,EndPoint,Tags,pbFound)

#define EditPoint_ReplacePattern(This,Point,Pattern,Replace,vsFindOptionsValue,Tags,pbFound)	\
    (This)->lpVtbl -> ReplacePattern(This,Point,Pattern,Replace,vsFindOptionsValue,Tags,pbFound)

#define EditPoint_Indent(This,Point,Count)	\
    (This)->lpVtbl -> Indent(This,Point,Count)

#define EditPoint_Unindent(This,Point,Count)	\
    (This)->lpVtbl -> Unindent(This,Point,Count)

#define EditPoint_SmartFormat(This,Point)	\
    (This)->lpVtbl -> SmartFormat(This,Point)

#define EditPoint_OutlineSection(This,PointOrCount)	\
    (This)->lpVtbl -> OutlineSection(This,PointOrCount)

#define EditPoint_ReplaceText(This,PointOrCount,Text,Flags)	\
    (This)->lpVtbl -> ReplaceText(This,PointOrCount,Text,Flags)

#define EditPoint_ChangeCase(This,PointOrCount,How)	\
    (This)->lpVtbl -> ChangeCase(This,PointOrCount,How)

#define EditPoint_DeleteWhitespace(This,Direction)	\
    (This)->lpVtbl -> DeleteWhitespace(This,Direction)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_CharLeft_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_CharLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_CharRight_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_CharRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_EndOfLine_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_EndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_StartOfLine_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_StartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_EndOfDocument_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_EndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_StartOfDocument_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_StartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_WordLeft_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_WordLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_WordRight_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_WordRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_LineUp_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_LineUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_LineDown_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_LineDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToPoint_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point);


void __RPC_STUB EditPoint_MoveToPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToLineAndOffset_Proxy( 
    EditPoint * This,
    /* [in] */ long Line,
    /* [in] */ long Offset);


void __RPC_STUB EditPoint_MoveToLineAndOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToAbsoluteOffset_Proxy( 
    EditPoint * This,
    /* [in] */ long Offset);


void __RPC_STUB EditPoint_MoveToAbsoluteOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_SetBookmark_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_SetBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ClearBookmark_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_ClearBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_NextBookmark_Proxy( 
    EditPoint * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_NextBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_PreviousBookmark_Proxy( 
    EditPoint * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_PreviousBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_PadToColumn_Proxy( 
    EditPoint * This,
    /* [in] */ long Column);


void __RPC_STUB EditPoint_PadToColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Insert_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR Text);


void __RPC_STUB EditPoint_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_InsertFromFile_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR File);


void __RPC_STUB EditPoint_InsertFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_GetText_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [retval][out] */ BSTR *pbstrText);


void __RPC_STUB EditPoint_GetText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_GetLines_Proxy( 
    EditPoint * This,
    /* [in] */ long Start,
    /* [in] */ long ExclusiveEnd,
    /* [retval][out] */ BSTR *pbstrText);


void __RPC_STUB EditPoint_GetLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Copy_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [defaultvalue][in] */ VARIANT_BOOL Append);


void __RPC_STUB EditPoint_Copy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Cut_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [defaultvalue][in] */ VARIANT_BOOL Append);


void __RPC_STUB EditPoint_Cut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Delete_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount);


void __RPC_STUB EditPoint_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Paste_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_Paste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReadOnly_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *lfResult);


void __RPC_STUB EditPoint_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_FindPattern_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ EditPoint **EndPoint,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_FindPattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReplacePattern_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Indent_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ TextPoint *Point,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_Indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Unindent_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ TextPoint *Point,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_Unindent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_SmartFormat_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point);


void __RPC_STUB EditPoint_SmartFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_OutlineSection_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount);


void __RPC_STUB EditPoint_OutlineSection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReplaceText_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [in] */ BSTR Text,
    /* [in] */ long Flags);


void __RPC_STUB EditPoint_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ChangeCase_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [in] */ vsCaseOptions How);


void __RPC_STUB EditPoint_ChangeCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_DeleteWhitespace_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ vsWhitespaceOptions Direction);


void __RPC_STUB EditPoint_DeleteWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __EditPoint_INTERFACE_DEFINED__ */


#ifndef __TextSelection_INTERFACE_DEFINED__
#define __TextSelection_INTERFACE_DEFINED__

/* interface TextSelection */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextSelection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1fa0e135-399a-4d2c-a4fe-d21e2480f921")
    TextSelection : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnchorPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnchorColumn( 
            /* [retval][out] */ long *pColumn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentColumn( 
            /* [retval][out] */ long *pColumn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEmpty( 
            /* [retval][out] */ VARIANT_BOOL *pfEmpty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsActiveEndGreater( 
            /* [retval][out] */ VARIANT_BOOL *pfGreater) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *pText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeCase( 
            /* [in] */ vsCaseOptions How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharLeft( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharRight( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Collapse( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineSection( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWhitespace( 
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction = vsWhitespaceOptionsHorizontal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfLine( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfLine( 
            /* [defaultvalue][in] */ vsStartOfLineOptions Where = vsStartOfLineOptionsFirstColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfDocument( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfDocument( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPattern( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoLine( 
            /* [in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL Select = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unindent( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR Text,
            /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue = vsInsertFlagsCollapseToEnd) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFromFile( 
            /* [in] */ BSTR File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineDown( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineUp( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToPoint( 
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToLineAndOffset( 
            /* [in] */ long Line,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToAbsoluteOffset( 
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewLine( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PadToColumn( 
            /* [in] */ long Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmartFormat( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapAnchor( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Tabify( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Untabify( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordLeft( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordRight( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPane( 
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ vsSelectionMode *pMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Mode( 
            /* [in] */ vsSelectionMode Mode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRanges( 
            /* [retval][out] */ TextRanges **ppRanges) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Backspace( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DestructiveInsert( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToDisplayColumn( 
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageUp( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageDown( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextSelectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextSelection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextSelection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextSelection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextSelection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextSelection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextSelection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextSelection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextSelection * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextSelection * This,
            /* [retval][out] */ TextDocument **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnchorPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnchorColumn )( 
            TextSelection * This,
            /* [retval][out] */ long *pColumn);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentColumn )( 
            TextSelection * This,
            /* [retval][out] */ long *pColumn);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmpty )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pfEmpty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsActiveEndGreater )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pfGreater);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TextSelection * This,
            /* [retval][out] */ BSTR *pText);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TextSelection * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCase )( 
            TextSelection * This,
            /* [in] */ vsCaseOptions How);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharRight )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmark )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineSection )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWhitespace )( 
            TextSelection * This,
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ vsStartOfLineOptions Where,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfDocument )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfDocument )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPattern )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindText )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoLine )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL Select);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unindent )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            TextSelection * This,
            /* [in] */ BSTR Text,
            /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFromFile )( 
            TextSelection * This,
            /* [in] */ BSTR File);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineDown )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineUp )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToPoint )( 
            TextSelection * This,
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToLineAndOffset )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToAbsoluteOffset )( 
            TextSelection * This,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBookmark )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextBookmark )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousBookmark )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PadToColumn )( 
            TextSelection * This,
            /* [in] */ long Column);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmartFormat )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectLine )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapAnchor )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Tabify )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Untabify )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordRight )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPane )( 
            TextSelection * This,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            TextSelection * This,
            /* [retval][out] */ vsSelectionMode *pMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            TextSelection * This,
            /* [in] */ vsSelectionMode Mode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRanges )( 
            TextSelection * This,
            /* [retval][out] */ TextRanges **ppRanges);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Backspace )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DestructiveInsert )( 
            TextSelection * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToDisplayColumn )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageUp )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageDown )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        END_INTERFACE
    } TextSelectionVtbl;

    interface TextSelection
    {
        CONST_VTBL struct TextSelectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextSelection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextSelection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextSelection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextSelection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextSelection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextSelection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextSelection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextSelection_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextSelection_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextSelection_get_AnchorPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_AnchorPoint(This,ppPoint)

#define TextSelection_get_ActivePoint(This,ppPoint)	\
    (This)->lpVtbl -> get_ActivePoint(This,ppPoint)

#define TextSelection_get_AnchorColumn(This,pColumn)	\
    (This)->lpVtbl -> get_AnchorColumn(This,pColumn)

#define TextSelection_get_BottomLine(This,pLine)	\
    (This)->lpVtbl -> get_BottomLine(This,pLine)

#define TextSelection_get_BottomPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_BottomPoint(This,ppPoint)

#define TextSelection_get_CurrentColumn(This,pColumn)	\
    (This)->lpVtbl -> get_CurrentColumn(This,pColumn)

#define TextSelection_get_CurrentLine(This,pLine)	\
    (This)->lpVtbl -> get_CurrentLine(This,pLine)

#define TextSelection_get_IsEmpty(This,pfEmpty)	\
    (This)->lpVtbl -> get_IsEmpty(This,pfEmpty)

#define TextSelection_get_IsActiveEndGreater(This,pfGreater)	\
    (This)->lpVtbl -> get_IsActiveEndGreater(This,pfGreater)

#define TextSelection_get_Text(This,pText)	\
    (This)->lpVtbl -> get_Text(This,pText)

#define TextSelection_put_Text(This,Text)	\
    (This)->lpVtbl -> put_Text(This,Text)

#define TextSelection_get_TopLine(This,pLine)	\
    (This)->lpVtbl -> get_TopLine(This,pLine)

#define TextSelection_get_TopPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_TopPoint(This,ppPoint)

#define TextSelection_ChangeCase(This,How)	\
    (This)->lpVtbl -> ChangeCase(This,How)

#define TextSelection_CharLeft(This,Extend,Count)	\
    (This)->lpVtbl -> CharLeft(This,Extend,Count)

#define TextSelection_CharRight(This,Extend,Count)	\
    (This)->lpVtbl -> CharRight(This,Extend,Count)

#define TextSelection_ClearBookmark(This)	\
    (This)->lpVtbl -> ClearBookmark(This)

#define TextSelection_Collapse(This)	\
    (This)->lpVtbl -> Collapse(This)

#define TextSelection_OutlineSection(This)	\
    (This)->lpVtbl -> OutlineSection(This)

#define TextSelection_Copy(This)	\
    (This)->lpVtbl -> Copy(This)

#define TextSelection_Cut(This)	\
    (This)->lpVtbl -> Cut(This)

#define TextSelection_Paste(This)	\
    (This)->lpVtbl -> Paste(This)

#define TextSelection_Delete(This,Count)	\
    (This)->lpVtbl -> Delete(This,Count)

#define TextSelection_DeleteLeft(This,Count)	\
    (This)->lpVtbl -> DeleteLeft(This,Count)

#define TextSelection_DeleteWhitespace(This,Direction)	\
    (This)->lpVtbl -> DeleteWhitespace(This,Direction)

#define TextSelection_EndOfLine(This,Extend)	\
    (This)->lpVtbl -> EndOfLine(This,Extend)

#define TextSelection_StartOfLine(This,Where,Extend)	\
    (This)->lpVtbl -> StartOfLine(This,Where,Extend)

#define TextSelection_EndOfDocument(This,Extend)	\
    (This)->lpVtbl -> EndOfDocument(This,Extend)

#define TextSelection_StartOfDocument(This,Extend)	\
    (This)->lpVtbl -> StartOfDocument(This,Extend)

#define TextSelection_FindPattern(This,Pattern,vsFindOptionsValue,Tags,pfFound)	\
    (This)->lpVtbl -> FindPattern(This,Pattern,vsFindOptionsValue,Tags,pfFound)

#define TextSelection_ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pfFound)	\
    (This)->lpVtbl -> ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pfFound)

#define TextSelection_FindText(This,Pattern,vsFindOptionsValue,pfFound)	\
    (This)->lpVtbl -> FindText(This,Pattern,vsFindOptionsValue,pfFound)

#define TextSelection_ReplaceText(This,Pattern,Replace,vsFindOptionsValue,pfFound)	\
    (This)->lpVtbl -> ReplaceText(This,Pattern,Replace,vsFindOptionsValue,pfFound)

#define TextSelection_GotoLine(This,Line,Select)	\
    (This)->lpVtbl -> GotoLine(This,Line,Select)

#define TextSelection_Indent(This,Count)	\
    (This)->lpVtbl -> Indent(This,Count)

#define TextSelection_Unindent(This,Count)	\
    (This)->lpVtbl -> Unindent(This,Count)

#define TextSelection_Insert(This,Text,vsInsertFlagsCollapseToEndValue)	\
    (This)->lpVtbl -> Insert(This,Text,vsInsertFlagsCollapseToEndValue)

#define TextSelection_InsertFromFile(This,File)	\
    (This)->lpVtbl -> InsertFromFile(This,File)

#define TextSelection_LineDown(This,Extend,Count)	\
    (This)->lpVtbl -> LineDown(This,Extend,Count)

#define TextSelection_LineUp(This,Extend,Count)	\
    (This)->lpVtbl -> LineUp(This,Extend,Count)

#define TextSelection_MoveToPoint(This,Point,Extend)	\
    (This)->lpVtbl -> MoveToPoint(This,Point,Extend)

#define TextSelection_MoveToLineAndOffset(This,Line,Offset,Extend)	\
    (This)->lpVtbl -> MoveToLineAndOffset(This,Line,Offset,Extend)

#define TextSelection_MoveToAbsoluteOffset(This,Offset,Extend)	\
    (This)->lpVtbl -> MoveToAbsoluteOffset(This,Offset,Extend)

#define TextSelection_NewLine(This,Count)	\
    (This)->lpVtbl -> NewLine(This,Count)

#define TextSelection_SetBookmark(This)	\
    (This)->lpVtbl -> SetBookmark(This)

#define TextSelection_NextBookmark(This,pbFound)	\
    (This)->lpVtbl -> NextBookmark(This,pbFound)

#define TextSelection_PreviousBookmark(This,pbFound)	\
    (This)->lpVtbl -> PreviousBookmark(This,pbFound)

#define TextSelection_PadToColumn(This,Column)	\
    (This)->lpVtbl -> PadToColumn(This,Column)

#define TextSelection_SmartFormat(This)	\
    (This)->lpVtbl -> SmartFormat(This)

#define TextSelection_SelectAll(This)	\
    (This)->lpVtbl -> SelectAll(This)

#define TextSelection_SelectLine(This)	\
    (This)->lpVtbl -> SelectLine(This)

#define TextSelection_SwapAnchor(This)	\
    (This)->lpVtbl -> SwapAnchor(This)

#define TextSelection_Tabify(This)	\
    (This)->lpVtbl -> Tabify(This)

#define TextSelection_Untabify(This)	\
    (This)->lpVtbl -> Untabify(This)

#define TextSelection_WordLeft(This,Extend,Count)	\
    (This)->lpVtbl -> WordLeft(This,Extend,Count)

#define TextSelection_WordRight(This,Extend,Count)	\
    (This)->lpVtbl -> WordRight(This,Extend,Count)

#define TextSelection_get_TextPane(This,ppPane)	\
    (This)->lpVtbl -> get_TextPane(This,ppPane)

#define TextSelection_get_Mode(This,pMode)	\
    (This)->lpVtbl -> get_Mode(This,pMode)

#define TextSelection_put_Mode(This,Mode)	\
    (This)->lpVtbl -> put_Mode(This,Mode)

#define TextSelection_get_TextRanges(This,ppRanges)	\
    (This)->lpVtbl -> get_TextRanges(This,ppRanges)

#define TextSelection_Backspace(This,Count)	\
    (This)->lpVtbl -> Backspace(This,Count)

#define TextSelection_Cancel(This)	\
    (This)->lpVtbl -> Cancel(This)

#define TextSelection_DestructiveInsert(This,Text)	\
    (This)->lpVtbl -> DestructiveInsert(This,Text)

#define TextSelection_MoveTo(This,Line,Column,Extend)	\
    (This)->lpVtbl -> MoveTo(This,Line,Column,Extend)

#define TextSelection_MoveToDisplayColumn(This,Line,Column,Extend)	\
    (This)->lpVtbl -> MoveToDisplayColumn(This,Line,Column,Extend)

#define TextSelection_PageUp(This,Extend,Count)	\
    (This)->lpVtbl -> PageUp(This,Extend,Count)

#define TextSelection_PageDown(This,Extend,Count)	\
    (This)->lpVtbl -> PageDown(This,Extend,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_DTE_Proxy( 
    TextSelection * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextSelection_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Parent_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextDocument **ppParent);


void __RPC_STUB TextSelection_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_AnchorPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_AnchorPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_ActivePoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_ActivePoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_AnchorColumn_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pColumn);


void __RPC_STUB TextSelection_get_AnchorColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_BottomLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_BottomLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_BottomPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_BottomPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_CurrentColumn_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pColumn);


void __RPC_STUB TextSelection_get_CurrentColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_CurrentLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_CurrentLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_IsEmpty_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pfEmpty);


void __RPC_STUB TextSelection_get_IsEmpty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_IsActiveEndGreater_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pfGreater);


void __RPC_STUB TextSelection_get_IsActiveEndGreater_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Text_Proxy( 
    TextSelection * This,
    /* [retval][out] */ BSTR *pText);


void __RPC_STUB TextSelection_get_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextSelection_put_Text_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text);


void __RPC_STUB TextSelection_put_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TopLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_TopLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TopPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_TopPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ChangeCase_Proxy( 
    TextSelection * This,
    /* [in] */ vsCaseOptions How);


void __RPC_STUB TextSelection_ChangeCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_CharLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_CharLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_CharRight_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_CharRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ClearBookmark_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_ClearBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Collapse_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Collapse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_OutlineSection_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_OutlineSection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Copy_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Copy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Cut_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Cut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Paste_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Paste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Delete_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DeleteLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_DeleteLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DeleteWhitespace_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ vsWhitespaceOptions Direction);


void __RPC_STUB TextSelection_DeleteWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_EndOfLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_EndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_StartOfLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ vsStartOfLineOptions Where,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_StartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_EndOfDocument_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_EndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_StartOfDocument_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_StartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_FindPattern_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_FindPattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ReplacePattern_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_FindText_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_FindText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ReplaceText_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_GotoLine_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [defaultvalue][in] */ VARIANT_BOOL Select);


void __RPC_STUB TextSelection_GotoLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Indent_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Unindent_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Unindent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Insert_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text,
    /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue);


void __RPC_STUB TextSelection_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_InsertFromFile_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR File);


void __RPC_STUB TextSelection_InsertFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_LineDown_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_LineDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_LineUp_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_LineUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToPoint_Proxy( 
    TextSelection * This,
    /* [in] */ TextPoint *Point,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToLineAndOffset_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Offset,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToLineAndOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToAbsoluteOffset_Proxy( 
    TextSelection * This,
    /* [in] */ long Offset,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToAbsoluteOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_NewLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_NewLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SetBookmark_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SetBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_NextBookmark_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB TextSelection_NextBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PreviousBookmark_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB TextSelection_PreviousBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PadToColumn_Proxy( 
    TextSelection * This,
    /* [in] */ long Column);


void __RPC_STUB TextSelection_PadToColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SmartFormat_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SmartFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SelectAll_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SelectAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SelectLine_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SelectLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SwapAnchor_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SwapAnchor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Tabify_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Tabify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Untabify_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Untabify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_WordLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_WordLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_WordRight_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_WordRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TextPane_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextSelection_get_TextPane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Mode_Proxy( 
    TextSelection * This,
    /* [retval][out] */ vsSelectionMode *pMode);


void __RPC_STUB TextSelection_get_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextSelection_put_Mode_Proxy( 
    TextSelection * This,
    /* [in] */ vsSelectionMode Mode);


void __RPC_STUB TextSelection_put_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TextRanges_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextRanges **ppRanges);


void __RPC_STUB TextSelection_get_TextRanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Backspace_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Backspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Cancel_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DestructiveInsert_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text);


void __RPC_STUB TextSelection_DestructiveInsert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveTo_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Column,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToDisplayColumn_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Column,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToDisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PageUp_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_PageUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PageDown_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_PageDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextSelection_INTERFACE_DEFINED__ */


#ifndef __TextRanges_INTERFACE_DEFINED__
#define __TextRanges_INTERFACE_DEFINED__

/* interface TextRanges */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextRanges;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b6422e9c-9efd-4f87-bddc-c7fd8f2fd303")
    TextRanges : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextRange **ppRange) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRangesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRanges * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRanges * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRanges * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRanges * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRanges * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRanges * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextRanges * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextRanges * This,
            /* [retval][out] */ TextDocument **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextRanges * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextRanges * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextRange **ppRange);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TextRanges * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } TextRangesVtbl;

    interface TextRanges
    {
        CONST_VTBL struct TextRangesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRanges_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextRanges_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextRanges_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextRanges_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextRanges_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextRanges_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextRanges_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextRanges_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextRanges_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextRanges_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TextRanges_Item(This,Index,ppRange)	\
    (This)->lpVtbl -> Item(This,Index,ppRange)

#define TextRanges__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_DTE_Proxy( 
    TextRanges * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextRanges_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_Parent_Proxy( 
    TextRanges * This,
    /* [retval][out] */ TextDocument **ppParent);


void __RPC_STUB TextRanges_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_Count_Proxy( 
    TextRanges * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TextRanges_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextRanges_Item_Proxy( 
    TextRanges * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TextRange **ppRange);


void __RPC_STUB TextRanges_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TextRanges__NewEnum_Proxy( 
    TextRanges * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TextRanges__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextRanges_INTERFACE_DEFINED__ */


#ifndef __TextRange_INTERFACE_DEFINED__
#define __TextRange_INTERFACE_DEFINED__

/* interface TextRange */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72767524-e3b3-43d0-bb46-bbe1d556a9ff")
    TextRange : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TextRanges **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ EditPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ EditPoint **ppPoint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextRange * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TextRange * This,
            /* [retval][out] */ TextRanges **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextRange * This,
            /* [retval][out] */ EditPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            TextRange * This,
            /* [retval][out] */ EditPoint **ppPoint);
        
        END_INTERFACE
    } TextRangeVtbl;

    interface TextRange
    {
        CONST_VTBL struct TextRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextRange_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextRange_get_Collection(This,ppParent)	\
    (This)->lpVtbl -> get_Collection(This,ppParent)

#define TextRange_get_StartPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppPoint)

#define TextRange_get_EndPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppPoint)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_DTE_Proxy( 
    TextRange * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextRange_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_Collection_Proxy( 
    TextRange * This,
    /* [retval][out] */ TextRanges **ppParent);


void __RPC_STUB TextRange_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_StartPoint_Proxy( 
    TextRange * This,
    /* [retval][out] */ EditPoint **ppPoint);


void __RPC_STUB TextRange_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_EndPoint_Proxy( 
    TextRange * This,
    /* [retval][out] */ EditPoint **ppPoint);


void __RPC_STUB TextRange_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextRange_INTERFACE_DEFINED__ */


#ifndef __TextDocument_INTERFACE_DEFINED__
#define __TextDocument_INTERFACE_DEFINED__

/* interface TextDocument */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cb218890-1382-472b-9118-782700c88115")
    TextDocument : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Document **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [out][retval] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmarks( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateEditPoint( 
            /* [defaultvalue][in] */ TextPoint *TextPoint,
            /* [retval][out] */ EditPoint **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [out][retval] */ TextPoint **pStartPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [out][retval] */ TextPoint **pEndPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Language( 
            /* [in] */ BSTR Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [out][retval] */ BSTR *pType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextDocument * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextDocument * This,
            /* [retval][out] */ Document **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextDocument * This,
            /* [out][retval] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmarks )( 
            TextDocument * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkText )( 
            TextDocument * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            TextDocument * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            TextDocument * This,
            /* [defaultvalue][in] */ TextPoint *TextPoint,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextDocument * This,
            /* [out][retval] */ TextPoint **pStartPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            TextDocument * This,
            /* [out][retval] */ TextPoint **pEndPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            TextDocument * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Language )( 
            TextDocument * This,
            /* [in] */ BSTR Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            TextDocument * This,
            /* [out][retval] */ BSTR *pType);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            TextDocument * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            TextDocument * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            TextDocument * This,
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            TextDocument * This);
        
        END_INTERFACE
    } TextDocumentVtbl;

    interface TextDocument
    {
        CONST_VTBL struct TextDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextDocument_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextDocument_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextDocument_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextDocument_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextDocument_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextDocument_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextDocument_ClearBookmarks(This)	\
    (This)->lpVtbl -> ClearBookmarks(This)

#define TextDocument_MarkText(This,Pattern,vsFindOptionsValue,pbRetVal)	\
    (This)->lpVtbl -> MarkText(This,Pattern,vsFindOptionsValue,pbRetVal)

#define TextDocument_ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pbRetVal)	\
    (This)->lpVtbl -> ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pbRetVal)

#define TextDocument_CreateEditPoint(This,TextPoint,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,TextPoint,lppaReturn)

#define TextDocument_get_StartPoint(This,pStartPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,pStartPoint)

#define TextDocument_get_EndPoint(This,pEndPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,pEndPoint)

#define TextDocument_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define TextDocument_put_Language(This,Language)	\
    (This)->lpVtbl -> put_Language(This,Language)

#define TextDocument_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define TextDocument_get_IndentSize(This,pSize)	\
    (This)->lpVtbl -> get_IndentSize(This,pSize)

#define TextDocument_get_TabSize(This,pSize)	\
    (This)->lpVtbl -> get_TabSize(This,pSize)

#define TextDocument_ReplaceText(This,FindText,ReplaceText,vsFindOptionsValue,pbRetVal)	\
    (This)->lpVtbl -> ReplaceText(This,FindText,ReplaceText,vsFindOptionsValue,pbRetVal)

#define TextDocument_PrintOut(This)	\
    (This)->lpVtbl -> PrintOut(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_DTE_Proxy( 
    TextDocument * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextDocument_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Parent_Proxy( 
    TextDocument * This,
    /* [retval][out] */ Document **ppParent);


void __RPC_STUB TextDocument_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Selection_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextSelection **ppSel);


void __RPC_STUB TextDocument_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ClearBookmarks_Proxy( 
    TextDocument * This);


void __RPC_STUB TextDocument_ClearBookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_MarkText_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_MarkText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ReplacePattern_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_CreateEditPoint_Proxy( 
    TextDocument * This,
    /* [defaultvalue][in] */ TextPoint *TextPoint,
    /* [retval][out] */ EditPoint **lppaReturn);


void __RPC_STUB TextDocument_CreateEditPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_StartPoint_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextPoint **pStartPoint);


void __RPC_STUB TextDocument_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_EndPoint_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextPoint **pEndPoint);


void __RPC_STUB TextDocument_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Language_Proxy( 
    TextDocument * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB TextDocument_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE TextDocument_put_Language_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Language);


void __RPC_STUB TextDocument_put_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Type_Proxy( 
    TextDocument * This,
    /* [out][retval] */ BSTR *pType);


void __RPC_STUB TextDocument_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_IndentSize_Proxy( 
    TextDocument * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB TextDocument_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_TabSize_Proxy( 
    TextDocument * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB TextDocument_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ReplaceText_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR FindText,
    /* [in] */ BSTR ReplaceText,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_PrintOut_Proxy( 
    TextDocument * This);


void __RPC_STUB TextDocument_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextDocument_INTERFACE_DEFINED__ */


#ifndef __VirtualPoint_INTERFACE_DEFINED__
#define __VirtualPoint_INTERFACE_DEFINED__

/* interface VirtualPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_VirtualPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42320454-626c-4dd0-9ecb-357c4f1966d8")
    VirtualPoint : public TextPoint
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualCharOffset( 
            /* [retval][out] */ long *pOffset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualDisplayColumn( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VirtualPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            VirtualPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            VirtualPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            VirtualPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            VirtualPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            VirtualPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            VirtualPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            VirtualPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            VirtualPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            VirtualPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            VirtualPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            VirtualPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            VirtualPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *pOffset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualDisplayColumn )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        END_INTERFACE
    } VirtualPointVtbl;

    interface VirtualPoint
    {
        CONST_VTBL struct VirtualPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define VirtualPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define VirtualPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define VirtualPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define VirtualPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define VirtualPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define VirtualPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define VirtualPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define VirtualPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define VirtualPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define VirtualPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define VirtualPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define VirtualPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define VirtualPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define VirtualPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define VirtualPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define VirtualPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define VirtualPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define VirtualPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define VirtualPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define VirtualPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define VirtualPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define VirtualPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define VirtualPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define VirtualPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)


#define VirtualPoint_get_VirtualCharOffset(This,pOffset)	\
    (This)->lpVtbl -> get_VirtualCharOffset(This,pOffset)

#define VirtualPoint_get_VirtualDisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_VirtualDisplayColumn(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE VirtualPoint_get_VirtualCharOffset_Proxy( 
    VirtualPoint * This,
    /* [retval][out] */ long *pOffset);


void __RPC_STUB VirtualPoint_get_VirtualCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE VirtualPoint_get_VirtualDisplayColumn_Proxy( 
    VirtualPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB VirtualPoint_get_VirtualDisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __VirtualPoint_INTERFACE_DEFINED__ */


#ifndef __TextPane_INTERFACE_DEFINED__
#define __TextPane_INTERFACE_DEFINED__

/* interface TextPane */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0a3bf283-05f8-4669-9bcb-a84b6423349a")
    TextPane : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TextPanes **ppPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ Window **ppWin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *pHeight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *pWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsVisible( 
            /* [in] */ TextPoint *Point,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TryToShow( 
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPane * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPane * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TextPane * This,
            /* [retval][out] */ TextPanes **ppPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            TextPane * This,
            /* [retval][out] */ Window **ppWin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            TextPane * This,
            /* [retval][out] */ long *pHeight);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TextPane * This,
            /* [retval][out] */ long *pWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextPane * This,
            /* [retval][out] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextPane * This,
            /* [retval][out] */ TextPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            TextPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsVisible )( 
            TextPane * This,
            /* [in] */ TextPoint *Point,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            TextPane * This,
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        END_INTERFACE
    } TextPaneVtbl;

    interface TextPane
    {
        CONST_VTBL struct TextPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPane_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPane_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPane_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPane_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPane_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextPane_get_Collection(This,ppPanes)	\
    (This)->lpVtbl -> get_Collection(This,ppPanes)

#define TextPane_get_Window(This,ppWin)	\
    (This)->lpVtbl -> get_Window(This,ppWin)

#define TextPane_get_Height(This,pHeight)	\
    (This)->lpVtbl -> get_Height(This,pHeight)

#define TextPane_get_Width(This,pWidth)	\
    (This)->lpVtbl -> get_Width(This,pWidth)

#define TextPane_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextPane_get_StartPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppPoint)

#define TextPane_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define TextPane_IsVisible(This,Point,PointOrCount,pbResult)	\
    (This)->lpVtbl -> IsVisible(This,Point,PointOrCount,pbResult)

#define TextPane_TryToShow(This,Point,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,Point,How,PointOrCount,pbResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_DTE_Proxy( 
    TextPane * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextPane_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Collection_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextPanes **ppPanes);


void __RPC_STUB TextPane_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Window_Proxy( 
    TextPane * This,
    /* [retval][out] */ Window **ppWin);


void __RPC_STUB TextPane_get_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Height_Proxy( 
    TextPane * This,
    /* [retval][out] */ long *pHeight);


void __RPC_STUB TextPane_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Width_Proxy( 
    TextPane * This,
    /* [retval][out] */ long *pWidth);


void __RPC_STUB TextPane_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Selection_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextSelection **ppSel);


void __RPC_STUB TextPane_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_StartPoint_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextPoint **ppPoint);


void __RPC_STUB TextPane_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_Activate_Proxy( 
    TextPane * This);


void __RPC_STUB TextPane_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_IsVisible_Proxy( 
    TextPane * This,
    /* [in] */ TextPoint *Point,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPane_IsVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_TryToShow_Proxy( 
    TextPane * This,
    /* [in] */ TextPoint *Point,
    /* [defaultvalue][in] */ vsPaneShowHow How,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPane_TryToShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPane_INTERFACE_DEFINED__ */


#ifndef __TextWindow_INTERFACE_DEFINED__
#define __TextWindow_INTERFACE_DEFINED__

/* interface TextWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2fc54dc9-922b-44eb-8cc0-ba182584dc4b")
    TextWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Panes( 
            /* [retval][out] */ TextPanes **ppPanes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextWindow * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextWindow * This,
            /* [retval][out] */ Window **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextWindow * This,
            /* [retval][out] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            TextWindow * This,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Panes )( 
            TextWindow * This,
            /* [retval][out] */ TextPanes **ppPanes);
        
        END_INTERFACE
    } TextWindowVtbl;

    interface TextWindow
    {
        CONST_VTBL struct TextWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextWindow_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextWindow_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextWindow_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextWindow_get_ActivePane(This,ppPane)	\
    (This)->lpVtbl -> get_ActivePane(This,ppPane)

#define TextWindow_get_Panes(This,ppPanes)	\
    (This)->lpVtbl -> get_Panes(This,ppPanes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_DTE_Proxy( 
    TextWindow * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Parent_Proxy( 
    TextWindow * This,
    /* [retval][out] */ Window **ppParent);


void __RPC_STUB TextWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Selection_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextSelection **ppSel);


void __RPC_STUB TextWindow_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_ActivePane_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextWindow_get_ActivePane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Panes_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextPanes **ppPanes);


void __RPC_STUB TextWindow_get_Panes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextWindow_INTERFACE_DEFINED__ */


#ifndef __TextPanes_INTERFACE_DEFINED__
#define __TextPanes_INTERFACE_DEFINED__

/* interface TextPanes */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPanes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d9013d31-3652-46b2-a25a-29a881b9f86b")
    TextPanes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextWindow **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPanes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPanes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPanes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPanes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPanes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPanes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPanes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPanes * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextPanes * This,
            /* [retval][out] */ TextWindow **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextPanes * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextPanes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TextPanes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } TextPanesVtbl;

    interface TextPanes
    {
        CONST_VTBL struct TextPanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPanes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPanes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPanes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPanes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPanes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPanes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPanes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPanes_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextPanes_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextPanes_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TextPanes_Item(This,Index,ppPane)	\
    (This)->lpVtbl -> Item(This,Index,ppPane)

#define TextPanes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_DTE_Proxy( 
    TextPanes * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextPanes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_Parent_Proxy( 
    TextPanes * This,
    /* [retval][out] */ TextWindow **ppParent);


void __RPC_STUB TextPanes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_Count_Proxy( 
    TextPanes * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TextPanes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPanes_Item_Proxy( 
    TextPanes * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextPanes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TextPanes__NewEnum_Proxy( 
    TextPanes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TextPanes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPanes_INTERFACE_DEFINED__ */


#ifndef __TextEditor_INTERFACE_DEFINED__
#define __TextEditor_INTERFACE_DEFINED__

/* interface TextEditor */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextEditor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9ff3ddca-1795-4191-a5b1-02d1ae35d074")
    TextEditor : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ DTE	**ppApp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Emulation( 
            /* [retval][out] */ long *pEditorType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Emulation( 
            /* [in] */ long EditorType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overtype( 
            /* [retval][out] */ VARIANT_BOOL *pbOT) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Overtype( 
            /* [in] */ VARIANT_BOOL bOT) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibleWhitespace( 
            /* [retval][out] */ VARIANT_BOOL *pbVW) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibleWhitespace( 
            /* [in] */ VARIANT_BOOL bVW) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextEditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextEditor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextEditor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextEditor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextEditor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextEditor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextEditor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextEditor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextEditor * This,
            /* [retval][out] */ DTE	**ppApp);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextEditor * This,
            /* [retval][out] */ DTE	**ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Emulation )( 
            TextEditor * This,
            /* [retval][out] */ long *pEditorType);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Emulation )( 
            TextEditor * This,
            /* [in] */ long EditorType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overtype )( 
            TextEditor * This,
            /* [retval][out] */ VARIANT_BOOL *pbOT);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Overtype )( 
            TextEditor * This,
            /* [in] */ VARIANT_BOOL bOT);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleWhitespace )( 
            TextEditor * This,
            /* [retval][out] */ VARIANT_BOOL *pbVW);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibleWhitespace )( 
            TextEditor * This,
            /* [in] */ VARIANT_BOOL bVW);
        
        END_INTERFACE
    } TextEditorVtbl;

    interface TextEditor
    {
        CONST_VTBL struct TextEditorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextEditor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextEditor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextEditor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextEditor_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextEditor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextEditor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextEditor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextEditor_get_Application(This,ppApp)	\
    (This)->lpVtbl -> get_Application(This,ppApp)

#define TextEditor_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextEditor_get_Emulation(This,pEditorType)	\
    (This)->lpVtbl -> get_Emulation(This,pEditorType)

#define TextEditor_put_Emulation(This,EditorType)	\
    (This)->lpVtbl -> put_Emulation(This,EditorType)

#define TextEditor_get_Overtype(This,pbOT)	\
    (This)->lpVtbl -> get_Overtype(This,pbOT)

#define TextEditor_put_Overtype(This,bOT)	\
    (This)->lpVtbl -> put_Overtype(This,bOT)

#define TextEditor_get_VisibleWhitespace(This,pbVW)	\
    (This)->lpVtbl -> get_VisibleWhitespace(This,pbVW)

#define TextEditor_put_VisibleWhitespace(This,bVW)	\
    (This)->lpVtbl -> put_VisibleWhitespace(This,bVW)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Application_Proxy( 
    TextEditor * This,
    /* [retval][out] */ DTE	**ppApp);


void __RPC_STUB TextEditor_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Parent_Proxy( 
    TextEditor * This,
    /* [retval][out] */ DTE	**ppParent);


void __RPC_STUB TextEditor_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Emulation_Proxy( 
    TextEditor * This,
    /* [retval][out] */ long *pEditorType);


void __RPC_STUB TextEditor_get_Emulation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_Emulation_Proxy( 
    TextEditor * This,
    /* [in] */ long EditorType);


void __RPC_STUB TextEditor_put_Emulation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Overtype_Proxy( 
    TextEditor * This,
    /* [retval][out] */ VARIANT_BOOL *pbOT);


void __RPC_STUB TextEditor_get_Overtype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_Overtype_Proxy( 
    TextEditor * This,
    /* [in] */ VARIANT_BOOL bOT);


void __RPC_STUB TextEditor_put_Overtype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_VisibleWhitespace_Proxy( 
    TextEditor * This,
    /* [retval][out] */ VARIANT_BOOL *pbVW);


void __RPC_STUB TextEditor_get_VisibleWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_VisibleWhitespace_Proxy( 
    TextEditor * This,
    /* [in] */ VARIANT_BOOL bVW);


void __RPC_STUB TextEditor_put_VisibleWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextEditor_INTERFACE_DEFINED__ */


#ifndef __CodeModel_INTERFACE_DEFINED__
#define __CodeModel_INTERFACE_DEFINED__

/* interface CodeModel */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeModel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B4-0D4E-11D3-8997-00C04F688DDE")
    CodeModel : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Project **pProj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElements( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeTypeFromFullName( 
            BSTR Name,
            /* [retval][out] */ CodeType **ppCodeType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            VARIANT Location,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            VARIANT Location,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsValidID( 
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pValid) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCaseSensitive( 
            /* [retval][out] */ VARIANT_BOOL *pSensitive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCodeTypeRef( 
            VARIANT Type,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeModelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeModel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeModel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeModel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeModel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeModel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeModel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeModel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeModel * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeModel * This,
            /* [retval][out] */ Project **pProj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeModel * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElements )( 
            CodeModel * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CodeTypeFromFullName )( 
            CodeModel * This,
            BSTR Name,
            /* [retval][out] */ CodeType **ppCodeType);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            CodeModel * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsValidID )( 
            CodeModel * This,
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pValid);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCaseSensitive )( 
            CodeModel * This,
            /* [retval][out] */ VARIANT_BOOL *pSensitive);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCodeTypeRef )( 
            CodeModel * This,
            VARIANT Type,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        END_INTERFACE
    } CodeModelVtbl;

    interface CodeModel
    {
        CONST_VTBL struct CodeModelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeModel_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeModel_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeModel_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeModel_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeModel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeModel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeModel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeModel_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeModel_get_Parent(This,pProj)	\
    (This)->lpVtbl -> get_Parent(This,pProj)

#define CodeModel_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeModel_get_CodeElements(This,ppCodeElements)	\
    (This)->lpVtbl -> get_CodeElements(This,ppCodeElements)

#define CodeModel_CodeTypeFromFullName(This,Name,ppCodeType)	\
    (This)->lpVtbl -> CodeTypeFromFullName(This,Name,ppCodeType)

#define CodeModel_AddNamespace(This,Name,Location,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Location,Position,ppCodeNamespace)

#define CodeModel_AddClass(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeModel_AddInterface(This,Name,Location,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Location,Position,Bases,Access,ppCodeInterface)

#define CodeModel_AddFunction(This,Name,Location,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Location,Kind,Type,Position,Access,ppCodeFunction)

#define CodeModel_AddVariable(This,Name,Location,Type,Position,Access,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Location,Type,Position,Access,ppCodeVariable)

#define CodeModel_AddStruct(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeModel_AddEnum(This,Name,Location,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Location,Position,Bases,Access,ppCodeEnum)

#define CodeModel_AddDelegate(This,Name,Location,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Location,Type,Position,Access,ppCodeDelegate)

#define CodeModel_AddAttribute(This,Name,Location,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Location,Value,Position,ppCodeAttribute)

#define CodeModel_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#define CodeModel_IsValidID(This,Name,pValid)	\
    (This)->lpVtbl -> IsValidID(This,Name,pValid)

#define CodeModel_get_IsCaseSensitive(This,pSensitive)	\
    (This)->lpVtbl -> get_IsCaseSensitive(This,pSensitive)

#define CodeModel_CreateCodeTypeRef(This,Type,ppCodeTypeRef)	\
    (This)->lpVtbl -> CreateCodeTypeRef(This,Type,ppCodeTypeRef)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_DTE_Proxy( 
    CodeModel * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeModel_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_Parent_Proxy( 
    CodeModel * This,
    /* [retval][out] */ Project **pProj);


void __RPC_STUB CodeModel_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_Language_Proxy( 
    CodeModel * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeModel_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_CodeElements_Proxy( 
    CodeModel * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeModel_get_CodeElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_CodeTypeFromFullName_Proxy( 
    CodeModel * This,
    BSTR Name,
    /* [retval][out] */ CodeType **ppCodeType);


void __RPC_STUB CodeModel_CodeTypeFromFullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddNamespace_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeModel_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddClass_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeModel_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddInterface_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeModel_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddFunction_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeModel_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddVariable_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeModel_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddStruct_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeModel_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddEnum_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeModel_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddDelegate_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeModel_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddAttribute_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeModel_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_Remove_Proxy( 
    CodeModel * This,
    VARIANT Element);


void __RPC_STUB CodeModel_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_IsValidID_Proxy( 
    CodeModel * This,
    BSTR Name,
    /* [retval][out] */ VARIANT_BOOL *pValid);


void __RPC_STUB CodeModel_IsValidID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_IsCaseSensitive_Proxy( 
    CodeModel * This,
    /* [retval][out] */ VARIANT_BOOL *pSensitive);


void __RPC_STUB CodeModel_get_IsCaseSensitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_CreateCodeTypeRef_Proxy( 
    CodeModel * This,
    VARIANT Type,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeModel_CreateCodeTypeRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeModel_INTERFACE_DEFINED__ */


#ifndef __CodeElements_INTERFACE_DEFINED__
#define __CodeElements_INTERFACE_DEFINED__

/* interface CodeElements */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeElements;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B5-0D4E-11D3-8997-00C04F688DDE")
    CodeElements : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT index,
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *CountOfCodeElements) = 0;
        
        virtual /* [restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE Reserved1( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateUniqueID( 
            /* [in] */ BSTR Prefix,
            /* [defaultvalue][out][in] */ BSTR *NewName,
            /* [retval][out] */ VARIANT_BOOL *pRootUnique) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeElementsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeElements * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeElements * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeElements * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeElements * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeElements * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeElements * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeElements * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            CodeElements * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeElements * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeElements * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CodeElements * This,
            VARIANT index,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CodeElements * This,
            /* [retval][out] */ long *CountOfCodeElements);
        
        /* [restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Reserved1 )( 
            CodeElements * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateUniqueID )( 
            CodeElements * This,
            /* [in] */ BSTR Prefix,
            /* [defaultvalue][out][in] */ BSTR *NewName,
            /* [retval][out] */ VARIANT_BOOL *pRootUnique);
        
        END_INTERFACE
    } CodeElementsVtbl;

    interface CodeElements
    {
        CONST_VTBL struct CodeElementsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeElements_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeElements_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeElements_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeElements_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeElements_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeElements_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeElements_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeElements__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define CodeElements_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeElements_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeElements_Item(This,index,ppCodeElement)	\
    (This)->lpVtbl -> Item(This,index,ppCodeElement)

#define CodeElements_get_Count(This,CountOfCodeElements)	\
    (This)->lpVtbl -> get_Count(This,CountOfCodeElements)

#define CodeElements_Reserved1(This,Element)	\
    (This)->lpVtbl -> Reserved1(This,Element)

#define CodeElements_CreateUniqueID(This,Prefix,NewName,pRootUnique)	\
    (This)->lpVtbl -> CreateUniqueID(This,Prefix,NewName,pRootUnique)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE CodeElements__NewEnum_Proxy( 
    CodeElements * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB CodeElements__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_DTE_Proxy( 
    CodeElements * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeElements_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_Parent_Proxy( 
    CodeElements * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeElements_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElements_Item_Proxy( 
    CodeElements * This,
    VARIANT index,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB CodeElements_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_Count_Proxy( 
    CodeElements * This,
    /* [retval][out] */ long *CountOfCodeElements);


void __RPC_STUB CodeElements_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE CodeElements_Reserved1_Proxy( 
    CodeElements * This,
    VARIANT Element);


void __RPC_STUB CodeElements_Reserved1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElements_CreateUniqueID_Proxy( 
    CodeElements * This,
    /* [in] */ BSTR Prefix,
    /* [defaultvalue][out][in] */ BSTR *NewName,
    /* [retval][out] */ VARIANT_BOOL *pRootUnique);


void __RPC_STUB CodeElements_CreateUniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeElements_INTERFACE_DEFINED__ */


#ifndef __CodeElement_INTERFACE_DEFINED__
#define __CodeElement_INTERFACE_DEFINED__

/* interface CodeElement */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B6-0D4E-11D3-8997-00C04F688DDE")
    CodeElement : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeElement * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeElement * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeElement * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeElement * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeElement * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeElement * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeElement * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeElement * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeElement * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeElement * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeElement * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeElement * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeElement * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeElement * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        END_INTERFACE
    } CodeElementVtbl;

    interface CodeElement
    {
        CONST_VTBL struct CodeElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeElement_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeElement_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeElement_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeElement_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeElement_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeElement_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeElement_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeElement_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeElement_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeElement_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeElement_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeElement_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeElement_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeElement_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeElement_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeElement_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeElement_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeElement_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_DTE_Proxy( 
    CodeElement * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeElement_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Collection_Proxy( 
    CodeElement * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeElement_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Name_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeElement_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeElement_put_Name_Proxy( 
    CodeElement * This,
    BSTR NewName);


void __RPC_STUB CodeElement_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_FullName_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeElement_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ProjectItem_Proxy( 
    CodeElement * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeElement_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Kind_Proxy( 
    CodeElement * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeElement_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_IsCodeType_Proxy( 
    CodeElement * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeElement_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_InfoLocation_Proxy( 
    CodeElement * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeElement_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Children_Proxy( 
    CodeElement * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeElement_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Language_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeElement_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_StartPoint_Proxy( 
    CodeElement * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_EndPoint_Proxy( 
    CodeElement * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ExtenderNames_Proxy( 
    CodeElement * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeElement_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Extender_Proxy( 
    CodeElement * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeElement_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ExtenderCATID_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeElement_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElement_GetStartPoint_Proxy( 
    CodeElement * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElement_GetEndPoint_Proxy( 
    CodeElement * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeElement_INTERFACE_DEFINED__ */


#ifndef __CodeType_INTERFACE_DEFINED__
#define __CodeType_INTERFACE_DEFINED__

/* interface CodeType */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B7-0D4E-11D3-8997-00C04F688DDE")
    CodeType : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeType * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeType * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeType * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeType * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeType * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeType * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeType * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeType * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeType * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeType * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeType * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeType * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeType * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeType * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeType * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeType * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeType * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeType * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeType * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeType * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeType * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        END_INTERFACE
    } CodeTypeVtbl;

    interface CodeType
    {
        CONST_VTBL struct CodeTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeType_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeType_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeType_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeType_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeType_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeType_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeType_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeType_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeType_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeType_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeType_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeType_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeType_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeType_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeType_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeType_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeType_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeType_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeType_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeType_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeType_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeType_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeType_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeType_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeType_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeType_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeType_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeType_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeType_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeType_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeType_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeType_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeType_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeType_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeType_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeType_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeType_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeType_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeType_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DTE_Proxy( 
    CodeType * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeType_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Collection_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeType_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Name_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeType_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Name_Proxy( 
    CodeType * This,
    BSTR NewName);


void __RPC_STUB CodeType_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_FullName_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeType_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ProjectItem_Proxy( 
    CodeType * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeType_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Kind_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeType_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_IsCodeType_Proxy( 
    CodeType * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeType_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_InfoLocation_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeType_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Children_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Language_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeType_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_StartPoint_Proxy( 
    CodeType * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_EndPoint_Proxy( 
    CodeType * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ExtenderNames_Proxy( 
    CodeType * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeType_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Extender_Proxy( 
    CodeType * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeType_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ExtenderCATID_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeType_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_GetStartPoint_Proxy( 
    CodeType * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_GetEndPoint_Proxy( 
    CodeType * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Parent_Proxy( 
    CodeType * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeType_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Namespace_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeType_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Bases_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Members_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Access_Proxy( 
    CodeType * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeType_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Access_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeType_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Attributes_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DocComment_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeType_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_DocComment_Proxy( 
    CodeType * This,
    BSTR DocComment);


void __RPC_STUB CodeType_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Comment_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeType_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Comment_Proxy( 
    CodeType * This,
    BSTR Comment);


void __RPC_STUB CodeType_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_AddBase_Proxy( 
    CodeType * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeType_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_AddAttribute_Proxy( 
    CodeType * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeType_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_RemoveBase_Proxy( 
    CodeType * This,
    VARIANT Element);


void __RPC_STUB CodeType_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_RemoveMember_Proxy( 
    CodeType * This,
    VARIANT Element);


void __RPC_STUB CodeType_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_IsDerivedFrom_Proxy( 
    CodeType * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeType_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DerivedTypes_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeType_INTERFACE_DEFINED__ */


#ifndef __CodeNamespace_INTERFACE_DEFINED__
#define __CodeNamespace_INTERFACE_DEFINED__

/* interface CodeNamespace */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeNamespace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B8-0D4E-11D3-8997-00C04F688DDE")
    CodeNamespace : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeNamespaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeNamespace * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeNamespace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeNamespace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeNamespace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeNamespace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeNamespace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeNamespace * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeNamespace * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeNamespace * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeNamespace * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeNamespace * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeNamespace * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeNamespace * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeNamespace * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeNamespace * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeNamespace * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeNamespace * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeNamespace * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeNamespace * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeNamespace * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeNamespace * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeNamespace * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeNamespace * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            CodeNamespace * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeNamespaceVtbl;

    interface CodeNamespace
    {
        CONST_VTBL struct CodeNamespaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeNamespace_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeNamespace_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeNamespace_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeNamespace_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeNamespace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeNamespace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeNamespace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeNamespace_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeNamespace_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeNamespace_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeNamespace_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeNamespace_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeNamespace_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeNamespace_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeNamespace_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeNamespace_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeNamespace_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeNamespace_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeNamespace_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeNamespace_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeNamespace_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeNamespace_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeNamespace_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeNamespace_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeNamespace_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeNamespace_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeNamespace_get_Members(This,ppMembers)	\
    (This)->lpVtbl -> get_Members(This,ppMembers)

#define CodeNamespace_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeNamespace_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeNamespace_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeNamespace_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeNamespace_AddNamespace(This,Name,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Position,ppCodeNamespace)

#define CodeNamespace_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeNamespace_AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)

#define CodeNamespace_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeNamespace_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeNamespace_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeNamespace_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_DTE_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeNamespace_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Collection_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeNamespace_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Name_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeNamespace_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_Name_Proxy( 
    CodeNamespace * This,
    BSTR NewName);


void __RPC_STUB CodeNamespace_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_FullName_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeNamespace_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ProjectItem_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeNamespace_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Kind_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeNamespace_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_IsCodeType_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeNamespace_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_InfoLocation_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeNamespace_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Children_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeNamespace_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Language_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeNamespace_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_StartPoint_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_EndPoint_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ExtenderNames_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeNamespace_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Extender_Proxy( 
    CodeNamespace * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeNamespace_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ExtenderCATID_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeNamespace_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_GetStartPoint_Proxy( 
    CodeNamespace * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_GetEndPoint_Proxy( 
    CodeNamespace * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Parent_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeNamespace_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Members_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeNamespace_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_DocComment_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeNamespace_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_DocComment_Proxy( 
    CodeNamespace * This,
    BSTR DocComment);


void __RPC_STUB CodeNamespace_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Comment_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeNamespace_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_Comment_Proxy( 
    CodeNamespace * This,
    BSTR Comment);


void __RPC_STUB CodeNamespace_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddNamespace_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeNamespace_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddClass_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeNamespace_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddInterface_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeNamespace_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddStruct_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeNamespace_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddEnum_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeNamespace_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddDelegate_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeNamespace_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_Remove_Proxy( 
    CodeNamespace * This,
    VARIANT Element);


void __RPC_STUB CodeNamespace_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeNamespace_INTERFACE_DEFINED__ */


#ifndef __CodeFunction_INTERFACE_DEFINED__
#define __CodeFunction_INTERFACE_DEFINED__

/* interface CodeFunction */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeFunction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B9-0D4E-11D3-8997-00C04F688DDE")
    CodeFunction : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionKind( 
            /* [retval][out] */ enum vsCMFunction *ppFunctionKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parameters( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOverloaded( 
            /* [retval][out] */ VARIANT_BOOL *pvbOverloaded) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsShared( 
            /* [retval][out] */ VARIANT_BOOL *Shared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsShared( 
            VARIANT_BOOL Shared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MustImplement( 
            /* [retval][out] */ VARIANT_BOOL *MustImplement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MustImplement( 
            VARIANT_BOOL MustImplement) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overloads( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddParameter( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveParameter( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanOverride( 
            /* [retval][out] */ VARIANT_BOOL *pCanOverride) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CanOverride( 
            VARIANT_BOOL CanOverride) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeFunctionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeFunction * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeFunction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeFunction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeFunction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeFunction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeFunction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeFunction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeFunction * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeFunction * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeFunction * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeFunction * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeFunction * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeFunction * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeFunction * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionKind )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMFunction *ppFunctionKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeFunction * This,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeFunction * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parameters )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeFunction * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOverloaded )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pvbOverloaded);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsShared )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *Shared);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsShared )( 
            CodeFunction * This,
            VARIANT_BOOL Shared);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MustImplement )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *MustImplement);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MustImplement )( 
            CodeFunction * This,
            VARIANT_BOOL MustImplement);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overloads )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeFunction * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeFunction * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddParameter )( 
            CodeFunction * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeFunction * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveParameter )( 
            CodeFunction * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanOverride )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pCanOverride);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanOverride )( 
            CodeFunction * This,
            VARIANT_BOOL CanOverride);
        
        END_INTERFACE
    } CodeFunctionVtbl;

    interface CodeFunction
    {
        CONST_VTBL struct CodeFunctionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeFunction_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeFunction_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeFunction_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeFunction_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeFunction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeFunction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeFunction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeFunction_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeFunction_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeFunction_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeFunction_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeFunction_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeFunction_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeFunction_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeFunction_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeFunction_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeFunction_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeFunction_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeFunction_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeFunction_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeFunction_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeFunction_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeFunction_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeFunction_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeFunction_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeFunction_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeFunction_get_FunctionKind(This,ppFunctionKind)	\
    (This)->lpVtbl -> get_FunctionKind(This,ppFunctionKind)

#define CodeFunction_get_Prototype(This,Flags,pFullName)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pFullName)

#define CodeFunction_get_Type(This,ppCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,ppCodeTypeRef)

#define CodeFunction_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeFunction_get_Parameters(This,ppMembers)	\
    (This)->lpVtbl -> get_Parameters(This,ppMembers)

#define CodeFunction_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeFunction_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeFunction_get_IsOverloaded(This,pvbOverloaded)	\
    (This)->lpVtbl -> get_IsOverloaded(This,pvbOverloaded)

#define CodeFunction_get_IsShared(This,Shared)	\
    (This)->lpVtbl -> get_IsShared(This,Shared)

#define CodeFunction_put_IsShared(This,Shared)	\
    (This)->lpVtbl -> put_IsShared(This,Shared)

#define CodeFunction_get_MustImplement(This,MustImplement)	\
    (This)->lpVtbl -> get_MustImplement(This,MustImplement)

#define CodeFunction_put_MustImplement(This,MustImplement)	\
    (This)->lpVtbl -> put_MustImplement(This,MustImplement)

#define CodeFunction_get_Overloads(This,ppMembers)	\
    (This)->lpVtbl -> get_Overloads(This,ppMembers)

#define CodeFunction_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeFunction_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeFunction_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeFunction_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeFunction_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeFunction_AddParameter(This,Name,Type,Position,ppCodeParameter)	\
    (This)->lpVtbl -> AddParameter(This,Name,Type,Position,ppCodeParameter)

#define CodeFunction_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeFunction_RemoveParameter(This,Element)	\
    (This)->lpVtbl -> RemoveParameter(This,Element)

#define CodeFunction_get_CanOverride(This,pCanOverride)	\
    (This)->lpVtbl -> get_CanOverride(This,pCanOverride)

#define CodeFunction_put_CanOverride(This,CanOverride)	\
    (This)->lpVtbl -> put_CanOverride(This,CanOverride)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_DTE_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeFunction_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Collection_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeFunction_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Name_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeFunction_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Name_Proxy( 
    CodeFunction * This,
    BSTR NewName);


void __RPC_STUB CodeFunction_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_FullName_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeFunction_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ProjectItem_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeFunction_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Kind_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeFunction_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsCodeType_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeFunction_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_InfoLocation_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeFunction_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Children_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeFunction_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Language_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeFunction_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_StartPoint_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_EndPoint_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ExtenderNames_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeFunction_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Extender_Proxy( 
    CodeFunction * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeFunction_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ExtenderCATID_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeFunction_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_GetStartPoint_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_GetEndPoint_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Parent_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeFunction_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_FunctionKind_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMFunction *ppFunctionKind);


void __RPC_STUB CodeFunction_get_FunctionKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Prototype_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pFullName);


void __RPC_STUB CodeFunction_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Type_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeFunction_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Type_Proxy( 
    CodeFunction * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeFunction_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Parameters_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Parameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Access_Proxy( 
    CodeFunction * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeFunction_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Access_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeFunction_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsOverloaded_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pvbOverloaded);


void __RPC_STUB CodeFunction_get_IsOverloaded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsShared_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *Shared);


void __RPC_STUB CodeFunction_get_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_IsShared_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL Shared);


void __RPC_STUB CodeFunction_put_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_MustImplement_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *MustImplement);


void __RPC_STUB CodeFunction_get_MustImplement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_MustImplement_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL MustImplement);


void __RPC_STUB CodeFunction_put_MustImplement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Overloads_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Overloads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Attributes_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_DocComment_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeFunction_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_DocComment_Proxy( 
    CodeFunction * This,
    BSTR DocComment);


void __RPC_STUB CodeFunction_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Comment_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeFunction_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Comment_Proxy( 
    CodeFunction * This,
    BSTR Comment);


void __RPC_STUB CodeFunction_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_AddParameter_Proxy( 
    CodeFunction * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeParameter **ppCodeParameter);


void __RPC_STUB CodeFunction_AddParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_AddAttribute_Proxy( 
    CodeFunction * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeFunction_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_RemoveParameter_Proxy( 
    CodeFunction * This,
    VARIANT Element);


void __RPC_STUB CodeFunction_RemoveParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_CanOverride_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pCanOverride);


void __RPC_STUB CodeFunction_get_CanOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_CanOverride_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL CanOverride);


void __RPC_STUB CodeFunction_put_CanOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeFunction_INTERFACE_DEFINED__ */


#ifndef __CodeVariable_INTERFACE_DEFINED__
#define __CodeVariable_INTERFACE_DEFINED__

/* interface CodeVariable */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeVariable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BA-0D4E-11D3-8997-00C04F688DDE")
    CodeVariable : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InitExpression( 
            /* [retval][out] */ VARIANT *pExpr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InitExpression( 
            VARIANT Expr) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsConstant( 
            /* [retval][out] */ VARIANT_BOOL *pIsConstant) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsConstant( 
            VARIANT_BOOL IsConstant) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsShared( 
            /* [retval][out] */ VARIANT_BOOL *pShared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsShared( 
            VARIANT_BOOL Shared) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeVariableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeVariable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeVariable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeVariable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeVariable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeVariable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeVariable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeVariable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeVariable * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeVariable * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeVariable * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeVariable * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeVariable * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeVariable * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeVariable * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InitExpression )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT *pExpr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InitExpression )( 
            CodeVariable * This,
            VARIANT Expr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeVariable * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeVariable * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeVariable * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsConstant )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pIsConstant);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsConstant )( 
            CodeVariable * This,
            VARIANT_BOOL IsConstant);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeVariable * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeVariable * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeVariable * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsShared )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pShared);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsShared )( 
            CodeVariable * This,
            VARIANT_BOOL Shared);
        
        END_INTERFACE
    } CodeVariableVtbl;

    interface CodeVariable
    {
        CONST_VTBL struct CodeVariableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeVariable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeVariable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeVariable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeVariable_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeVariable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeVariable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeVariable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeVariable_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeVariable_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeVariable_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeVariable_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeVariable_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeVariable_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeVariable_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeVariable_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeVariable_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeVariable_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeVariable_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeVariable_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeVariable_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeVariable_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeVariable_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeVariable_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeVariable_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeVariable_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeVariable_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeVariable_get_InitExpression(This,pExpr)	\
    (This)->lpVtbl -> get_InitExpression(This,pExpr)

#define CodeVariable_put_InitExpression(This,Expr)	\
    (This)->lpVtbl -> put_InitExpression(This,Expr)

#define CodeVariable_get_Prototype(This,Flags,pVal)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pVal)

#define CodeVariable_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeVariable_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeVariable_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeVariable_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeVariable_get_IsConstant(This,pIsConstant)	\
    (This)->lpVtbl -> get_IsConstant(This,pIsConstant)

#define CodeVariable_put_IsConstant(This,IsConstant)	\
    (This)->lpVtbl -> put_IsConstant(This,IsConstant)

#define CodeVariable_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeVariable_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeVariable_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeVariable_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeVariable_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeVariable_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeVariable_get_IsShared(This,pShared)	\
    (This)->lpVtbl -> get_IsShared(This,pShared)

#define CodeVariable_put_IsShared(This,Shared)	\
    (This)->lpVtbl -> put_IsShared(This,Shared)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_DTE_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeVariable_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Collection_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeVariable_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Name_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Name_Proxy( 
    CodeVariable * This,
    BSTR NewName);


void __RPC_STUB CodeVariable_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_FullName_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ProjectItem_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeVariable_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Kind_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeVariable_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsCodeType_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeVariable_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_InfoLocation_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeVariable_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Children_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeVariable_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Language_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeVariable_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_StartPoint_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_EndPoint_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ExtenderNames_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeVariable_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Extender_Proxy( 
    CodeVariable * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeVariable_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ExtenderCATID_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeVariable_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_GetStartPoint_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_GetEndPoint_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Parent_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeVariable_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_InitExpression_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT *pExpr);


void __RPC_STUB CodeVariable_get_InitExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_InitExpression_Proxy( 
    CodeVariable * This,
    VARIANT Expr);


void __RPC_STUB CodeVariable_put_InitExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Prototype_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Type_Proxy( 
    CodeVariable * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeVariable_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Type_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeVariable_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Access_Proxy( 
    CodeVariable * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeVariable_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Access_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeVariable_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsConstant_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pIsConstant);


void __RPC_STUB CodeVariable_get_IsConstant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_IsConstant_Proxy( 
    CodeVariable * This,
    VARIANT_BOOL IsConstant);


void __RPC_STUB CodeVariable_put_IsConstant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Attributes_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeVariable_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_DocComment_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeVariable_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_DocComment_Proxy( 
    CodeVariable * This,
    BSTR DocComment);


void __RPC_STUB CodeVariable_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Comment_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeVariable_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Comment_Proxy( 
    CodeVariable * This,
    BSTR Comment);


void __RPC_STUB CodeVariable_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_AddAttribute_Proxy( 
    CodeVariable * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeVariable_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsShared_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pShared);


void __RPC_STUB CodeVariable_get_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_IsShared_Proxy( 
    CodeVariable * This,
    VARIANT_BOOL Shared);


void __RPC_STUB CodeVariable_put_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeVariable_INTERFACE_DEFINED__ */


#ifndef __CodeProperty_INTERFACE_DEFINED__
#define __CodeProperty_INTERFACE_DEFINED__

/* interface CodeProperty */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BB-0D4E-11D3-8997-00C04F688DDE")
    CodeProperty : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ CodeClass **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Getter( 
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Getter( 
            CodeFunction *pCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Setter( 
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Setter( 
            CodeFunction *pCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodePropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeProperty * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeProperty * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeProperty * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeProperty * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeProperty * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeProperty * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeProperty * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeProperty * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeProperty * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeProperty * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeProperty * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeProperty * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeProperty * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeProperty * This,
            /* [retval][out] */ CodeClass **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeProperty * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeProperty * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Getter )( 
            CodeProperty * This,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Getter )( 
            CodeProperty * This,
            CodeFunction *pCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Setter )( 
            CodeProperty * This,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Setter )( 
            CodeProperty * This,
            CodeFunction *pCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeProperty * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeProperty * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeProperty * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeProperty * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        END_INTERFACE
    } CodePropertyVtbl;

    interface CodeProperty
    {
        CONST_VTBL struct CodePropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeProperty_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeProperty_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeProperty_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeProperty_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeProperty_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeProperty_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeProperty_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeProperty_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeProperty_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeProperty_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeProperty_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeProperty_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeProperty_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeProperty_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeProperty_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeProperty_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeProperty_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeProperty_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeProperty_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeProperty_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeProperty_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeProperty_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeProperty_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeProperty_get_Prototype(This,Flags,pFullName)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pFullName)

#define CodeProperty_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeProperty_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeProperty_get_Getter(This,ppCodeFunction)	\
    (This)->lpVtbl -> get_Getter(This,ppCodeFunction)

#define CodeProperty_put_Getter(This,pCodeFunction)	\
    (This)->lpVtbl -> put_Getter(This,pCodeFunction)

#define CodeProperty_get_Setter(This,ppCodeFunction)	\
    (This)->lpVtbl -> get_Setter(This,ppCodeFunction)

#define CodeProperty_put_Setter(This,pCodeFunction)	\
    (This)->lpVtbl -> put_Setter(This,pCodeFunction)

#define CodeProperty_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeProperty_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeProperty_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeProperty_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeProperty_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeProperty_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeProperty_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeProperty_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_DTE_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeProperty_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Collection_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeProperty_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Name_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeProperty_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Name_Proxy( 
    CodeProperty * This,
    BSTR NewName);


void __RPC_STUB CodeProperty_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_FullName_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeProperty_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ProjectItem_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeProperty_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Kind_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeProperty_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_IsCodeType_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeProperty_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_InfoLocation_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeProperty_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Children_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeProperty_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Language_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeProperty_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_StartPoint_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_EndPoint_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ExtenderNames_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeProperty_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Extender_Proxy( 
    CodeProperty * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeProperty_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ExtenderCATID_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeProperty_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_GetStartPoint_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_GetEndPoint_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Parent_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeClass **ParentObject);


void __RPC_STUB CodeProperty_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Prototype_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pFullName);


void __RPC_STUB CodeProperty_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Type_Proxy( 
    CodeProperty * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeProperty_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Type_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeProperty_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Getter_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeProperty_get_Getter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Getter_Proxy( 
    CodeProperty * This,
    CodeFunction *pCodeFunction);


void __RPC_STUB CodeProperty_put_Getter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Setter_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeProperty_get_Setter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Setter_Proxy( 
    CodeProperty * This,
    CodeFunction *pCodeFunction);


void __RPC_STUB CodeProperty_put_Setter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Access_Proxy( 
    CodeProperty * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeProperty_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Access_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeProperty_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Attributes_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeProperty_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_DocComment_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeProperty_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_DocComment_Proxy( 
    CodeProperty * This,
    BSTR DocComment);


void __RPC_STUB CodeProperty_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Comment_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeProperty_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Comment_Proxy( 
    CodeProperty * This,
    BSTR Comment);


void __RPC_STUB CodeProperty_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_AddAttribute_Proxy( 
    CodeProperty * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeProperty_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeProperty_INTERFACE_DEFINED__ */


#ifndef __CodeParameter_INTERFACE_DEFINED__
#define __CodeParameter_INTERFACE_DEFINED__

/* interface CodeParameter */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeParameter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BD-0D4E-11D3-8997-00C04F688DDE")
    CodeParameter : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeParameterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeParameter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeParameter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeParameter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeParameter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeParameter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeParameter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeParameter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeParameter * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeParameter * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeParameter * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeParameter * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeParameter * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeParameter * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeParameter * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeParameter * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeParameter * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeParameter * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeParameter * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeParameter * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeParameter * This,
            CodeTypeRef *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeParameter * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeParameter * This,
            BSTR DocComment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeParameter * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        END_INTERFACE
    } CodeParameterVtbl;

    interface CodeParameter
    {
        CONST_VTBL struct CodeParameterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeParameter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeParameter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeParameter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeParameter_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeParameter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeParameter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeParameter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeParameter_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeParameter_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeParameter_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeParameter_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeParameter_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeParameter_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeParameter_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeParameter_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeParameter_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeParameter_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeParameter_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeParameter_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeParameter_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeParameter_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeParameter_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeParameter_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeParameter_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeParameter_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeParameter_get_Parent(This,ppCodeElement)	\
    (This)->lpVtbl -> get_Parent(This,ppCodeElement)

#define CodeParameter_put_Type(This,Type)	\
    (This)->lpVtbl -> put_Type(This,Type)

#define CodeParameter_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeParameter_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeParameter_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeParameter_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeParameter_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_DTE_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeParameter_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Collection_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeParameter_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Name_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeParameter_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_Name_Proxy( 
    CodeParameter * This,
    BSTR NewName);


void __RPC_STUB CodeParameter_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_FullName_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeParameter_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ProjectItem_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeParameter_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Kind_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeParameter_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_IsCodeType_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeParameter_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_InfoLocation_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeParameter_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Children_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeParameter_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Language_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeParameter_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_StartPoint_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_EndPoint_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ExtenderNames_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeParameter_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Extender_Proxy( 
    CodeParameter * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeParameter_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ExtenderCATID_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeParameter_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_GetStartPoint_Proxy( 
    CodeParameter * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_GetEndPoint_Proxy( 
    CodeParameter * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Parent_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB CodeParameter_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_Type_Proxy( 
    CodeParameter * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeParameter_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Type_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeParameter_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Attributes_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeParameter_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_DocComment_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeParameter_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_DocComment_Proxy( 
    CodeParameter * This,
    BSTR DocComment);


void __RPC_STUB CodeParameter_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_AddAttribute_Proxy( 
    CodeParameter * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeParameter_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeParameter_INTERFACE_DEFINED__ */


#ifndef __CodeAttribute_INTERFACE_DEFINED__
#define __CodeAttribute_INTERFACE_DEFINED__

/* interface CodeAttribute */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BE-0D4E-11D3-8997-00C04F688DDE")
    CodeAttribute : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *pValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            BSTR Value) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeAttribute * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeAttribute * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeAttribute * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeAttribute * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeAttribute * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeAttribute * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeAttribute * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeAttribute * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeAttribute * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeAttribute * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeAttribute * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeAttribute * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeAttribute * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeAttribute * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            CodeAttribute * This,
            BSTR Value);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CodeAttribute * This);
        
        END_INTERFACE
    } CodeAttributeVtbl;

    interface CodeAttribute
    {
        CONST_VTBL struct CodeAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeAttribute_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeAttribute_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeAttribute_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeAttribute_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeAttribute_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeAttribute_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeAttribute_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeAttribute_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeAttribute_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeAttribute_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeAttribute_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeAttribute_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeAttribute_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeAttribute_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeAttribute_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeAttribute_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeAttribute_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeAttribute_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeAttribute_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define CodeAttribute_get_Value(This,pValue)	\
    (This)->lpVtbl -> get_Value(This,pValue)

#define CodeAttribute_put_Value(This,Value)	\
    (This)->lpVtbl -> put_Value(This,Value)

#define CodeAttribute_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_DTE_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeAttribute_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Collection_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeAttribute_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Name_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeAttribute_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_put_Name_Proxy( 
    CodeAttribute * This,
    BSTR NewName);


void __RPC_STUB CodeAttribute_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_FullName_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeAttribute_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ProjectItem_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeAttribute_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Kind_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeAttribute_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_IsCodeType_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeAttribute_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_InfoLocation_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeAttribute_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Children_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeAttribute_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Language_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeAttribute_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_StartPoint_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_EndPoint_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ExtenderNames_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeAttribute_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Extender_Proxy( 
    CodeAttribute * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeAttribute_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ExtenderCATID_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeAttribute_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_GetStartPoint_Proxy( 
    CodeAttribute * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_GetEndPoint_Proxy( 
    CodeAttribute * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Parent_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB CodeAttribute_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Value_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pValue);


void __RPC_STUB CodeAttribute_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_put_Value_Proxy( 
    CodeAttribute * This,
    BSTR Value);


void __RPC_STUB CodeAttribute_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_Delete_Proxy( 
    CodeAttribute * This);


void __RPC_STUB CodeAttribute_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeAttribute_INTERFACE_DEFINED__ */


#ifndef __CodeInterface_INTERFACE_DEFINED__
#define __CodeInterface_INTERFACE_DEFINED__

/* interface CodeInterface */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeInterface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42510-91CD-4D3A-8B25-A317D8032B24")
    CodeInterface : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeInterfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeInterface * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeInterface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeInterface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeInterface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeInterface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeInterface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeInterface * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeInterface * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeInterface * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeInterface * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeInterface * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeInterface * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeInterface * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeInterface * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeInterface * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeInterface * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeInterface * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeInterface * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeInterface * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeInterface * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeInterface * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeInterface * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeInterface * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeInterface * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeInterface * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeInterface * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeInterface * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeInterface * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeInterface * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        END_INTERFACE
    } CodeInterfaceVtbl;

    interface CodeInterface
    {
        CONST_VTBL struct CodeInterfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeInterface_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeInterface_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeInterface_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeInterface_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeInterface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeInterface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeInterface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeInterface_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeInterface_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeInterface_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeInterface_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeInterface_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeInterface_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeInterface_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeInterface_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeInterface_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeInterface_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeInterface_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeInterface_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeInterface_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeInterface_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeInterface_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeInterface_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeInterface_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeInterface_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeInterface_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeInterface_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeInterface_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeInterface_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeInterface_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeInterface_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeInterface_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeInterface_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeInterface_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeInterface_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeInterface_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeInterface_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeInterface_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeInterface_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeInterface_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeInterface_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeInterface_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeInterface_AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)

#define CodeInterface_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DTE_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeInterface_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Collection_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeInterface_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Name_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeInterface_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Name_Proxy( 
    CodeInterface * This,
    BSTR NewName);


void __RPC_STUB CodeInterface_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_FullName_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeInterface_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ProjectItem_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeInterface_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Kind_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeInterface_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_IsCodeType_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeInterface_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_InfoLocation_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeInterface_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Children_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Language_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeInterface_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_StartPoint_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_EndPoint_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ExtenderNames_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeInterface_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Extender_Proxy( 
    CodeInterface * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeInterface_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ExtenderCATID_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeInterface_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_GetStartPoint_Proxy( 
    CodeInterface * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_GetEndPoint_Proxy( 
    CodeInterface * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Parent_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeInterface_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Namespace_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeInterface_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Bases_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Members_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Access_Proxy( 
    CodeInterface * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeInterface_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Access_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeInterface_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Attributes_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DocComment_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeInterface_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_DocComment_Proxy( 
    CodeInterface * This,
    BSTR DocComment);


void __RPC_STUB CodeInterface_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Comment_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeInterface_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Comment_Proxy( 
    CodeInterface * This,
    BSTR Comment);


void __RPC_STUB CodeInterface_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddBase_Proxy( 
    CodeInterface * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeInterface_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddAttribute_Proxy( 
    CodeInterface * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeInterface_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_RemoveBase_Proxy( 
    CodeInterface * This,
    VARIANT Element);


void __RPC_STUB CodeInterface_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_RemoveMember_Proxy( 
    CodeInterface * This,
    VARIANT Element);


void __RPC_STUB CodeInterface_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_IsDerivedFrom_Proxy( 
    CodeInterface * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeInterface_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DerivedTypes_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddFunction_Proxy( 
    CodeInterface * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeInterface_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddProperty_Proxy( 
    CodeInterface * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeInterface_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeInterface_INTERFACE_DEFINED__ */


#ifndef __CodeStruct_INTERFACE_DEFINED__
#define __CodeStruct_INTERFACE_DEFINED__

/* interface CodeStruct */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeStruct;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42511-91CD-4D3A-8B25-A317D8032B24")
    CodeStruct : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImplementedInterfaces( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAbstract( 
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsAbstract( 
            VARIANT_BOOL Abstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImplementedInterface( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveInterface( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeStructVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeStruct * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeStruct * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeStruct * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeStruct * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeStruct * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeStruct * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeStruct * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeStruct * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeStruct * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeStruct * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeStruct * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeStruct * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeStruct * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeStruct * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeStruct * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeStruct * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeStruct * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeStruct * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeStruct * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeStruct * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeStruct * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeStruct * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeStruct * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeStruct * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeStruct * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImplementedInterfaces )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAbstract )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsAbstract )( 
            CodeStruct * This,
            VARIANT_BOOL Abstract);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImplementedInterface )( 
            CodeStruct * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeStruct * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeStruct * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeStruct * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeStruct * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveInterface )( 
            CodeStruct * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeStructVtbl;

    interface CodeStruct
    {
        CONST_VTBL struct CodeStructVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeStruct_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeStruct_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeStruct_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeStruct_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeStruct_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeStruct_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeStruct_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeStruct_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeStruct_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeStruct_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeStruct_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeStruct_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeStruct_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeStruct_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeStruct_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeStruct_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeStruct_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeStruct_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeStruct_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeStruct_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeStruct_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeStruct_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeStruct_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeStruct_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeStruct_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeStruct_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeStruct_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeStruct_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeStruct_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeStruct_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeStruct_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeStruct_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeStruct_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeStruct_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeStruct_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeStruct_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeStruct_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeStruct_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeStruct_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeStruct_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeStruct_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeStruct_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeStruct_get_ImplementedInterfaces(This,ppCodeElements)	\
    (This)->lpVtbl -> get_ImplementedInterfaces(This,ppCodeElements)

#define CodeStruct_get_IsAbstract(This,pIsAbstract)	\
    (This)->lpVtbl -> get_IsAbstract(This,pIsAbstract)

#define CodeStruct_put_IsAbstract(This,Abstract)	\
    (This)->lpVtbl -> put_IsAbstract(This,Abstract)

#define CodeStruct_AddImplementedInterface(This,Base,Position,ppCodeInterface)	\
    (This)->lpVtbl -> AddImplementedInterface(This,Base,Position,ppCodeInterface)

#define CodeStruct_AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)

#define CodeStruct_AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)

#define CodeStruct_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#define CodeStruct_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeStruct_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeStruct_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeStruct_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeStruct_RemoveInterface(This,Element)	\
    (This)->lpVtbl -> RemoveInterface(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DTE_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeStruct_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Collection_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeStruct_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Name_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeStruct_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Name_Proxy( 
    CodeStruct * This,
    BSTR NewName);


void __RPC_STUB CodeStruct_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_FullName_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeStruct_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ProjectItem_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeStruct_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Kind_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeStruct_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsCodeType_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeStruct_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_InfoLocation_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeStruct_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Children_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Language_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeStruct_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_StartPoint_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_EndPoint_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ExtenderNames_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeStruct_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Extender_Proxy( 
    CodeStruct * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeStruct_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ExtenderCATID_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeStruct_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_GetStartPoint_Proxy( 
    CodeStruct * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_GetEndPoint_Proxy( 
    CodeStruct * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Parent_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeStruct_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Namespace_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeStruct_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Bases_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Members_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Access_Proxy( 
    CodeStruct * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeStruct_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Access_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeStruct_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Attributes_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DocComment_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeStruct_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_DocComment_Proxy( 
    CodeStruct * This,
    BSTR DocComment);


void __RPC_STUB CodeStruct_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Comment_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeStruct_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Comment_Proxy( 
    CodeStruct * This,
    BSTR Comment);


void __RPC_STUB CodeStruct_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddBase_Proxy( 
    CodeStruct * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeStruct_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddAttribute_Proxy( 
    CodeStruct * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeStruct_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveBase_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveMember_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsDerivedFrom_Proxy( 
    CodeStruct * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeStruct_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DerivedTypes_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ImplementedInterfaces_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_ImplementedInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsAbstract_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAbstract);


void __RPC_STUB CodeStruct_get_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_IsAbstract_Proxy( 
    CodeStruct * This,
    VARIANT_BOOL Abstract);


void __RPC_STUB CodeStruct_put_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddImplementedInterface_Proxy( 
    CodeStruct * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeStruct_AddImplementedInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddFunction_Proxy( 
    CodeStruct * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeStruct_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddVariable_Proxy( 
    CodeStruct * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeStruct_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddProperty_Proxy( 
    CodeStruct * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeStruct_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddClass_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeStruct_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddStruct_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeStruct_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddEnum_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeStruct_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddDelegate_Proxy( 
    CodeStruct * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeStruct_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveInterface_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeStruct_INTERFACE_DEFINED__ */


#ifndef __CodeEnum_INTERFACE_DEFINED__
#define __CodeEnum_INTERFACE_DEFINED__

/* interface CodeEnum */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42512-91CD-4D3A-8B25-A317D8032B24")
    CodeEnum : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMember( 
            BSTR Name,
            /* [optional] */ VARIANT Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeVariable **ppCodeElements) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeEnum * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeEnum * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeEnum * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeEnum * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeEnum * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeEnum * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeEnum * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeEnum * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeEnum * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeEnum * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeEnum * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeEnum * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeEnum * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeEnum * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeEnum * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeEnum * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeEnum * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeEnum * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeEnum * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeEnum * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeEnum * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeEnum * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeEnum * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeEnum * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeEnum * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMember )( 
            CodeEnum * This,
            BSTR Name,
            /* [optional] */ VARIANT Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeVariable **ppCodeElements);
        
        END_INTERFACE
    } CodeEnumVtbl;

    interface CodeEnum
    {
        CONST_VTBL struct CodeEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeEnum_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeEnum_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeEnum_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeEnum_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeEnum_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeEnum_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeEnum_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeEnum_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeEnum_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeEnum_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeEnum_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeEnum_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeEnum_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeEnum_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeEnum_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeEnum_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeEnum_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeEnum_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeEnum_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeEnum_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeEnum_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeEnum_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeEnum_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeEnum_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeEnum_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeEnum_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeEnum_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeEnum_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeEnum_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeEnum_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeEnum_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeEnum_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeEnum_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeEnum_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeEnum_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeEnum_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeEnum_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeEnum_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeEnum_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeEnum_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeEnum_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeEnum_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeEnum_AddMember(This,Name,Value,Position,ppCodeElements)	\
    (This)->lpVtbl -> AddMember(This,Name,Value,Position,ppCodeElements)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DTE_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeEnum_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Collection_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeEnum_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Name_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeEnum_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Name_Proxy( 
    CodeEnum * This,
    BSTR NewName);


void __RPC_STUB CodeEnum_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_FullName_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeEnum_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ProjectItem_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeEnum_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Kind_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeEnum_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_IsCodeType_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeEnum_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_InfoLocation_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeEnum_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Children_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Language_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeEnum_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_StartPoint_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_EndPoint_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ExtenderNames_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeEnum_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Extender_Proxy( 
    CodeEnum * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeEnum_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ExtenderCATID_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeEnum_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_GetStartPoint_Proxy( 
    CodeEnum * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_GetEndPoint_Proxy( 
    CodeEnum * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Parent_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeEnum_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Namespace_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeEnum_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Bases_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Members_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Access_Proxy( 
    CodeEnum * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeEnum_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Access_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeEnum_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Attributes_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DocComment_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeEnum_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_DocComment_Proxy( 
    CodeEnum * This,
    BSTR DocComment);


void __RPC_STUB CodeEnum_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Comment_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeEnum_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Comment_Proxy( 
    CodeEnum * This,
    BSTR Comment);


void __RPC_STUB CodeEnum_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddBase_Proxy( 
    CodeEnum * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeEnum_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddAttribute_Proxy( 
    CodeEnum * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeEnum_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_RemoveBase_Proxy( 
    CodeEnum * This,
    VARIANT Element);


void __RPC_STUB CodeEnum_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_RemoveMember_Proxy( 
    CodeEnum * This,
    VARIANT Element);


void __RPC_STUB CodeEnum_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_IsDerivedFrom_Proxy( 
    CodeEnum * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeEnum_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DerivedTypes_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddMember_Proxy( 
    CodeEnum * This,
    BSTR Name,
    /* [optional] */ VARIANT Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeVariable **ppCodeElements);


void __RPC_STUB CodeEnum_AddMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeEnum_INTERFACE_DEFINED__ */


#ifndef __CodeDelegate_INTERFACE_DEFINED__
#define __CodeDelegate_INTERFACE_DEFINED__

/* interface CodeDelegate */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42513-91CD-4D3A-8B25-A317D8032B24")
    CodeDelegate : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseClass( 
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue] */ long Flags,
            /* [retval][out] */ BSTR *pPrototype) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parameters( 
            /* [retval][out] */ CodeElements **ppParameters) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddParameter( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveParameter( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeDelegateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeDelegate * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeDelegate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeDelegate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeDelegate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeDelegate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeDelegate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeDelegate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeDelegate * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeDelegate * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeDelegate * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeDelegate * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeDelegate * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeDelegate * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeDelegate * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeDelegate * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeDelegate * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeDelegate * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeDelegate * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeDelegate * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeDelegate * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeDelegate * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeDelegate * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeDelegate * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeDelegate * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeDelegate * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeDelegate * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeDelegate * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeDelegate * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseClass )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeDelegate * This,
            /* [defaultvalue] */ long Flags,
            /* [retval][out] */ BSTR *pPrototype);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeDelegate * This,
            CodeTypeRef *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parameters )( 
            CodeDelegate * This,
            /* [retval][out] */ CodeElements **ppParameters);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddParameter )( 
            CodeDelegate * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveParameter )( 
            CodeDelegate * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeDelegateVtbl;

    interface CodeDelegate
    {
        CONST_VTBL struct CodeDelegateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeDelegate_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeDelegate_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeDelegate_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeDelegate_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeDelegate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeDelegate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeDelegate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeDelegate_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeDelegate_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeDelegate_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeDelegate_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeDelegate_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeDelegate_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeDelegate_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeDelegate_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeDelegate_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeDelegate_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeDelegate_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeDelegate_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeDelegate_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeDelegate_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeDelegate_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeDelegate_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeDelegate_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeDelegate_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeDelegate_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeDelegate_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeDelegate_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeDelegate_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeDelegate_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeDelegate_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeDelegate_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeDelegate_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeDelegate_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeDelegate_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeDelegate_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeDelegate_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeDelegate_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeDelegate_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeDelegate_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeDelegate_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeDelegate_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeDelegate_get_BaseClass(This,ppCodeClass)	\
    (This)->lpVtbl -> get_BaseClass(This,ppCodeClass)

#define CodeDelegate_get_Prototype(This,Flags,pPrototype)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pPrototype)

#define CodeDelegate_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeDelegate_put_Type(This,Type)	\
    (This)->lpVtbl -> put_Type(This,Type)

#define CodeDelegate_get_Parameters(This,ppParameters)	\
    (This)->lpVtbl -> get_Parameters(This,ppParameters)

#define CodeDelegate_AddParameter(This,Name,Type,Position,ppCodeParameter)	\
    (This)->lpVtbl -> AddParameter(This,Name,Type,Position,ppCodeParameter)

#define CodeDelegate_RemoveParameter(This,Element)	\
    (This)->lpVtbl -> RemoveParameter(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DTE_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeDelegate_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Collection_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeDelegate_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Name_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeDelegate_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Name_Proxy( 
    CodeDelegate * This,
    BSTR NewName);


void __RPC_STUB CodeDelegate_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_FullName_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeDelegate_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ProjectItem_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeDelegate_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Kind_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeDelegate_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_IsCodeType_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeDelegate_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_InfoLocation_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeDelegate_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Children_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Language_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeDelegate_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_StartPoint_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_EndPoint_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ExtenderNames_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeDelegate_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Extender_Proxy( 
    CodeDelegate * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeDelegate_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_ExtenderCATID_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeDelegate_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_GetStartPoint_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_GetEndPoint_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeDelegate_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Parent_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeDelegate_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Namespace_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeDelegate_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Bases_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Members_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Access_Proxy( 
    CodeDelegate * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeDelegate_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Access_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeDelegate_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Attributes_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DocComment_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeDelegate_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_DocComment_Proxy( 
    CodeDelegate * This,
    BSTR DocComment);


void __RPC_STUB CodeDelegate_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Comment_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeDelegate_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Comment_Proxy( 
    CodeDelegate * This,
    BSTR Comment);


void __RPC_STUB CodeDelegate_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddBase_Proxy( 
    CodeDelegate * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeDelegate_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddAttribute_Proxy( 
    CodeDelegate * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeDelegate_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveBase_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveMember_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_IsDerivedFrom_Proxy( 
    CodeDelegate * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeDelegate_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_DerivedTypes_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeDelegate_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_BaseClass_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeDelegate_get_BaseClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Prototype_Proxy( 
    CodeDelegate * This,
    /* [defaultvalue] */ long Flags,
    /* [retval][out] */ BSTR *pPrototype);


void __RPC_STUB CodeDelegate_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Type_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeDelegate_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_put_Type_Proxy( 
    CodeDelegate * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeDelegate_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_get_Parameters_Proxy( 
    CodeDelegate * This,
    /* [retval][out] */ CodeElements **ppParameters);


void __RPC_STUB CodeDelegate_get_Parameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_AddParameter_Proxy( 
    CodeDelegate * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeParameter **ppCodeParameter);


void __RPC_STUB CodeDelegate_AddParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeDelegate_RemoveParameter_Proxy( 
    CodeDelegate * This,
    VARIANT Element);


void __RPC_STUB CodeDelegate_RemoveParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeDelegate_INTERFACE_DEFINED__ */


#ifndef __CodeTypeRef_INTERFACE_DEFINED__
#define __CodeTypeRef_INTERFACE_DEFINED__

/* interface CodeTypeRef */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeTypeRef;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BC-0D4E-11D3-8997-00C04F688DDE")
    CodeTypeRef : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeKind( 
            /* [retval][out] */ enum vsCMTypeRef *pType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeType( 
            /* [retval][out] */ CodeType **ppCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CodeType( 
            CodeType *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ElementType( 
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ElementType( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsString( 
            /* [retval][out] */ BSTR *pAsString) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AsFullName( 
            /* [retval][out] */ BSTR *pAsFullName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rank( 
            /* [retval][out] */ long *pRank) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rank( 
            long Rank) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateArrayType( 
            /* [defaultvalue] */ long Rank,
            /* [retval][out] */ CodeTypeRef **ppTypeRef) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeTypeRefVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeTypeRef * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeTypeRef * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeTypeRef * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeTypeRef * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeTypeRef * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeTypeRef * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeTypeRef * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeTypeRef * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeTypeRef * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeKind )( 
            CodeTypeRef * This,
            /* [retval][out] */ enum vsCMTypeRef *pType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeType )( 
            CodeTypeRef * This,
            /* [retval][out] */ CodeType **ppCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CodeType )( 
            CodeTypeRef * This,
            CodeType *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ElementType )( 
            CodeTypeRef * This,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ElementType )( 
            CodeTypeRef * This,
            CodeTypeRef *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsString )( 
            CodeTypeRef * This,
            /* [retval][out] */ BSTR *pAsString);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AsFullName )( 
            CodeTypeRef * This,
            /* [retval][out] */ BSTR *pAsFullName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rank )( 
            CodeTypeRef * This,
            /* [retval][out] */ long *pRank);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rank )( 
            CodeTypeRef * This,
            long Rank);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateArrayType )( 
            CodeTypeRef * This,
            /* [defaultvalue] */ long Rank,
            /* [retval][out] */ CodeTypeRef **ppTypeRef);
        
        END_INTERFACE
    } CodeTypeRefVtbl;

    interface CodeTypeRef
    {
        CONST_VTBL struct CodeTypeRefVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeTypeRef_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeTypeRef_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeTypeRef_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeTypeRef_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeTypeRef_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeTypeRef_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeTypeRef_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeTypeRef_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeTypeRef_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeTypeRef_get_TypeKind(This,pType)	\
    (This)->lpVtbl -> get_TypeKind(This,pType)

#define CodeTypeRef_get_CodeType(This,ppCodeType)	\
    (This)->lpVtbl -> get_CodeType(This,ppCodeType)

#define CodeTypeRef_put_CodeType(This,Type)	\
    (This)->lpVtbl -> put_CodeType(This,Type)

#define CodeTypeRef_get_ElementType(This,ppCodeTypeRef)	\
    (This)->lpVtbl -> get_ElementType(This,ppCodeTypeRef)

#define CodeTypeRef_put_ElementType(This,Type)	\
    (This)->lpVtbl -> put_ElementType(This,Type)

#define CodeTypeRef_get_AsString(This,pAsString)	\
    (This)->lpVtbl -> get_AsString(This,pAsString)

#define CodeTypeRef_get_AsFullName(This,pAsFullName)	\
    (This)->lpVtbl -> get_AsFullName(This,pAsFullName)

#define CodeTypeRef_get_Rank(This,pRank)	\
    (This)->lpVtbl -> get_Rank(This,pRank)

#define CodeTypeRef_put_Rank(This,Rank)	\
    (This)->lpVtbl -> put_Rank(This,Rank)

#define CodeTypeRef_CreateArrayType(This,Rank,ppTypeRef)	\
    (This)->lpVtbl -> CreateArrayType(This,Rank,ppTypeRef)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_DTE_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeTypeRef_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_Parent_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeTypeRef_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_TypeKind_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ enum vsCMTypeRef *pType);


void __RPC_STUB CodeTypeRef_get_TypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_CodeType_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ CodeType **ppCodeType);


void __RPC_STUB CodeTypeRef_get_CodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_CodeType_Proxy( 
    CodeTypeRef * This,
    CodeType *Type);


void __RPC_STUB CodeTypeRef_put_CodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_ElementType_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeTypeRef_get_ElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_ElementType_Proxy( 
    CodeTypeRef * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeTypeRef_put_ElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_AsString_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ BSTR *pAsString);


void __RPC_STUB CodeTypeRef_get_AsString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_AsFullName_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ BSTR *pAsFullName);


void __RPC_STUB CodeTypeRef_get_AsFullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_get_Rank_Proxy( 
    CodeTypeRef * This,
    /* [retval][out] */ long *pRank);


void __RPC_STUB CodeTypeRef_get_Rank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_put_Rank_Proxy( 
    CodeTypeRef * This,
    long Rank);


void __RPC_STUB CodeTypeRef_put_Rank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeTypeRef_CreateArrayType_Proxy( 
    CodeTypeRef * This,
    /* [defaultvalue] */ long Rank,
    /* [retval][out] */ CodeTypeRef **ppTypeRef);


void __RPC_STUB CodeTypeRef_CreateArrayType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeTypeRef_INTERFACE_DEFINED__ */


#ifndef __CodeClass_INTERFACE_DEFINED__
#define __CodeClass_INTERFACE_DEFINED__

/* interface CodeClass */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeClass;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42514-91CD-4D3A-8B25-A317D8032B24")
    CodeClass : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImplementedInterfaces( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAbstract( 
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsAbstract( 
            VARIANT_BOOL Abstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImplementedInterface( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveInterface( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeClassVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeClass * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeClass * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeClass * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeClass * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeClass * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeClass * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeClass * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeClass * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeClass * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeClass * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeClass * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeClass * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeClass * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeClass * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeClass * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeClass * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeClass * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeClass * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeClass * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeClass * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeClass * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeClass * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeClass * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeClass * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeClass * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeClass * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeClass * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImplementedInterfaces )( 
            CodeClass * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAbstract )( 
            CodeClass * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsAbstract )( 
            CodeClass * This,
            VARIANT_BOOL Abstract);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImplementedInterface )( 
            CodeClass * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeClass * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeClass * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeClass * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeClass * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeClass * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveInterface )( 
            CodeClass * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeClassVtbl;

    interface CodeClass
    {
        CONST_VTBL struct CodeClassVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeClass_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeClass_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeClass_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeClass_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeClass_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeClass_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeClass_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeClass_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeClass_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeClass_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeClass_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeClass_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeClass_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeClass_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeClass_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeClass_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeClass_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeClass_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeClass_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeClass_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeClass_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeClass_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeClass_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeClass_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeClass_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeClass_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeClass_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeClass_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeClass_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeClass_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeClass_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeClass_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeClass_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeClass_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeClass_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeClass_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeClass_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeClass_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeClass_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeClass_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeClass_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeClass_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeClass_get_ImplementedInterfaces(This,ppCodeElements)	\
    (This)->lpVtbl -> get_ImplementedInterfaces(This,ppCodeElements)

#define CodeClass_get_IsAbstract(This,pIsAbstract)	\
    (This)->lpVtbl -> get_IsAbstract(This,pIsAbstract)

#define CodeClass_put_IsAbstract(This,Abstract)	\
    (This)->lpVtbl -> put_IsAbstract(This,Abstract)

#define CodeClass_AddImplementedInterface(This,Base,Position,ppCodeInterface)	\
    (This)->lpVtbl -> AddImplementedInterface(This,Base,Position,ppCodeInterface)

#define CodeClass_AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)

#define CodeClass_AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)

#define CodeClass_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#define CodeClass_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeClass_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeClass_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeClass_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeClass_RemoveInterface(This,Element)	\
    (This)->lpVtbl -> RemoveInterface(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DTE_Proxy( 
    CodeClass * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeClass_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Collection_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeClass_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Name_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeClass_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Name_Proxy( 
    CodeClass * This,
    BSTR NewName);


void __RPC_STUB CodeClass_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_FullName_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeClass_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ProjectItem_Proxy( 
    CodeClass * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeClass_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Kind_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeClass_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsCodeType_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeClass_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_InfoLocation_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeClass_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Children_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Language_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeClass_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_StartPoint_Proxy( 
    CodeClass * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_EndPoint_Proxy( 
    CodeClass * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ExtenderNames_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeClass_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Extender_Proxy( 
    CodeClass * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeClass_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ExtenderCATID_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeClass_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_GetStartPoint_Proxy( 
    CodeClass * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_GetEndPoint_Proxy( 
    CodeClass * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeClass_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Parent_Proxy( 
    CodeClass * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeClass_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Namespace_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeClass_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Bases_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Members_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Access_Proxy( 
    CodeClass * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeClass_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Access_Proxy( 
    CodeClass * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeClass_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Attributes_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DocComment_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeClass_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_DocComment_Proxy( 
    CodeClass * This,
    BSTR DocComment);


void __RPC_STUB CodeClass_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_Comment_Proxy( 
    CodeClass * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeClass_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_Comment_Proxy( 
    CodeClass * This,
    BSTR Comment);


void __RPC_STUB CodeClass_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddBase_Proxy( 
    CodeClass * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeClass_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddAttribute_Proxy( 
    CodeClass * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeClass_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveBase_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveMember_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsDerivedFrom_Proxy( 
    CodeClass * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeClass_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_DerivedTypes_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_ImplementedInterfaces_Proxy( 
    CodeClass * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeClass_get_ImplementedInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeClass_get_IsAbstract_Proxy( 
    CodeClass * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAbstract);


void __RPC_STUB CodeClass_get_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeClass_put_IsAbstract_Proxy( 
    CodeClass * This,
    VARIANT_BOOL Abstract);


void __RPC_STUB CodeClass_put_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddImplementedInterface_Proxy( 
    CodeClass * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeClass_AddImplementedInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddFunction_Proxy( 
    CodeClass * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeClass_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddVariable_Proxy( 
    CodeClass * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeClass_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddProperty_Proxy( 
    CodeClass * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeClass_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddClass_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeClass_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddStruct_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeClass_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddEnum_Proxy( 
    CodeClass * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeClass_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_AddDelegate_Proxy( 
    CodeClass * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeClass_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeClass_RemoveInterface_Proxy( 
    CodeClass * This,
    VARIANT Element);


void __RPC_STUB CodeClass_RemoveInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeClass_INTERFACE_DEFINED__ */



#ifndef __CodeModelLanguageConstants_MODULE_DEFINED__
#define __CodeModelLanguageConstants_MODULE_DEFINED__


/* module CodeModelLanguageConstants */
/* [dllname][uuid] */ 

const LPSTR vsCMLanguageVC	=	"{B5E9BD32-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageVB	=	"{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageCSharp	=	"{B5E9BD34-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageIDL	=	"{B5E9BD35-6D3E-4B5D-925E-8A43B79820B4}";

const LPSTR vsCMLanguageMC	=	"{B5E9BD36-6D3E-4B5D-925E-8A43B79820B4}";

#endif /* __CodeModelLanguageConstants_MODULE_DEFINED__ */

#ifndef __FileCodeModel_INTERFACE_DEFINED__
#define __FileCodeModel_INTERFACE_DEFINED__

/* interface FileCodeModel */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_FileCodeModel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ED1A3F99-4477-11d3-89BF-00C04F688DDE")
    FileCodeModel : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElements( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElementFromPoint( 
            TextPoint *Point,
            enum vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileCodeModelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileCodeModel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileCodeModel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileCodeModel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileCodeModel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileCodeModel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileCodeModel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileCodeModel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            FileCodeModel * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FileCodeModel * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            FileCodeModel * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElements )( 
            FileCodeModel * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CodeElementFromPoint )( 
            FileCodeModel * This,
            TextPoint *Point,
            enum vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            FileCodeModel * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            FileCodeModel * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            FileCodeModel * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            FileCodeModel * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            FileCodeModel * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            FileCodeModel * This,
            VARIANT Element);
        
        END_INTERFACE
    } FileCodeModelVtbl;

    interface FileCodeModel
    {
        CONST_VTBL struct FileCodeModelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileCodeModel_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define FileCodeModel_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define FileCodeModel_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define FileCodeModel_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define FileCodeModel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define FileCodeModel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define FileCodeModel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define FileCodeModel_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define FileCodeModel_get_Parent(This,pProjItem)	\
    (This)->lpVtbl -> get_Parent(This,pProjItem)

#define FileCodeModel_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define FileCodeModel_get_CodeElements(This,ppCodeElements)	\
    (This)->lpVtbl -> get_CodeElements(This,ppCodeElements)

#define FileCodeModel_CodeElementFromPoint(This,Point,Scope,ppCodeElement)	\
    (This)->lpVtbl -> CodeElementFromPoint(This,Point,Scope,ppCodeElement)

#define FileCodeModel_AddNamespace(This,Name,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Position,ppCodeNamespace)

#define FileCodeModel_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define FileCodeModel_AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)

#define FileCodeModel_AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)

#define FileCodeModel_AddVariable(This,Name,Type,Position,Access,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,ppCodeVariable)

#define FileCodeModel_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define FileCodeModel_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define FileCodeModel_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define FileCodeModel_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define FileCodeModel_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_DTE_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB FileCodeModel_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_Parent_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB FileCodeModel_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_Language_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB FileCodeModel_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_get_CodeElements_Proxy( 
    FileCodeModel * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB FileCodeModel_get_CodeElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_CodeElementFromPoint_Proxy( 
    FileCodeModel * This,
    TextPoint *Point,
    enum vsCMElement Scope,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB FileCodeModel_CodeElementFromPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddNamespace_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB FileCodeModel_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddClass_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB FileCodeModel_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddInterface_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB FileCodeModel_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddFunction_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB FileCodeModel_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddVariable_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB FileCodeModel_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddAttribute_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB FileCodeModel_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddStruct_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB FileCodeModel_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddEnum_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB FileCodeModel_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_AddDelegate_Proxy( 
    FileCodeModel * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB FileCodeModel_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FileCodeModel_Remove_Proxy( 
    FileCodeModel * This,
    VARIANT Element);


void __RPC_STUB FileCodeModel_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __FileCodeModel_INTERFACE_DEFINED__ */


#ifndef __Breakpoint_INTERFACE_DEFINED__
#define __Breakpoint_INTERFACE_DEFINED__

/* interface Breakpoint */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Breakpoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("11C5114C-BB00-11d2-8AD1-00C04F79E479")
    Breakpoint : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ dbgBreakpointType *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocationType( 
            /* [retval][out] */ dbgBreakpointLocationType *LocationType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionName( 
            /* [retval][out] */ BSTR *FunctionName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionLineOffset( 
            /* [retval][out] */ long *Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionColumnOffset( 
            /* [retval][out] */ long *Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_File( 
            /* [retval][out] */ BSTR *File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileLine( 
            /* [retval][out] */ long *Line) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileColumn( 
            /* [retval][out] */ long *Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConditionType( 
            /* [retval][out] */ dbgBreakpointConditionType *ConditionType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Condition( 
            /* [retval][out] */ BSTR *Condition) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HitCountType( 
            /* [retval][out] */ dbgHitCountType *HitCountType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HitCountTarget( 
            /* [retval][out] */ long *HitCountTarget) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *Enabled) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL Enable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tag( 
            /* [retval][out] */ BSTR *Tag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Tag( 
            /* [in] */ BSTR Tag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentHits( 
            /* [retval][out] */ long *CurHitCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Program( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetHitCount( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreakpointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Breakpoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Breakpoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Breakpoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Breakpoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Breakpoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Breakpoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Breakpoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Breakpoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointType *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Breakpoint * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocationType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointLocationType *LocationType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionName )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *FunctionName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionLineOffset )( 
            Breakpoint * This,
            /* [retval][out] */ long *Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionColumnOffset )( 
            Breakpoint * This,
            /* [retval][out] */ long *Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_File )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *File);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileLine )( 
            Breakpoint * This,
            /* [retval][out] */ long *Line);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileColumn )( 
            Breakpoint * This,
            /* [retval][out] */ long *Column);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConditionType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgBreakpointConditionType *ConditionType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Condition )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Condition);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HitCountType )( 
            Breakpoint * This,
            /* [retval][out] */ dbgHitCountType *HitCountType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HitCountTarget )( 
            Breakpoint * This,
            /* [retval][out] */ long *HitCountTarget);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            Breakpoint * This,
            /* [retval][out] */ VARIANT_BOOL *Enabled);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            Breakpoint * This,
            /* [in] */ VARIANT_BOOL Enable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tag )( 
            Breakpoint * This,
            /* [retval][out] */ BSTR *Tag);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Tag )( 
            Breakpoint * This,
            /* [in] */ BSTR Tag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentHits )( 
            Breakpoint * This,
            /* [retval][out] */ long *CurHitCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Program )( 
            Breakpoint * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Breakpoint * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            Breakpoint * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetHitCount )( 
            Breakpoint * This);
        
        END_INTERFACE
    } BreakpointVtbl;

    interface Breakpoint
    {
        CONST_VTBL struct BreakpointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Breakpoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Breakpoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Breakpoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Breakpoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Breakpoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Breakpoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Breakpoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Breakpoint_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define Breakpoint_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define Breakpoint_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Breakpoint_put_Name(This,Name)	\
    (This)->lpVtbl -> put_Name(This,Name)

#define Breakpoint_get_LocationType(This,LocationType)	\
    (This)->lpVtbl -> get_LocationType(This,LocationType)

#define Breakpoint_get_FunctionName(This,FunctionName)	\
    (This)->lpVtbl -> get_FunctionName(This,FunctionName)

#define Breakpoint_get_FunctionLineOffset(This,Offset)	\
    (This)->lpVtbl -> get_FunctionLineOffset(This,Offset)

#define Breakpoint_get_FunctionColumnOffset(This,Offset)	\
    (This)->lpVtbl -> get_FunctionColumnOffset(This,Offset)

#define Breakpoint_get_File(This,File)	\
    (This)->lpVtbl -> get_File(This,File)

#define Breakpoint_get_FileLine(This,Line)	\
    (This)->lpVtbl -> get_FileLine(This,Line)

#define Breakpoint_get_FileColumn(This,Column)	\
    (This)->lpVtbl -> get_FileColumn(This,Column)

#define Breakpoint_get_ConditionType(This,ConditionType)	\
    (This)->lpVtbl -> get_ConditionType(This,ConditionType)

#define Breakpoint_get_Condition(This,Condition)	\
    (This)->lpVtbl -> get_Condition(This,Condition)

#define Breakpoint_get_Language(This,Language)	\
    (This)->lpVtbl -> get_Language(This,Language)

#define Breakpoint_get_HitCountType(This,HitCountType)	\
    (This)->lpVtbl -> get_HitCountType(This,HitCountType)

#define Breakpoint_get_HitCountTarget(This,HitCountTarget)	\
    (This)->lpVtbl -> get_HitCountTarget(This,HitCountTarget)

#define Breakpoint_get_Enabled(This,Enabled)	\
    (This)->lpVtbl -> get_Enabled(This,Enabled)

#define Breakpoint_put_Enabled(This,Enable)	\
    (This)->lpVtbl -> put_Enabled(This,Enable)

#define Breakpoint_get_Tag(This,Tag)	\
    (This)->lpVtbl -> get_Tag(This,Tag)

#define Breakpoint_put_Tag(This,Tag)	\
    (This)->lpVtbl -> put_Tag(This,Tag)

#define Breakpoint_get_CurrentHits(This,CurHitCount)	\
    (This)->lpVtbl -> get_CurrentHits(This,CurHitCount)

#define Breakpoint_get_Program(This,Program)	\
    (This)->lpVtbl -> get_Program(This,Program)

#define Breakpoint_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Breakpoint_get_Parent(This,Breakpoint)	\
    (This)->lpVtbl -> get_Parent(This,Breakpoint)

#define Breakpoint_get_Collection(This,Breakpoints)	\
    (This)->lpVtbl -> get_Collection(This,Breakpoints)

#define Breakpoint_get_Children(This,Breakpoints)	\
    (This)->lpVtbl -> get_Children(This,Breakpoints)

#define Breakpoint_ResetHitCount(This)	\
    (This)->lpVtbl -> ResetHitCount(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_Delete_Proxy( 
    Breakpoint * This);


void __RPC_STUB Breakpoint_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Type_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointType *Type);


void __RPC_STUB Breakpoint_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Name_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Breakpoint_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Name_Proxy( 
    Breakpoint * This,
    /* [in] */ BSTR Name);


void __RPC_STUB Breakpoint_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_LocationType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointLocationType *LocationType);


void __RPC_STUB Breakpoint_get_LocationType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionName_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *FunctionName);


void __RPC_STUB Breakpoint_get_FunctionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionLineOffset_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Offset);


void __RPC_STUB Breakpoint_get_FunctionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FunctionColumnOffset_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Offset);


void __RPC_STUB Breakpoint_get_FunctionColumnOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_File_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *File);


void __RPC_STUB Breakpoint_get_File_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FileLine_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Line);


void __RPC_STUB Breakpoint_get_FileLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_FileColumn_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *Column);


void __RPC_STUB Breakpoint_get_FileColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_ConditionType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgBreakpointConditionType *ConditionType);


void __RPC_STUB Breakpoint_get_ConditionType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Condition_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Condition);


void __RPC_STUB Breakpoint_get_Condition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Language_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB Breakpoint_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_HitCountType_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ dbgHitCountType *HitCountType);


void __RPC_STUB Breakpoint_get_HitCountType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_HitCountTarget_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *HitCountTarget);


void __RPC_STUB Breakpoint_get_HitCountTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Enabled_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ VARIANT_BOOL *Enabled);


void __RPC_STUB Breakpoint_get_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Enabled_Proxy( 
    Breakpoint * This,
    /* [in] */ VARIANT_BOOL Enable);


void __RPC_STUB Breakpoint_put_Enabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Tag_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ BSTR *Tag);


void __RPC_STUB Breakpoint_get_Tag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_put_Tag_Proxy( 
    Breakpoint * This,
    /* [in] */ BSTR Tag);


void __RPC_STUB Breakpoint_put_Tag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_CurrentHits_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ long *CurHitCount);


void __RPC_STUB Breakpoint_get_CurrentHits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Program_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Breakpoint_get_Program_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_DTE_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Breakpoint_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Parent_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Breakpoint_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Collection_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoint_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_get_Children_Proxy( 
    Breakpoint * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoint_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoint_ResetHitCount_Proxy( 
    Breakpoint * This);


void __RPC_STUB Breakpoint_ResetHitCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Breakpoint_INTERFACE_DEFINED__ */


#ifndef __Breakpoints_INTERFACE_DEFINED__
#define __Breakpoints_INTERFACE_DEFINED__

/* interface Breakpoints */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Breakpoints;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25968106-BAFB-11d2-8AD1-00C04F79E479")
    Breakpoints : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [defaultvalue][optional][in] */ BSTR Function,
            /* [defaultvalue][optional][in] */ BSTR File,
            /* [defaultvalue][optional][in] */ long Line,
            /* [defaultvalue][optional][in] */ long Column,
            /* [defaultvalue][optional][in] */ BSTR Condition,
            /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
            /* [defaultvalue][optional][in] */ BSTR Language,
            /* [defaultvalue][optional][in] */ BSTR Data,
            /* [defaultvalue][optional][in] */ long DataCount,
            /* [defaultvalue][optional][in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ long HitCount,
            /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreakpointsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Breakpoints * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Breakpoints * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Breakpoints * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Breakpoints * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Breakpoints * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Breakpoints * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Breakpoints * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Breakpoints * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Breakpoints * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Breakpoints * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Breakpoints * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Breakpoints * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Breakpoints * This,
            /* [defaultvalue][optional][in] */ BSTR Function,
            /* [defaultvalue][optional][in] */ BSTR File,
            /* [defaultvalue][optional][in] */ long Line,
            /* [defaultvalue][optional][in] */ long Column,
            /* [defaultvalue][optional][in] */ BSTR Condition,
            /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
            /* [defaultvalue][optional][in] */ BSTR Language,
            /* [defaultvalue][optional][in] */ BSTR Data,
            /* [defaultvalue][optional][in] */ long DataCount,
            /* [defaultvalue][optional][in] */ BSTR Address,
            /* [defaultvalue][optional][in] */ long HitCount,
            /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        END_INTERFACE
    } BreakpointsVtbl;

    interface Breakpoints
    {
        CONST_VTBL struct BreakpointsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Breakpoints_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Breakpoints_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Breakpoints_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Breakpoints_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Breakpoints_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Breakpoints_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Breakpoints_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Breakpoints_Item(This,Index,Breakpoint)	\
    (This)->lpVtbl -> Item(This,Index,Breakpoint)

#define Breakpoints__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Breakpoints_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Breakpoints_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Breakpoints_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#define Breakpoints_Add(This,Function,File,Line,Column,Condition,ConditionType,Language,Data,DataCount,Address,HitCount,HitCountType,Breakpoints)	\
    (This)->lpVtbl -> Add(This,Function,File,Line,Column,Condition,ConditionType,Language,Data,DataCount,Address,HitCount,HitCountType,Breakpoints)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_Item_Proxy( 
    Breakpoints * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Breakpoints_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Breakpoints__NewEnum_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Breakpoints__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_DTE_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Breakpoints_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_Parent_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Breakpoints_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_get_Count_Proxy( 
    Breakpoints * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Breakpoints_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Breakpoints_Add_Proxy( 
    Breakpoints * This,
    /* [defaultvalue][optional][in] */ BSTR Function,
    /* [defaultvalue][optional][in] */ BSTR File,
    /* [defaultvalue][optional][in] */ long Line,
    /* [defaultvalue][optional][in] */ long Column,
    /* [defaultvalue][optional][in] */ BSTR Condition,
    /* [defaultvalue][optional][in] */ dbgBreakpointConditionType ConditionType,
    /* [defaultvalue][optional][in] */ BSTR Language,
    /* [defaultvalue][optional][in] */ BSTR Data,
    /* [defaultvalue][optional][in] */ long DataCount,
    /* [defaultvalue][optional][in] */ BSTR Address,
    /* [defaultvalue][optional][in] */ long HitCount,
    /* [defaultvalue][optional][in] */ dbgHitCountType HitCountType,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Breakpoints_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Breakpoints_INTERFACE_DEFINED__ */


#ifndef __Debugger_INTERFACE_DEFINED__
#define __Debugger_INTERFACE_DEFINED__

/* interface Debugger */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Debugger;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("338FB9A0-BAE5-11d2-8AD1-00C04F79E479")
    Debugger : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExpression( 
            /* [in] */ BSTR ExpressionText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
            /* [defaultvalue][in] */ long Timeout,
            /* [retval][out] */ Expression **Expression) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetachAll( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepInto( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepOver( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StepOut( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Go( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Break( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Stop( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetNextStatement( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RunToCursor( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteStatement( 
            /* [in] */ BSTR Statement,
            /* [defaultvalue][in] */ long Timeout = -1,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Breakpoints( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ Languages **Languages) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentMode( 
            /* [retval][out] */ dbgDebugMode *Mode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentProcess( 
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentProcess( 
            /* [in] */ Process *Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentProgram( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentProgram( 
            /* [in] */ Program *Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentThread( 
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentThread( 
            /* [in] */ Thread *Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentStackFrame( 
            /* [retval][out] */ StackFrame **StackFrame) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentStackFrame( 
            /* [in] */ StackFrame *StackFrame) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HexDisplayMode( 
            /* [retval][out] */ VARIANT_BOOL *HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HexDisplayMode( 
            /* [in] */ VARIANT_BOOL HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HexInputMode( 
            /* [retval][out] */ VARIANT_BOOL *HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HexInputMode( 
            /* [in] */ VARIANT_BOOL HexModeOn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastBreakReason( 
            /* [retval][out] */ dbgEventReason *Reason) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BreakpointLastHit( 
            /* [retval][out] */ Breakpoint **Breakpoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllBreakpointsLastHit( 
            /* [retval][out] */ Breakpoints **Breakpoints) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DebuggedProcesses( 
            /* [retval][out] */ Processes **Processes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocalProcesses( 
            /* [retval][out] */ Processes **Processes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TerminateAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DebuggerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Debugger * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Debugger * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Debugger * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Debugger * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Debugger * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Debugger * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Debugger * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExpression )( 
            Debugger * This,
            /* [in] */ BSTR ExpressionText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
            /* [defaultvalue][in] */ long Timeout,
            /* [retval][out] */ Expression **Expression);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetachAll )( 
            Debugger * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepInto )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepOver )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StepOut )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Go )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Break )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Stop )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetNextStatement )( 
            Debugger * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RunToCursor )( 
            Debugger * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteStatement )( 
            Debugger * This,
            /* [in] */ BSTR Statement,
            /* [defaultvalue][in] */ long Timeout,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Breakpoints )( 
            Debugger * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            Debugger * This,
            /* [retval][out] */ Languages **Languages);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentMode )( 
            Debugger * This,
            /* [retval][out] */ dbgDebugMode *Mode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProcess )( 
            Debugger * This,
            /* [retval][out] */ Process **Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProcess )( 
            Debugger * This,
            /* [in] */ Process *Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentProgram )( 
            Debugger * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentProgram )( 
            Debugger * This,
            /* [in] */ Program *Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentThread )( 
            Debugger * This,
            /* [retval][out] */ Thread **Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentThread )( 
            Debugger * This,
            /* [in] */ Thread *Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentStackFrame )( 
            Debugger * This,
            /* [retval][out] */ StackFrame **StackFrame);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentStackFrame )( 
            Debugger * This,
            /* [in] */ StackFrame *StackFrame);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HexDisplayMode )( 
            Debugger * This,
            /* [retval][out] */ VARIANT_BOOL *HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HexDisplayMode )( 
            Debugger * This,
            /* [in] */ VARIANT_BOOL HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HexInputMode )( 
            Debugger * This,
            /* [retval][out] */ VARIANT_BOOL *HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HexInputMode )( 
            Debugger * This,
            /* [in] */ VARIANT_BOOL HexModeOn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastBreakReason )( 
            Debugger * This,
            /* [retval][out] */ dbgEventReason *Reason);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BreakpointLastHit )( 
            Debugger * This,
            /* [retval][out] */ Breakpoint **Breakpoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllBreakpointsLastHit )( 
            Debugger * This,
            /* [retval][out] */ Breakpoints **Breakpoints);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DebuggedProcesses )( 
            Debugger * This,
            /* [retval][out] */ Processes **Processes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocalProcesses )( 
            Debugger * This,
            /* [retval][out] */ Processes **Processes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Debugger * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Debugger * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TerminateAll )( 
            Debugger * This);
        
        END_INTERFACE
    } DebuggerVtbl;

    interface Debugger
    {
        CONST_VTBL struct DebuggerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Debugger_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Debugger_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Debugger_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Debugger_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Debugger_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Debugger_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Debugger_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Debugger_GetExpression(This,ExpressionText,UseAutoExpandRules,Timeout,Expression)	\
    (This)->lpVtbl -> GetExpression(This,ExpressionText,UseAutoExpandRules,Timeout,Expression)

#define Debugger_DetachAll(This)	\
    (This)->lpVtbl -> DetachAll(This)

#define Debugger_StepInto(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepInto(This,WaitForBreakOrEnd)

#define Debugger_StepOver(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepOver(This,WaitForBreakOrEnd)

#define Debugger_StepOut(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> StepOut(This,WaitForBreakOrEnd)

#define Debugger_Go(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Go(This,WaitForBreakOrEnd)

#define Debugger_Break(This,WaitForBreakMode)	\
    (This)->lpVtbl -> Break(This,WaitForBreakMode)

#define Debugger_Stop(This,WaitForDesignMode)	\
    (This)->lpVtbl -> Stop(This,WaitForDesignMode)

#define Debugger_SetNextStatement(This)	\
    (This)->lpVtbl -> SetNextStatement(This)

#define Debugger_RunToCursor(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> RunToCursor(This,WaitForBreakOrEnd)

#define Debugger_ExecuteStatement(This,Statement,Timeout,TreatAsExpression)	\
    (This)->lpVtbl -> ExecuteStatement(This,Statement,Timeout,TreatAsExpression)

#define Debugger_get_Breakpoints(This,Breakpoints)	\
    (This)->lpVtbl -> get_Breakpoints(This,Breakpoints)

#define Debugger_get_Languages(This,Languages)	\
    (This)->lpVtbl -> get_Languages(This,Languages)

#define Debugger_get_CurrentMode(This,Mode)	\
    (This)->lpVtbl -> get_CurrentMode(This,Mode)

#define Debugger_get_CurrentProcess(This,Process)	\
    (This)->lpVtbl -> get_CurrentProcess(This,Process)

#define Debugger_put_CurrentProcess(This,Process)	\
    (This)->lpVtbl -> put_CurrentProcess(This,Process)

#define Debugger_get_CurrentProgram(This,Program)	\
    (This)->lpVtbl -> get_CurrentProgram(This,Program)

#define Debugger_put_CurrentProgram(This,Program)	\
    (This)->lpVtbl -> put_CurrentProgram(This,Program)

#define Debugger_get_CurrentThread(This,Thread)	\
    (This)->lpVtbl -> get_CurrentThread(This,Thread)

#define Debugger_put_CurrentThread(This,Thread)	\
    (This)->lpVtbl -> put_CurrentThread(This,Thread)

#define Debugger_get_CurrentStackFrame(This,StackFrame)	\
    (This)->lpVtbl -> get_CurrentStackFrame(This,StackFrame)

#define Debugger_put_CurrentStackFrame(This,StackFrame)	\
    (This)->lpVtbl -> put_CurrentStackFrame(This,StackFrame)

#define Debugger_get_HexDisplayMode(This,HexModeOn)	\
    (This)->lpVtbl -> get_HexDisplayMode(This,HexModeOn)

#define Debugger_put_HexDisplayMode(This,HexModeOn)	\
    (This)->lpVtbl -> put_HexDisplayMode(This,HexModeOn)

#define Debugger_get_HexInputMode(This,HexModeOn)	\
    (This)->lpVtbl -> get_HexInputMode(This,HexModeOn)

#define Debugger_put_HexInputMode(This,HexModeOn)	\
    (This)->lpVtbl -> put_HexInputMode(This,HexModeOn)

#define Debugger_get_LastBreakReason(This,Reason)	\
    (This)->lpVtbl -> get_LastBreakReason(This,Reason)

#define Debugger_get_BreakpointLastHit(This,Breakpoint)	\
    (This)->lpVtbl -> get_BreakpointLastHit(This,Breakpoint)

#define Debugger_get_AllBreakpointsLastHit(This,Breakpoints)	\
    (This)->lpVtbl -> get_AllBreakpointsLastHit(This,Breakpoints)

#define Debugger_get_DebuggedProcesses(This,Processes)	\
    (This)->lpVtbl -> get_DebuggedProcesses(This,Processes)

#define Debugger_get_LocalProcesses(This,Processes)	\
    (This)->lpVtbl -> get_LocalProcesses(This,Processes)

#define Debugger_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Debugger_get_Parent(This,DTE)	\
    (This)->lpVtbl -> get_Parent(This,DTE)

#define Debugger_TerminateAll(This)	\
    (This)->lpVtbl -> TerminateAll(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_GetExpression_Proxy( 
    Debugger * This,
    /* [in] */ BSTR ExpressionText,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseAutoExpandRules,
    /* [defaultvalue][in] */ long Timeout,
    /* [retval][out] */ Expression **Expression);


void __RPC_STUB Debugger_GetExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_DetachAll_Proxy( 
    Debugger * This);


void __RPC_STUB Debugger_DetachAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepInto_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepInto_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepOver_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_StepOut_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_StepOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Go_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_Go_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Break_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakMode);


void __RPC_STUB Debugger_Break_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_Stop_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForDesignMode);


void __RPC_STUB Debugger_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_SetNextStatement_Proxy( 
    Debugger * This);


void __RPC_STUB Debugger_SetNextStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_RunToCursor_Proxy( 
    Debugger * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Debugger_RunToCursor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_ExecuteStatement_Proxy( 
    Debugger * This,
    /* [in] */ BSTR Statement,
    /* [defaultvalue][in] */ long Timeout,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL TreatAsExpression);


void __RPC_STUB Debugger_ExecuteStatement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Breakpoints_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Debugger_get_Breakpoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Languages_Proxy( 
    Debugger * This,
    /* [retval][out] */ Languages **Languages);


void __RPC_STUB Debugger_get_Languages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ dbgDebugMode *Mode);


void __RPC_STUB Debugger_get_CurrentMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentProcess_Proxy( 
    Debugger * This,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Debugger_get_CurrentProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentProcess_Proxy( 
    Debugger * This,
    /* [in] */ Process *Process);


void __RPC_STUB Debugger_put_CurrentProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentProgram_Proxy( 
    Debugger * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Debugger_get_CurrentProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentProgram_Proxy( 
    Debugger * This,
    /* [in] */ Program *Program);


void __RPC_STUB Debugger_put_CurrentProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentThread_Proxy( 
    Debugger * This,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB Debugger_get_CurrentThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentThread_Proxy( 
    Debugger * This,
    /* [in] */ Thread *Thread);


void __RPC_STUB Debugger_put_CurrentThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_CurrentStackFrame_Proxy( 
    Debugger * This,
    /* [retval][out] */ StackFrame **StackFrame);


void __RPC_STUB Debugger_get_CurrentStackFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_CurrentStackFrame_Proxy( 
    Debugger * This,
    /* [in] */ StackFrame *StackFrame);


void __RPC_STUB Debugger_put_CurrentStackFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_HexDisplayMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ VARIANT_BOOL *HexModeOn);


void __RPC_STUB Debugger_get_HexDisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_HexDisplayMode_Proxy( 
    Debugger * This,
    /* [in] */ VARIANT_BOOL HexModeOn);


void __RPC_STUB Debugger_put_HexDisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_HexInputMode_Proxy( 
    Debugger * This,
    /* [retval][out] */ VARIANT_BOOL *HexModeOn);


void __RPC_STUB Debugger_get_HexInputMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Debugger_put_HexInputMode_Proxy( 
    Debugger * This,
    /* [in] */ VARIANT_BOOL HexModeOn);


void __RPC_STUB Debugger_put_HexInputMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_LastBreakReason_Proxy( 
    Debugger * This,
    /* [retval][out] */ dbgEventReason *Reason);


void __RPC_STUB Debugger_get_LastBreakReason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_BreakpointLastHit_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoint **Breakpoint);


void __RPC_STUB Debugger_get_BreakpointLastHit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_AllBreakpointsLastHit_Proxy( 
    Debugger * This,
    /* [retval][out] */ Breakpoints **Breakpoints);


void __RPC_STUB Debugger_get_AllBreakpointsLastHit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_DebuggedProcesses_Proxy( 
    Debugger * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Debugger_get_DebuggedProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_LocalProcesses_Proxy( 
    Debugger * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Debugger_get_LocalProcesses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_DTE_Proxy( 
    Debugger * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Debugger_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Debugger_get_Parent_Proxy( 
    Debugger * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Debugger_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debugger_TerminateAll_Proxy( 
    Debugger * This);


void __RPC_STUB Debugger_TerminateAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Debugger_INTERFACE_DEFINED__ */


#ifndef __Expression_INTERFACE_DEFINED__
#define __Expression_INTERFACE_DEFINED__

/* interface Expression */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Expression;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("27ADC812-BB07-11d2-8AD1-00C04F79E479")
    Expression : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ BSTR *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataMembers( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *Value) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsValidValue( 
            /* [retval][out] */ VARIANT_BOOL *ValidValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExpressionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Expression * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Expression * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Expression * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Expression * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Expression * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Expression * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Expression * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Expression * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Expression * This,
            /* [retval][out] */ BSTR *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataMembers )( 
            Expression * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Expression * This,
            /* [retval][out] */ BSTR *Value);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Expression * This,
            /* [in] */ BSTR NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsValidValue )( 
            Expression * This,
            /* [retval][out] */ VARIANT_BOOL *ValidValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Expression * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Expression * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Expression * This,
            /* [retval][out] */ Expressions **Expressions);
        
        END_INTERFACE
    } ExpressionVtbl;

    interface Expression
    {
        CONST_VTBL struct ExpressionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Expression_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Expression_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Expression_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Expression_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Expression_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Expression_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Expression_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Expression_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Expression_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define Expression_get_DataMembers(This,Expressions)	\
    (This)->lpVtbl -> get_DataMembers(This,Expressions)

#define Expression_get_Value(This,Value)	\
    (This)->lpVtbl -> get_Value(This,Value)

#define Expression_put_Value(This,NewValue)	\
    (This)->lpVtbl -> put_Value(This,NewValue)

#define Expression_get_IsValidValue(This,ValidValue)	\
    (This)->lpVtbl -> get_IsValidValue(This,ValidValue)

#define Expression_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Expression_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Expression_get_Collection(This,Expressions)	\
    (This)->lpVtbl -> get_Collection(This,Expressions)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Name_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Expression_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Type_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Type);


void __RPC_STUB Expression_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_DataMembers_Proxy( 
    Expression * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB Expression_get_DataMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Value_Proxy( 
    Expression * This,
    /* [retval][out] */ BSTR *Value);


void __RPC_STUB Expression_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Expression_put_Value_Proxy( 
    Expression * This,
    /* [in] */ BSTR NewValue);


void __RPC_STUB Expression_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_IsValidValue_Proxy( 
    Expression * This,
    /* [retval][out] */ VARIANT_BOOL *ValidValue);


void __RPC_STUB Expression_get_IsValidValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_DTE_Proxy( 
    Expression * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Expression_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Parent_Proxy( 
    Expression * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Expression_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expression_get_Collection_Proxy( 
    Expression * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB Expression_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Expression_INTERFACE_DEFINED__ */


#ifndef __Expressions_INTERFACE_DEFINED__
#define __Expressions_INTERFACE_DEFINED__

/* interface Expressions */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Expressions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2685337A-BB9E-11d2-8AD1-00C04F79E479")
    Expressions : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Expression **Expression) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ExpressionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Expressions * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Expressions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Expressions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Expressions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Expressions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Expressions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Expressions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Expressions * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Expression **Expression);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Expressions * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Expressions * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Expressions * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Expressions * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ExpressionsVtbl;

    interface Expressions
    {
        CONST_VTBL struct ExpressionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Expressions_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Expressions_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Expressions_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Expressions_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Expressions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Expressions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Expressions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Expressions_Item(This,Index,Expression)	\
    (This)->lpVtbl -> Item(This,Index,Expression)

#define Expressions__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Expressions_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Expressions_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Expressions_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Expressions_Item_Proxy( 
    Expressions * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Expression **Expression);


void __RPC_STUB Expressions_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Expressions__NewEnum_Proxy( 
    Expressions * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Expressions__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_DTE_Proxy( 
    Expressions * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Expressions_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_Parent_Proxy( 
    Expressions * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Expressions_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Expressions_get_Count_Proxy( 
    Expressions * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Expressions_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Expressions_INTERFACE_DEFINED__ */


#ifndef __Language_INTERFACE_DEFINED__
#define __Language_INTERFACE_DEFINED__

/* interface Language */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Language;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3CCFA68-C145-11d2-8AD1-00C04F79E479")
    Language : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Languages **Languages) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Language * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Language * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Language * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Language * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Language * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Language * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Language * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Language * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Language * This,
            /* [retval][out] */ Languages **Languages);
        
        END_INTERFACE
    } LanguageVtbl;

    interface Language
    {
        CONST_VTBL struct LanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Language_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Language_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Language_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Language_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Language_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Language_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Language_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Language_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Language_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Language_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Language_get_Collection(This,Languages)	\
    (This)->lpVtbl -> get_Collection(This,Languages)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Name_Proxy( 
    Language * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Language_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_DTE_Proxy( 
    Language * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Language_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Parent_Proxy( 
    Language * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Language_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Language_get_Collection_Proxy( 
    Language * This,
    /* [retval][out] */ Languages **Languages);


void __RPC_STUB Language_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Language_INTERFACE_DEFINED__ */


#ifndef __Languages_INTERFACE_DEFINED__
#define __Languages_INTERFACE_DEFINED__

/* interface Languages */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Languages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A4F4246C-C131-11d2-8AD1-00C04F79E479")
    Languages : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Language **Language) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Languages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Languages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Languages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Languages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Languages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Languages * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Language **Language);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Languages * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Languages * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Languages * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Languages * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } LanguagesVtbl;

    interface Languages
    {
        CONST_VTBL struct LanguagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Languages_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Languages_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Languages_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Languages_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Languages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Languages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Languages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Languages_Item(This,Index,Language)	\
    (This)->lpVtbl -> Item(This,Index,Language)

#define Languages__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Languages_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Languages_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Languages_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Languages_Item_Proxy( 
    Languages * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Language **Language);


void __RPC_STUB Languages_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Languages__NewEnum_Proxy( 
    Languages * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Languages__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_DTE_Proxy( 
    Languages * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Languages_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_Parent_Proxy( 
    Languages * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Languages_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Languages_get_Count_Proxy( 
    Languages * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Languages_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Languages_INTERFACE_DEFINED__ */


#ifndef __Process_INTERFACE_DEFINED__
#define __Process_INTERFACE_DEFINED__

/* interface Process */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Process;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5C5A0070-F396-4e37-A82A-1B767E272DF9")
    Process : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Attach( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Detach( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Break( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Terminate( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProcessID( 
            /* [retval][out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Programs( 
            /* [retval][out] */ Programs **Programs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Processes **Processes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProcessVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Process * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Process * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Process * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Process * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Process * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Process * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Attach )( 
            Process * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Break )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Terminate )( 
            Process * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Process * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessID )( 
            Process * This,
            /* [retval][out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Programs )( 
            Process * This,
            /* [retval][out] */ Programs **Programs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Process * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Process * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Process * This,
            /* [retval][out] */ Processes **Processes);
        
        END_INTERFACE
    } ProcessVtbl;

    interface Process
    {
        CONST_VTBL struct ProcessVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Process_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Process_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Process_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Process_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Process_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Process_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Process_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Process_Attach(This)	\
    (This)->lpVtbl -> Attach(This)

#define Process_Detach(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Detach(This,WaitForBreakOrEnd)

#define Process_Break(This,WaitForBreakMode)	\
    (This)->lpVtbl -> Break(This,WaitForBreakMode)

#define Process_Terminate(This,WaitForBreakOrEnd)	\
    (This)->lpVtbl -> Terminate(This,WaitForBreakOrEnd)

#define Process_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Process_get_ProcessID(This,ID)	\
    (This)->lpVtbl -> get_ProcessID(This,ID)

#define Process_get_Programs(This,Programs)	\
    (This)->lpVtbl -> get_Programs(This,Programs)

#define Process_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Process_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Process_get_Collection(This,Processes)	\
    (This)->lpVtbl -> get_Collection(This,Processes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Attach_Proxy( 
    Process * This);


void __RPC_STUB Process_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Detach_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Process_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Break_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakMode);


void __RPC_STUB Process_Break_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Process_Terminate_Proxy( 
    Process * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBreakOrEnd);


void __RPC_STUB Process_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Name_Proxy( 
    Process * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Process_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_ProcessID_Proxy( 
    Process * This,
    /* [retval][out] */ long *ID);


void __RPC_STUB Process_get_ProcessID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Programs_Proxy( 
    Process * This,
    /* [retval][out] */ Programs **Programs);


void __RPC_STUB Process_get_Programs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_DTE_Proxy( 
    Process * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Process_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Parent_Proxy( 
    Process * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Process_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Process_get_Collection_Proxy( 
    Process * This,
    /* [retval][out] */ Processes **Processes);


void __RPC_STUB Process_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Process_INTERFACE_DEFINED__ */


#ifndef __Processes_INTERFACE_DEFINED__
#define __Processes_INTERFACE_DEFINED__

/* interface Processes */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Processes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9F379969-5EAC-4a54-B2BC-6946CFFB56EF")
    Processes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProcessesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Processes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Processes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Processes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Processes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Processes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Processes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Processes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Processes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Process **Process);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Processes * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Processes * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Processes * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Processes * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ProcessesVtbl;

    interface Processes
    {
        CONST_VTBL struct ProcessesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Processes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Processes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Processes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Processes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Processes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Processes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Processes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Processes_Item(This,Index,Process)	\
    (This)->lpVtbl -> Item(This,Index,Process)

#define Processes__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Processes_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Processes_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Processes_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Processes_Item_Proxy( 
    Processes * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Processes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Processes__NewEnum_Proxy( 
    Processes * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Processes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_DTE_Proxy( 
    Processes * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Processes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_Parent_Proxy( 
    Processes * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Processes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Processes_get_Count_Proxy( 
    Processes * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Processes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Processes_INTERFACE_DEFINED__ */


#ifndef __Program_INTERFACE_DEFINED__
#define __Program_INTERFACE_DEFINED__

/* interface Program */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Program;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6A38D87C-BBA0-11d2-8AD1-00C04F79E479")
    Program : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Process( 
            /* [retval][out] */ Process **Process) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Threads( 
            /* [retval][out] */ Threads **Threads) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBeingDebugged( 
            /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Programs **Programs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProgramVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Program * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Program * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Program * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Program * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Program * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Program * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Program * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Program * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Process )( 
            Program * This,
            /* [retval][out] */ Process **Process);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Threads )( 
            Program * This,
            /* [retval][out] */ Threads **Threads);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBeingDebugged )( 
            Program * This,
            /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Program * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Program * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Program * This,
            /* [retval][out] */ Programs **Programs);
        
        END_INTERFACE
    } ProgramVtbl;

    interface Program
    {
        CONST_VTBL struct ProgramVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Program_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Program_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Program_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Program_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Program_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Program_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Program_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Program_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Program_get_Process(This,Process)	\
    (This)->lpVtbl -> get_Process(This,Process)

#define Program_get_Threads(This,Threads)	\
    (This)->lpVtbl -> get_Threads(This,Threads)

#define Program_get_IsBeingDebugged(This,IsBeingDebugged)	\
    (This)->lpVtbl -> get_IsBeingDebugged(This,IsBeingDebugged)

#define Program_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Program_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Program_get_Collection(This,Programs)	\
    (This)->lpVtbl -> get_Collection(This,Programs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Name_Proxy( 
    Program * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Program_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Process_Proxy( 
    Program * This,
    /* [retval][out] */ Process **Process);


void __RPC_STUB Program_get_Process_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Threads_Proxy( 
    Program * This,
    /* [retval][out] */ Threads **Threads);


void __RPC_STUB Program_get_Threads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_IsBeingDebugged_Proxy( 
    Program * This,
    /* [retval][out] */ VARIANT_BOOL *IsBeingDebugged);


void __RPC_STUB Program_get_IsBeingDebugged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_DTE_Proxy( 
    Program * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Program_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Parent_Proxy( 
    Program * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Program_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Program_get_Collection_Proxy( 
    Program * This,
    /* [retval][out] */ Programs **Programs);


void __RPC_STUB Program_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Program_INTERFACE_DEFINED__ */


#ifndef __Programs_INTERFACE_DEFINED__
#define __Programs_INTERFACE_DEFINED__

/* interface Programs */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Programs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC6A118A-BBAB-11d2-8AD1-00C04F79E479")
    Programs : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProgramsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Programs * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Programs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Programs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Programs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Programs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Programs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Programs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Programs * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Program **Program);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Programs * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Programs * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Programs * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Programs * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ProgramsVtbl;

    interface Programs
    {
        CONST_VTBL struct ProgramsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Programs_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Programs_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Programs_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Programs_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Programs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Programs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Programs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Programs_Item(This,Index,Program)	\
    (This)->lpVtbl -> Item(This,Index,Program)

#define Programs__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Programs_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Programs_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Programs_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Programs_Item_Proxy( 
    Programs * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Programs_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Programs__NewEnum_Proxy( 
    Programs * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Programs__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_DTE_Proxy( 
    Programs * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Programs_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_Parent_Proxy( 
    Programs * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Programs_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Programs_get_Count_Proxy( 
    Programs * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Programs_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Programs_INTERFACE_DEFINED__ */


#ifndef __StackFrame_INTERFACE_DEFINED__
#define __StackFrame_INTERFACE_DEFINED__

/* interface StackFrame */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_StackFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1342D0D8-BBA3-11d2-8AD1-00C04F79E479")
    StackFrame : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionName( 
            /* [retval][out] */ BSTR *FunctionName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnType( 
            /* [retval][out] */ BSTR *ReturnType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locals( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Arguments( 
            /* [retval][out] */ Expressions **Expressions) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Module( 
            /* [retval][out] */ BSTR *Module) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ StackFrames **StackFrames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StackFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StackFrame * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StackFrame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StackFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StackFrame * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StackFrame * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StackFrame * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StackFrame * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionName )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *FunctionName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnType )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *ReturnType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locals )( 
            StackFrame * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Arguments )( 
            StackFrame * This,
            /* [retval][out] */ Expressions **Expressions);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Module )( 
            StackFrame * This,
            /* [retval][out] */ BSTR *Module);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StackFrame * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StackFrame * This,
            /* [retval][out] */ Thread **Thread);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            StackFrame * This,
            /* [retval][out] */ StackFrames **StackFrames);
        
        END_INTERFACE
    } StackFrameVtbl;

    interface StackFrame
    {
        CONST_VTBL struct StackFrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StackFrame_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StackFrame_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StackFrame_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StackFrame_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StackFrame_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StackFrame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StackFrame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StackFrame_get_Language(This,Language)	\
    (This)->lpVtbl -> get_Language(This,Language)

#define StackFrame_get_FunctionName(This,FunctionName)	\
    (This)->lpVtbl -> get_FunctionName(This,FunctionName)

#define StackFrame_get_ReturnType(This,ReturnType)	\
    (This)->lpVtbl -> get_ReturnType(This,ReturnType)

#define StackFrame_get_Locals(This,Expressions)	\
    (This)->lpVtbl -> get_Locals(This,Expressions)

#define StackFrame_get_Arguments(This,Expressions)	\
    (This)->lpVtbl -> get_Arguments(This,Expressions)

#define StackFrame_get_Module(This,Module)	\
    (This)->lpVtbl -> get_Module(This,Module)

#define StackFrame_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define StackFrame_get_Parent(This,Thread)	\
    (This)->lpVtbl -> get_Parent(This,Thread)

#define StackFrame_get_Collection(This,StackFrames)	\
    (This)->lpVtbl -> get_Collection(This,StackFrames)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Language_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *Language);


void __RPC_STUB StackFrame_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_FunctionName_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *FunctionName);


void __RPC_STUB StackFrame_get_FunctionName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_ReturnType_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *ReturnType);


void __RPC_STUB StackFrame_get_ReturnType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Locals_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB StackFrame_get_Locals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Arguments_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Expressions **Expressions);


void __RPC_STUB StackFrame_get_Arguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Module_Proxy( 
    StackFrame * This,
    /* [retval][out] */ BSTR *Module);


void __RPC_STUB StackFrame_get_Module_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_DTE_Proxy( 
    StackFrame * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB StackFrame_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Parent_Proxy( 
    StackFrame * This,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB StackFrame_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrame_get_Collection_Proxy( 
    StackFrame * This,
    /* [retval][out] */ StackFrames **StackFrames);


void __RPC_STUB StackFrame_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StackFrame_INTERFACE_DEFINED__ */


#ifndef __StackFrames_INTERFACE_DEFINED__
#define __StackFrames_INTERFACE_DEFINED__

/* interface StackFrames */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_StackFrames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ED85664-BBA2-11d2-8AD1-00C04F79E479")
    StackFrames : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ StackFrame **StackFrame) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StackFramesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StackFrames * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StackFrames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StackFrames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StackFrames * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StackFrames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StackFrames * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StackFrames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            StackFrames * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ StackFrame **StackFrame);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            StackFrames * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StackFrames * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StackFrames * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            StackFrames * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } StackFramesVtbl;

    interface StackFrames
    {
        CONST_VTBL struct StackFramesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StackFrames_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StackFrames_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StackFrames_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StackFrames_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StackFrames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StackFrames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StackFrames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StackFrames_Item(This,Index,StackFrame)	\
    (This)->lpVtbl -> Item(This,Index,StackFrame)

#define StackFrames__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define StackFrames_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define StackFrames_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define StackFrames_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StackFrames_Item_Proxy( 
    StackFrames * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ StackFrame **StackFrame);


void __RPC_STUB StackFrames_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE StackFrames__NewEnum_Proxy( 
    StackFrames * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB StackFrames__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_DTE_Proxy( 
    StackFrames * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB StackFrames_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_Parent_Proxy( 
    StackFrames * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB StackFrames_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE StackFrames_get_Count_Proxy( 
    StackFrames * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB StackFrames_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StackFrames_INTERFACE_DEFINED__ */


#ifndef __Thread_INTERFACE_DEFINED__
#define __Thread_INTERFACE_DEFINED__

/* interface Thread */
/* [object][version][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Thread;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9407F466-BBA1-11d2-8AD1-00C04F79E479")
    Thread : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Freeze( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thaw( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuspendCount( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StackFrames( 
            /* [retval][out] */ StackFrames **StackFrames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Program( 
            /* [retval][out] */ Program **Program) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAlive( 
            /* [retval][out] */ VARIANT_BOOL *IsAlive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ BSTR *Priority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFrozen( 
            /* [retval][out] */ VARIANT_BOOL *IsFrozen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Threads **Threads) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreadVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Thread * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Thread * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Thread * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Thread * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Thread * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Thread * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Thread * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Freeze )( 
            Thread * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Thaw )( 
            Thread * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Thread * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuspendCount )( 
            Thread * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Thread * This,
            /* [retval][out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StackFrames )( 
            Thread * This,
            /* [retval][out] */ StackFrames **StackFrames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Program )( 
            Thread * This,
            /* [retval][out] */ Program **Program);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAlive )( 
            Thread * This,
            /* [retval][out] */ VARIANT_BOOL *IsAlive);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            Thread * This,
            /* [retval][out] */ BSTR *Priority);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            Thread * This,
            /* [retval][out] */ BSTR *Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFrozen )( 
            Thread * This,
            /* [retval][out] */ VARIANT_BOOL *IsFrozen);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Thread * This,
            /* [retval][out] */ DTE	**DTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Thread * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Thread * This,
            /* [retval][out] */ Threads **Threads);
        
        END_INTERFACE
    } ThreadVtbl;

    interface Thread
    {
        CONST_VTBL struct ThreadVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Thread_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Thread_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Thread_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Thread_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Thread_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Thread_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Thread_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Thread_Freeze(This)	\
    (This)->lpVtbl -> Freeze(This)

#define Thread_Thaw(This)	\
    (This)->lpVtbl -> Thaw(This)

#define Thread_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define Thread_get_SuspendCount(This,Count)	\
    (This)->lpVtbl -> get_SuspendCount(This,Count)

#define Thread_get_ID(This,ID)	\
    (This)->lpVtbl -> get_ID(This,ID)

#define Thread_get_StackFrames(This,StackFrames)	\
    (This)->lpVtbl -> get_StackFrames(This,StackFrames)

#define Thread_get_Program(This,Program)	\
    (This)->lpVtbl -> get_Program(This,Program)

#define Thread_get_IsAlive(This,IsAlive)	\
    (This)->lpVtbl -> get_IsAlive(This,IsAlive)

#define Thread_get_Priority(This,Priority)	\
    (This)->lpVtbl -> get_Priority(This,Priority)

#define Thread_get_Location(This,Location)	\
    (This)->lpVtbl -> get_Location(This,Location)

#define Thread_get_IsFrozen(This,IsFrozen)	\
    (This)->lpVtbl -> get_IsFrozen(This,IsFrozen)

#define Thread_get_DTE(This,DTE)	\
    (This)->lpVtbl -> get_DTE(This,DTE)

#define Thread_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Thread_get_Collection(This,Threads)	\
    (This)->lpVtbl -> get_Collection(This,Threads)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thread_Freeze_Proxy( 
    Thread * This);


void __RPC_STUB Thread_Freeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Thread_Thaw_Proxy( 
    Thread * This);


void __RPC_STUB Thread_Thaw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Name_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB Thread_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_SuspendCount_Proxy( 
    Thread * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Thread_get_SuspendCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_ID_Proxy( 
    Thread * This,
    /* [retval][out] */ long *ID);


void __RPC_STUB Thread_get_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_StackFrames_Proxy( 
    Thread * This,
    /* [retval][out] */ StackFrames **StackFrames);


void __RPC_STUB Thread_get_StackFrames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Program_Proxy( 
    Thread * This,
    /* [retval][out] */ Program **Program);


void __RPC_STUB Thread_get_Program_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_IsAlive_Proxy( 
    Thread * This,
    /* [retval][out] */ VARIANT_BOOL *IsAlive);


void __RPC_STUB Thread_get_IsAlive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Priority_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Priority);


void __RPC_STUB Thread_get_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Location_Proxy( 
    Thread * This,
    /* [retval][out] */ BSTR *Location);


void __RPC_STUB Thread_get_Location_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_IsFrozen_Proxy( 
    Thread * This,
    /* [retval][out] */ VARIANT_BOOL *IsFrozen);


void __RPC_STUB Thread_get_IsFrozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_DTE_Proxy( 
    Thread * This,
    /* [retval][out] */ DTE	**DTE);


void __RPC_STUB Thread_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Parent_Proxy( 
    Thread * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Thread_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Thread_get_Collection_Proxy( 
    Thread * This,
    /* [retval][out] */ Threads **Threads);


void __RPC_STUB Thread_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Thread_INTERFACE_DEFINED__ */


#ifndef __Threads_INTERFACE_DEFINED__
#define __Threads_INTERFACE_DEFINED__

/* interface Threads */
/* [object][helpstringcontext][helpstring][helpcontext][version][dual][uuid] */ 


EXTERN_C const IID IID_Threads;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6AA23FB4-BBA1-11d2-8AD1-00C04F79E479")
    Threads : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Thread **Thread) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Debugger **Debugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreadsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Threads * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Threads * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Threads * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Threads * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Threads * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Threads * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Threads * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Threads * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Thread **Thread);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Threads * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Threads * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Threads * This,
            /* [retval][out] */ Debugger **Debugger);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Threads * This,
            /* [retval][out] */ long *Count);
        
        END_INTERFACE
    } ThreadsVtbl;

    interface Threads
    {
        CONST_VTBL struct ThreadsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Threads_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Threads_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Threads_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Threads_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Threads_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Threads_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Threads_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Threads_Item(This,Index,Thread)	\
    (This)->lpVtbl -> Item(This,Index,Thread)

#define Threads__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Threads_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Threads_get_Parent(This,Debugger)	\
    (This)->lpVtbl -> get_Parent(This,Debugger)

#define Threads_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Threads_Item_Proxy( 
    Threads * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Thread **Thread);


void __RPC_STUB Threads_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Threads__NewEnum_Proxy( 
    Threads * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Threads__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_DTE_Proxy( 
    Threads * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Threads_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_Parent_Proxy( 
    Threads * This,
    /* [retval][out] */ Debugger **Debugger);


void __RPC_STUB Threads_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Threads_get_Count_Proxy( 
    Threads * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB Threads_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Threads_INTERFACE_DEFINED__ */


#ifndef ___dispDebuggerEvents_DISPINTERFACE_DEFINED__
#define ___dispDebuggerEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDebuggerEvents */
/* [version][uuid] */ 


EXTERN_C const IID DIID__dispDebuggerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("46209330-0FBA-11d3-B880-00C04F79E479")
    _dispDebuggerEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDebuggerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDebuggerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDebuggerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDebuggerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDebuggerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDebuggerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDebuggerEventsVtbl;

    interface _dispDebuggerEvents
    {
        CONST_VTBL struct _dispDebuggerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDebuggerEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDebuggerEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDebuggerEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDebuggerEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDebuggerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDebuggerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDebuggerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDebuggerEvents_DISPINTERFACE_DEFINED__ */


#ifndef ___DebuggerEventsRoot_INTERFACE_DEFINED__
#define ___DebuggerEventsRoot_INTERFACE_DEFINED__

/* interface _DebuggerEventsRoot */
/* [version][hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__DebuggerEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4BB39FB-0F0E-11d3-B880-00C04F79E479")
    _DebuggerEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_DebuggerEvents( 
            /* [retval][out] */ IDispatch **disp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DebuggerEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DebuggerEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DebuggerEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DebuggerEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DebuggerEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DebuggerEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DebuggerEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DebuggerEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_DebuggerEvents )( 
            _DebuggerEventsRoot * This,
            /* [retval][out] */ IDispatch **disp);
        
        END_INTERFACE
    } _DebuggerEventsRootVtbl;

    interface _DebuggerEventsRoot
    {
        CONST_VTBL struct _DebuggerEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DebuggerEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DebuggerEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DebuggerEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DebuggerEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DebuggerEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DebuggerEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DebuggerEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DebuggerEventsRoot_get_DebuggerEvents(This,disp)	\
    (This)->lpVtbl -> get_DebuggerEvents(This,disp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _DebuggerEventsRoot_get_DebuggerEvents_Proxy( 
    _DebuggerEventsRoot * This,
    /* [retval][out] */ IDispatch **disp);


void __RPC_STUB _DebuggerEventsRoot_get_DebuggerEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DebuggerEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___DebuggerEvents_INTERFACE_DEFINED__
#define ___DebuggerEvents_INTERFACE_DEFINED__

/* interface _DebuggerEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__DebuggerEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D4EAE958-0FBA-11d3-B880-00C04F79E479")
    _DebuggerEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DebuggerEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DebuggerEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DebuggerEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DebuggerEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DebuggerEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DebuggerEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DebuggerEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DebuggerEventsVtbl;

    interface _DebuggerEvents
    {
        CONST_VTBL struct _DebuggerEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DebuggerEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DebuggerEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DebuggerEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DebuggerEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DebuggerEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DebuggerEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DebuggerEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DebuggerEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DebuggerEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("0C763210-0FBB-11d3-B880-00C04F79E479")
DebuggerEvents;
#endif

#ifndef __IDTWizard_INTERFACE_DEFINED__
#define __IDTWizard_INTERFACE_DEFINED__

/* interface IDTWizard */
/* [helpstringcontext][helpstring][helpcontext][local][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTWizard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E914BBE1-03A4-11D1-BBCD-00A0C90F2744")
    IDTWizard : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [in] */ IDispatch *Application,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [in] */ SAFEARRAY * *CustomParams,
            /* [out][in] */ wizardResult *RetVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTWizardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTWizard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTWizard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTWizard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTWizard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTWizard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTWizard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTWizard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            IDTWizard * This,
            /* [in] */ IDispatch *Application,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [in] */ SAFEARRAY * *CustomParams,
            /* [out][in] */ wizardResult *RetVal);
        
        END_INTERFACE
    } IDTWizardVtbl;

    interface IDTWizard
    {
        CONST_VTBL struct IDTWizardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTWizard_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTWizard_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTWizard_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTWizard_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTWizard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTWizard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTWizard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTWizard_Execute(This,Application,hwndOwner,ContextParams,CustomParams,RetVal)	\
    (This)->lpVtbl -> Execute(This,Application,hwndOwner,ContextParams,CustomParams,RetVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTWizard_Execute_Proxy( 
    IDTWizard * This,
    /* [in] */ IDispatch *Application,
    /* [in] */ long hwndOwner,
    /* [in] */ SAFEARRAY * *ContextParams,
    /* [in] */ SAFEARRAY * *CustomParams,
    /* [out][in] */ wizardResult *RetVal);


void __RPC_STUB IDTWizard_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTWizard_INTERFACE_DEFINED__ */


#ifndef __IVsExtensibility_INTERFACE_DEFINED__
#define __IVsExtensibility_INTERFACE_DEFINED__

/* interface IVsExtensibility */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsExtensibility;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3c536122-57b1-46de-ab34-acc524140093")
    IVsExtensibility : public IUnknown
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [in] */ ISupportVSProperties *pParent,
            /* [in] */ IDispatch *pdispPropObj,
            /* [out] */ Properties **ppProperties) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RunWizardFile( 
            /* [in] */ BSTR bstrWizFilename,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *vContextParams,
            /* [retval][out] */ wizardResult *pResult) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Get_TextBuffer( 
            /* [in] */ IUnknown *pVsTextStream,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [retval][out] */ TextBuffer **ppTextBuffer) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE EnterAutomationFunction( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExitAutomationFunction( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsInAutomationFunction( 
            /* [retval][out] */ BOOL *pfInAutoFunc) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetUserControl( 
            /* [out] */ VARIANT_BOOL *fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetUserControl( 
            /* [in] */ VARIANT_BOOL fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetUserControlUnlatched( 
            /* [in] */ VARIANT_BOOL fUserControl) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE LockServer( 
            /* [in] */ VARIANT_BOOL __MIDL_0010) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetLockCount( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE TestForShutdown( 
            /* [retval][out] */ VARIANT_BOOL *fShutdown) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetGlobalsObject( 
            /* [in] */ VARIANT ExtractFrom,
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetConfigMgr( 
            /* [in] */ IUnknown *pIVsProject,
            DWORD_PTR itemid,
            /* [retval][out] */ ConfigurationManager **ppCfgMgr) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FireMacroReset( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetDocumentFromDocCookie( 
            LONG_PTR lDocCookie,
            /* [retval][out] */ Document **ppDoc) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IsMethodDisabled( 
            const GUID *pGUID,
            long dispid) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetSuppressUI( 
            VARIANT_BOOL In) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetSuppressUI( 
            VARIANT_BOOL *pOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsExtensibilityVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsExtensibility * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsExtensibility * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            IVsExtensibility * This,
            /* [in] */ ISupportVSProperties *pParent,
            /* [in] */ IDispatch *pdispPropObj,
            /* [out] */ Properties **ppProperties);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RunWizardFile )( 
            IVsExtensibility * This,
            /* [in] */ BSTR bstrWizFilename,
            /* [in] */ long hwndOwner,
            /* [in] */ SAFEARRAY * *vContextParams,
            /* [retval][out] */ wizardResult *pResult);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Get_TextBuffer )( 
            IVsExtensibility * This,
            /* [in] */ IUnknown *pVsTextStream,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [retval][out] */ TextBuffer **ppTextBuffer);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *EnterAutomationFunction )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExitAutomationFunction )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsInAutomationFunction )( 
            IVsExtensibility * This,
            /* [retval][out] */ BOOL *pfInAutoFunc);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetUserControl )( 
            IVsExtensibility * This,
            /* [out] */ VARIANT_BOOL *fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetUserControl )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetUserControlUnlatched )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL fUserControl);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *LockServer )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT_BOOL __MIDL_0010);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetLockCount )( 
            IVsExtensibility * This,
            /* [retval][out] */ long *pCount);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *TestForShutdown )( 
            IVsExtensibility * This,
            /* [retval][out] */ VARIANT_BOOL *fShutdown);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetGlobalsObject )( 
            IVsExtensibility * This,
            /* [in] */ VARIANT ExtractFrom,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetConfigMgr )( 
            IVsExtensibility * This,
            /* [in] */ IUnknown *pIVsProject,
            DWORD_PTR itemid,
            /* [retval][out] */ ConfigurationManager **ppCfgMgr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FireMacroReset )( 
            IVsExtensibility * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetDocumentFromDocCookie )( 
            IVsExtensibility * This,
            LONG_PTR lDocCookie,
            /* [retval][out] */ Document **ppDoc);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IsMethodDisabled )( 
            IVsExtensibility * This,
            const GUID *pGUID,
            long dispid);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetSuppressUI )( 
            IVsExtensibility * This,
            VARIANT_BOOL In);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetSuppressUI )( 
            IVsExtensibility * This,
            VARIANT_BOOL *pOut);
        
        END_INTERFACE
    } IVsExtensibilityVtbl;

    interface IVsExtensibility
    {
        CONST_VTBL struct IVsExtensibilityVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsExtensibility_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsExtensibility_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsExtensibility_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsExtensibility_get_Properties(This,pParent,pdispPropObj,ppProperties)	\
    (This)->lpVtbl -> get_Properties(This,pParent,pdispPropObj,ppProperties)

#define IVsExtensibility_RunWizardFile(This,bstrWizFilename,hwndOwner,vContextParams,pResult)	\
    (This)->lpVtbl -> RunWizardFile(This,bstrWizFilename,hwndOwner,vContextParams,pResult)

#define IVsExtensibility_Get_TextBuffer(This,pVsTextStream,pParent,ppTextBuffer)	\
    (This)->lpVtbl -> Get_TextBuffer(This,pVsTextStream,pParent,ppTextBuffer)

#define IVsExtensibility_EnterAutomationFunction(This)	\
    (This)->lpVtbl -> EnterAutomationFunction(This)

#define IVsExtensibility_ExitAutomationFunction(This)	\
    (This)->lpVtbl -> ExitAutomationFunction(This)

#define IVsExtensibility_IsInAutomationFunction(This,pfInAutoFunc)	\
    (This)->lpVtbl -> IsInAutomationFunction(This,pfInAutoFunc)

#define IVsExtensibility_GetUserControl(This,fUserControl)	\
    (This)->lpVtbl -> GetUserControl(This,fUserControl)

#define IVsExtensibility_SetUserControl(This,fUserControl)	\
    (This)->lpVtbl -> SetUserControl(This,fUserControl)

#define IVsExtensibility_SetUserControlUnlatched(This,fUserControl)	\
    (This)->lpVtbl -> SetUserControlUnlatched(This,fUserControl)

#define IVsExtensibility_LockServer(This,__MIDL_0010)	\
    (This)->lpVtbl -> LockServer(This,__MIDL_0010)

#define IVsExtensibility_GetLockCount(This,pCount)	\
    (This)->lpVtbl -> GetLockCount(This,pCount)

#define IVsExtensibility_TestForShutdown(This,fShutdown)	\
    (This)->lpVtbl -> TestForShutdown(This,fShutdown)

#define IVsExtensibility_GetGlobalsObject(This,ExtractFrom,ppGlobals)	\
    (This)->lpVtbl -> GetGlobalsObject(This,ExtractFrom,ppGlobals)

#define IVsExtensibility_GetConfigMgr(This,pIVsProject,itemid,ppCfgMgr)	\
    (This)->lpVtbl -> GetConfigMgr(This,pIVsProject,itemid,ppCfgMgr)

#define IVsExtensibility_FireMacroReset(This)	\
    (This)->lpVtbl -> FireMacroReset(This)

#define IVsExtensibility_GetDocumentFromDocCookie(This,lDocCookie,ppDoc)	\
    (This)->lpVtbl -> GetDocumentFromDocCookie(This,lDocCookie,ppDoc)

#define IVsExtensibility_IsMethodDisabled(This,pGUID,dispid)	\
    (This)->lpVtbl -> IsMethodDisabled(This,pGUID,dispid)

#define IVsExtensibility_SetSuppressUI(This,In)	\
    (This)->lpVtbl -> SetSuppressUI(This,In)

#define IVsExtensibility_GetSuppressUI(This,pOut)	\
    (This)->lpVtbl -> GetSuppressUI(This,pOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_get_Properties_Proxy( 
    IVsExtensibility * This,
    /* [in] */ ISupportVSProperties *pParent,
    /* [in] */ IDispatch *pdispPropObj,
    /* [out] */ Properties **ppProperties);


void __RPC_STUB IVsExtensibility_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_RunWizardFile_Proxy( 
    IVsExtensibility * This,
    /* [in] */ BSTR bstrWizFilename,
    /* [in] */ long hwndOwner,
    /* [in] */ SAFEARRAY * *vContextParams,
    /* [retval][out] */ wizardResult *pResult);


void __RPC_STUB IVsExtensibility_RunWizardFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_Get_TextBuffer_Proxy( 
    IVsExtensibility * This,
    /* [in] */ IUnknown *pVsTextStream,
    /* [in] */ IExtensibleObjectSite *pParent,
    /* [retval][out] */ TextBuffer **ppTextBuffer);


void __RPC_STUB IVsExtensibility_Get_TextBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_EnterAutomationFunction_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_EnterAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_ExitAutomationFunction_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_ExitAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_IsInAutomationFunction_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ BOOL *pfInAutoFunc);


void __RPC_STUB IVsExtensibility_IsInAutomationFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetUserControl_Proxy( 
    IVsExtensibility * This,
    /* [out] */ VARIANT_BOOL *fUserControl);


void __RPC_STUB IVsExtensibility_GetUserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetUserControl_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL fUserControl);


void __RPC_STUB IVsExtensibility_SetUserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetUserControlUnlatched_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL fUserControl);


void __RPC_STUB IVsExtensibility_SetUserControlUnlatched_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_LockServer_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT_BOOL __MIDL_0010);


void __RPC_STUB IVsExtensibility_LockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetLockCount_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB IVsExtensibility_GetLockCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_TestForShutdown_Proxy( 
    IVsExtensibility * This,
    /* [retval][out] */ VARIANT_BOOL *fShutdown);


void __RPC_STUB IVsExtensibility_TestForShutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetGlobalsObject_Proxy( 
    IVsExtensibility * This,
    /* [in] */ VARIANT ExtractFrom,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB IVsExtensibility_GetGlobalsObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetConfigMgr_Proxy( 
    IVsExtensibility * This,
    /* [in] */ IUnknown *pIVsProject,
    DWORD_PTR itemid,
    /* [retval][out] */ ConfigurationManager **ppCfgMgr);


void __RPC_STUB IVsExtensibility_GetConfigMgr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_FireMacroReset_Proxy( 
    IVsExtensibility * This);


void __RPC_STUB IVsExtensibility_FireMacroReset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetDocumentFromDocCookie_Proxy( 
    IVsExtensibility * This,
    LONG_PTR lDocCookie,
    /* [retval][out] */ Document **ppDoc);


void __RPC_STUB IVsExtensibility_GetDocumentFromDocCookie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_IsMethodDisabled_Proxy( 
    IVsExtensibility * This,
    const GUID *pGUID,
    long dispid);


void __RPC_STUB IVsExtensibility_IsMethodDisabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_SetSuppressUI_Proxy( 
    IVsExtensibility * This,
    VARIANT_BOOL In);


void __RPC_STUB IVsExtensibility_SetSuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsExtensibility_GetSuppressUI_Proxy( 
    IVsExtensibility * This,
    VARIANT_BOOL *pOut);


void __RPC_STUB IVsExtensibility_GetSuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsExtensibility_INTERFACE_DEFINED__ */


#ifndef __IVsGlobalsCallback_INTERFACE_DEFINED__
#define __IVsGlobalsCallback_INTERFACE_DEFINED__

/* interface IVsGlobalsCallback */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsGlobalsCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e2cc506a-588b-4f65-a1f0-2244c060abcb")
    IVsGlobalsCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE WriteVariablesToData( 
            /* [in] */ LPCOLESTR pVariableName,
            /* [in] */ VARIANT *varData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReadData( 
            /* [in] */ Globals *pGlobals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearVariables( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VariableChanged( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanModifySource( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            IDispatch **ppOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsGlobalsCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsGlobalsCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsGlobalsCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *WriteVariablesToData )( 
            IVsGlobalsCallback * This,
            /* [in] */ LPCOLESTR pVariableName,
            /* [in] */ VARIANT *varData);
        
        HRESULT ( STDMETHODCALLTYPE *ReadData )( 
            IVsGlobalsCallback * This,
            /* [in] */ Globals *pGlobals);
        
        HRESULT ( STDMETHODCALLTYPE *ClearVariables )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *VariableChanged )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *CanModifySource )( 
            IVsGlobalsCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IVsGlobalsCallback * This,
            IDispatch **ppOut);
        
        END_INTERFACE
    } IVsGlobalsCallbackVtbl;

    interface IVsGlobalsCallback
    {
        CONST_VTBL struct IVsGlobalsCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsGlobalsCallback_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsGlobalsCallback_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsGlobalsCallback_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsGlobalsCallback_WriteVariablesToData(This,pVariableName,varData)	\
    (This)->lpVtbl -> WriteVariablesToData(This,pVariableName,varData)

#define IVsGlobalsCallback_ReadData(This,pGlobals)	\
    (This)->lpVtbl -> ReadData(This,pGlobals)

#define IVsGlobalsCallback_ClearVariables(This)	\
    (This)->lpVtbl -> ClearVariables(This)

#define IVsGlobalsCallback_VariableChanged(This)	\
    (This)->lpVtbl -> VariableChanged(This)

#define IVsGlobalsCallback_CanModifySource(This)	\
    (This)->lpVtbl -> CanModifySource(This)

#define IVsGlobalsCallback_GetParent(This,ppOut)	\
    (This)->lpVtbl -> GetParent(This,ppOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_WriteVariablesToData_Proxy( 
    IVsGlobalsCallback * This,
    /* [in] */ LPCOLESTR pVariableName,
    /* [in] */ VARIANT *varData);


void __RPC_STUB IVsGlobalsCallback_WriteVariablesToData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_ReadData_Proxy( 
    IVsGlobalsCallback * This,
    /* [in] */ Globals *pGlobals);


void __RPC_STUB IVsGlobalsCallback_ReadData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_ClearVariables_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_ClearVariables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_VariableChanged_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_VariableChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_CanModifySource_Proxy( 
    IVsGlobalsCallback * This);


void __RPC_STUB IVsGlobalsCallback_CanModifySource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobalsCallback_GetParent_Proxy( 
    IVsGlobalsCallback * This,
    IDispatch **ppOut);


void __RPC_STUB IVsGlobalsCallback_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsGlobalsCallback_INTERFACE_DEFINED__ */


#ifndef __IVsGlobals_INTERFACE_DEFINED__
#define __IVsGlobals_INTERFACE_DEFINED__

/* interface IVsGlobals */
/* [object][restricted][hidden][uuid] */ 


EXTERN_C const IID IID_IVsGlobals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("192ac688-e7c6-4f9d-8180-4b37efbf6f3a")
    IVsGlobals : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Load( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Empty( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsGlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsGlobals * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsGlobals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Load )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Save )( 
            IVsGlobals * This);
        
        HRESULT ( STDMETHODCALLTYPE *Empty )( 
            IVsGlobals * This);
        
        END_INTERFACE
    } IVsGlobalsVtbl;

    interface IVsGlobals
    {
        CONST_VTBL struct IVsGlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsGlobals_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsGlobals_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsGlobals_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsGlobals_Load(This)	\
    (This)->lpVtbl -> Load(This)

#define IVsGlobals_Save(This)	\
    (This)->lpVtbl -> Save(This)

#define IVsGlobals_Empty(This)	\
    (This)->lpVtbl -> Empty(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsGlobals_Load_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobals_Save_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsGlobals_Empty_Proxy( 
    IVsGlobals * This);


void __RPC_STUB IVsGlobals_Empty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsGlobals_INTERFACE_DEFINED__ */


#ifndef __IDTCommandTarget_INTERFACE_DEFINED__
#define __IDTCommandTarget_INTERFACE_DEFINED__

/* interface IDTCommandTarget */
/* [helpstringcontext][helpstring][helpcontext][uuid][local][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTCommandTarget;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7ef39a3e-590d-4879-88d4-c9be5bcfd92e")
    IDTCommandTarget : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE QueryStatus( 
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandStatusTextWanted NeededText,
            /* [out][in] */ vsCommandStatus *StatusOption,
            /* [out][in] */ VARIANT *CommandText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Exec( 
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandExecOption ExecuteOption,
            /* [in] */ VARIANT *VariantIn,
            /* [out][in] */ VARIANT *VariantOut,
            /* [out][in] */ VARIANT_BOOL *Handled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTCommandTargetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTCommandTarget * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTCommandTarget * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTCommandTarget * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTCommandTarget * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTCommandTarget * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTCommandTarget * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTCommandTarget * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *QueryStatus )( 
            IDTCommandTarget * This,
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandStatusTextWanted NeededText,
            /* [out][in] */ vsCommandStatus *StatusOption,
            /* [out][in] */ VARIANT *CommandText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Exec )( 
            IDTCommandTarget * This,
            /* [in] */ BSTR CmdName,
            /* [in] */ vsCommandExecOption ExecuteOption,
            /* [in] */ VARIANT *VariantIn,
            /* [out][in] */ VARIANT *VariantOut,
            /* [out][in] */ VARIANT_BOOL *Handled);
        
        END_INTERFACE
    } IDTCommandTargetVtbl;

    interface IDTCommandTarget
    {
        CONST_VTBL struct IDTCommandTargetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTCommandTarget_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTCommandTarget_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTCommandTarget_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTCommandTarget_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTCommandTarget_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTCommandTarget_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTCommandTarget_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTCommandTarget_QueryStatus(This,CmdName,NeededText,StatusOption,CommandText)	\
    (This)->lpVtbl -> QueryStatus(This,CmdName,NeededText,StatusOption,CommandText)

#define IDTCommandTarget_Exec(This,CmdName,ExecuteOption,VariantIn,VariantOut,Handled)	\
    (This)->lpVtbl -> Exec(This,CmdName,ExecuteOption,VariantIn,VariantOut,Handled)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTCommandTarget_QueryStatus_Proxy( 
    IDTCommandTarget * This,
    /* [in] */ BSTR CmdName,
    /* [in] */ vsCommandStatusTextWanted NeededText,
    /* [out][in] */ vsCommandStatus *StatusOption,
    /* [out][in] */ VARIANT *CommandText);


void __RPC_STUB IDTCommandTarget_QueryStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTCommandTarget_Exec_Proxy( 
    IDTCommandTarget * This,
    /* [in] */ BSTR CmdName,
    /* [in] */ vsCommandExecOption ExecuteOption,
    /* [in] */ VARIANT *VariantIn,
    /* [out][in] */ VARIANT *VariantOut,
    /* [out][in] */ VARIANT_BOOL *Handled);


void __RPC_STUB IDTCommandTarget_Exec_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTCommandTarget_INTERFACE_DEFINED__ */


#ifndef __CommandWindow_INTERFACE_DEFINED__
#define __CommandWindow_INTERFACE_DEFINED__

/* interface CommandWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CommandWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("509b9955-7303-48c9-90d4-e165b974e6ba")
    CommandWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendInput( 
            BSTR Command,
            VARIANT_BOOL Execute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputString( 
            BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDocument( 
            /* [retval][out] */ TextDocument **ppTextDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CommandWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CommandWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CommandWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CommandWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CommandWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CommandWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CommandWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CommandWindow * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CommandWindow * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendInput )( 
            CommandWindow * This,
            BSTR Command,
            VARIANT_BOOL Execute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputString )( 
            CommandWindow * This,
            BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            CommandWindow * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDocument )( 
            CommandWindow * This,
            /* [retval][out] */ TextDocument **ppTextDocument);
        
        END_INTERFACE
    } CommandWindowVtbl;

    interface CommandWindow
    {
        CONST_VTBL struct CommandWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CommandWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CommandWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CommandWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CommandWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CommandWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CommandWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CommandWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CommandWindow_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CommandWindow_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define CommandWindow_SendInput(This,Command,Execute)	\
    (This)->lpVtbl -> SendInput(This,Command,Execute)

#define CommandWindow_OutputString(This,Text)	\
    (This)->lpVtbl -> OutputString(This,Text)

#define CommandWindow_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define CommandWindow_get_TextDocument(This,ppTextDocument)	\
    (This)->lpVtbl -> get_TextDocument(This,ppTextDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_DTE_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CommandWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_Parent_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB CommandWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_SendInput_Proxy( 
    CommandWindow * This,
    BSTR Command,
    VARIANT_BOOL Execute);


void __RPC_STUB CommandWindow_SendInput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_OutputString_Proxy( 
    CommandWindow * This,
    BSTR Text);


void __RPC_STUB CommandWindow_OutputString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_Clear_Proxy( 
    CommandWindow * This);


void __RPC_STUB CommandWindow_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CommandWindow_get_TextDocument_Proxy( 
    CommandWindow * This,
    /* [retval][out] */ TextDocument **ppTextDocument);


void __RPC_STUB CommandWindow_get_TextDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CommandWindow_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DTE;

#ifdef __cplusplus

class DECLSPEC_UUID("3c9cfe1e-389f-4118-9fad-365385190329")
DTE;
#endif

EXTERN_C const CLSID CLSID_Solution;

#ifdef __cplusplus

class DECLSPEC_UUID("b35caa8c-77de-4ab3-8e5a-f038e3fc6056")
Solution;
#endif

EXTERN_C const CLSID CLSID_DTEEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("c6304bab-6765-4c63-9017-4940aeb6f207")
DTEEvents;
#endif

#ifndef ___DTEEvents_INTERFACE_DEFINED__
#define ___DTEEvents_INTERFACE_DEFINED__

/* interface _DTEEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__DTEEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE")
    _DTEEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DTEEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DTEEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DTEEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DTEEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DTEEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DTEEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DTEEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DTEEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DTEEventsVtbl;

    interface _DTEEvents
    {
        CONST_VTBL struct _DTEEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DTEEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DTEEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DTEEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DTEEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DTEEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DTEEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DTEEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DTEEvents_INTERFACE_DEFINED__ */


#ifndef ___ProjectItemsEvents_INTERFACE_DEFINED__
#define ___ProjectItemsEvents_INTERFACE_DEFINED__

/* interface _ProjectItemsEvents */
/* [helpstringcontext][helpstring][helpcontext][object][dual][uuid] */ 


EXTERN_C const IID IID__ProjectItemsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("22800963-2811-410d-bf87-a7808eac977d")
    _ProjectItemsEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _ProjectItemsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ProjectItemsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ProjectItemsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ProjectItemsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ProjectItemsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ProjectItemsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _ProjectItemsEventsVtbl;

    interface _ProjectItemsEvents
    {
        CONST_VTBL struct _ProjectItemsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ProjectItemsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _ProjectItemsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _ProjectItemsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _ProjectItemsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _ProjectItemsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _ProjectItemsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _ProjectItemsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ProjectItemsEvents_INTERFACE_DEFINED__ */


#ifndef ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__
#define ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispProjectItemsEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispProjectItemsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("6962753f-efd5-41c5-b083-d70687166aeb")
    _dispProjectItemsEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispProjectItemsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispProjectItemsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispProjectItemsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispProjectItemsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispProjectItemsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispProjectItemsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispProjectItemsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispProjectItemsEventsVtbl;

    interface _dispProjectItemsEvents
    {
        CONST_VTBL struct _dispProjectItemsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispProjectItemsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispProjectItemsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispProjectItemsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispProjectItemsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispProjectItemsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispProjectItemsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispProjectItemsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispProjectItemsEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ProjectItemsEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("de6c1098-93ca-4f49-bef0-262a13ca1176")
ProjectItemsEvents;
#endif

#ifndef ___ProjectsEvents_INTERFACE_DEFINED__
#define ___ProjectsEvents_INTERFACE_DEFINED__

/* interface _ProjectsEvents */
/* [helpstringcontext][helpstring][helpcontext][object][dual][uuid] */ 


EXTERN_C const IID IID__ProjectsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85451f83-b5ca-437f-a619-0cb705707420")
    _ProjectsEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _ProjectsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ProjectsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ProjectsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ProjectsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ProjectsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ProjectsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _ProjectsEventsVtbl;

    interface _ProjectsEvents
    {
        CONST_VTBL struct _ProjectsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ProjectsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _ProjectsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _ProjectsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _ProjectsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _ProjectsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _ProjectsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _ProjectsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ProjectsEvents_INTERFACE_DEFINED__ */


#ifndef ___dispProjectsEvents_DISPINTERFACE_DEFINED__
#define ___dispProjectsEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispProjectsEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispProjectsEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("7f508d55-627f-4d7f-be0b-9e3d829ff0ed")
    _dispProjectsEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispProjectsEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispProjectsEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispProjectsEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispProjectsEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispProjectsEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispProjectsEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispProjectsEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispProjectsEventsVtbl;

    interface _dispProjectsEvents
    {
        CONST_VTBL struct _dispProjectsEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispProjectsEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispProjectsEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispProjectsEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispProjectsEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispProjectsEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispProjectsEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispProjectsEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispProjectsEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ProjectsEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("536a4be3-a376-408e-954c-471c779e216f")
ProjectsEvents;
#endif

#ifndef ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__
#define ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__

/* interface _MiscSlnFilesEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__MiscSlnFilesEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7658B944-F37B-11D2-AACF-00C04F688DDE")
    _MiscSlnFilesEventsRoot : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionItemsEvents( 
            /* [retval][out] */ IDispatch **ppeNew) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesEvents( 
            /* [retval][out] */ IDispatch **ppeNew) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _MiscSlnFilesEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _MiscSlnFilesEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _MiscSlnFilesEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _MiscSlnFilesEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _MiscSlnFilesEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionItemsEvents )( 
            _MiscSlnFilesEventsRoot * This,
            /* [retval][out] */ IDispatch **ppeNew);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesEvents )( 
            _MiscSlnFilesEventsRoot * This,
            /* [retval][out] */ IDispatch **ppeNew);
        
        END_INTERFACE
    } _MiscSlnFilesEventsRootVtbl;

    interface _MiscSlnFilesEventsRoot
    {
        CONST_VTBL struct _MiscSlnFilesEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _MiscSlnFilesEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _MiscSlnFilesEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _MiscSlnFilesEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _MiscSlnFilesEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _MiscSlnFilesEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _MiscSlnFilesEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _MiscSlnFilesEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _MiscSlnFilesEventsRoot_get_SolutionItemsEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_SolutionItemsEvents(This,ppeNew)

#define _MiscSlnFilesEventsRoot_get_MiscFilesEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_MiscFilesEvents(This,ppeNew)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT STDMETHODCALLTYPE _MiscSlnFilesEventsRoot_get_SolutionItemsEvents_Proxy( 
    _MiscSlnFilesEventsRoot * This,
    /* [retval][out] */ IDispatch **ppeNew);


void __RPC_STUB _MiscSlnFilesEventsRoot_get_SolutionItemsEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _MiscSlnFilesEventsRoot_get_MiscFilesEvents_Proxy( 
    _MiscSlnFilesEventsRoot * This,
    /* [retval][out] */ IDispatch **ppeNew);


void __RPC_STUB _MiscSlnFilesEventsRoot_get_MiscFilesEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___MiscSlnFilesEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___CommandBarControlEvents_INTERFACE_DEFINED__
#define ___CommandBarControlEvents_INTERFACE_DEFINED__

/* interface _CommandBarControlEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__CommandBarControlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9E66FE98-A1C6-421d-8C0C-6DA4E652E770")
    _CommandBarControlEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _CommandBarControlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _CommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _CommandBarControlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _CommandBarControlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _CommandBarControlEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _CommandBarControlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _CommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _CommandBarControlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _CommandBarControlEventsVtbl;

    interface _CommandBarControlEvents
    {
        CONST_VTBL struct _CommandBarControlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _CommandBarControlEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _CommandBarControlEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _CommandBarControlEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _CommandBarControlEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _CommandBarControlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _CommandBarControlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _CommandBarControlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___CommandBarControlEvents_INTERFACE_DEFINED__ */


#ifndef ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__
#define ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispCommandBarControlEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispCommandBarControlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("987FB893-F96D-11D0-BBBB-00A0C90F2744")
    _dispCommandBarControlEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispCommandBarControlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispCommandBarControlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispCommandBarControlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispCommandBarControlEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispCommandBarControlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispCommandBarControlEventsVtbl;

    interface _dispCommandBarControlEvents
    {
        CONST_VTBL struct _dispCommandBarControlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispCommandBarControlEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispCommandBarControlEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispCommandBarControlEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispCommandBarControlEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispCommandBarControlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispCommandBarControlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispCommandBarControlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispCommandBarControlEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CommandBarEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("bfd4b2b2-9eec-4db8-aba0-ac316f4c7328")
CommandBarEvents;
#endif

#ifndef ___CommandEvents_INTERFACE_DEFINED__
#define ___CommandEvents_INTERFACE_DEFINED__

/* interface _CommandEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__CommandEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A79FC678-0D0A-496a-B9DC-0D5B9E1CA9FC")
    _CommandEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _CommandEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _CommandEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _CommandEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _CommandEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _CommandEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _CommandEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _CommandEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _CommandEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _CommandEventsVtbl;

    interface _CommandEvents
    {
        CONST_VTBL struct _CommandEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _CommandEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _CommandEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _CommandEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _CommandEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _CommandEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _CommandEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _CommandEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___CommandEvents_INTERFACE_DEFINED__ */


#ifndef ___dispCommandEvents_DISPINTERFACE_DEFINED__
#define ___dispCommandEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispCommandEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispCommandEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FF2D5C12-FEEA-11D0-BBC8-00A0C90F2744")
    _dispCommandEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispCommandEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispCommandEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispCommandEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispCommandEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispCommandEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispCommandEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispCommandEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispCommandEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispCommandEventsVtbl;

    interface _dispCommandEvents
    {
        CONST_VTBL struct _dispCommandEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispCommandEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispCommandEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispCommandEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispCommandEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispCommandEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispCommandEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispCommandEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispCommandEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_CommandEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("1ded92b5-9a46-4b29-93ef-b5e07016659e")
CommandEvents;
#endif

#ifndef ___SelectionEvents_INTERFACE_DEFINED__
#define ___SelectionEvents_INTERFACE_DEFINED__

/* interface _SelectionEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__SelectionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB6783DB-1819-496d-84A4-3CFF883010F6")
    _SelectionEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _SelectionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _SelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _SelectionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _SelectionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _SelectionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _SelectionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _SelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _SelectionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _SelectionEventsVtbl;

    interface _SelectionEvents
    {
        CONST_VTBL struct _SelectionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SelectionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _SelectionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _SelectionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _SelectionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _SelectionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _SelectionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _SelectionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SelectionEvents_INTERFACE_DEFINED__ */


#ifndef ___dispSelectionEvents_DISPINTERFACE_DEFINED__
#define ___dispSelectionEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispSelectionEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispSelectionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DEEB28B3-23E6-11D1-AE5C-00A0C90F26F4")
    _dispSelectionEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispSelectionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispSelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispSelectionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispSelectionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispSelectionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispSelectionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispSelectionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispSelectionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispSelectionEventsVtbl;

    interface _dispSelectionEvents
    {
        CONST_VTBL struct _dispSelectionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispSelectionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispSelectionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispSelectionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispSelectionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispSelectionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispSelectionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispSelectionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispSelectionEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SelectionEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("af37511e-9e9d-4234-a5a1-7584d290e061")
SelectionEvents;
#endif

#ifndef ___BuildEvents_INTERFACE_DEFINED__
#define ___BuildEvents_INTERFACE_DEFINED__

/* interface _BuildEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__BuildEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("794a2ba5-ffa6-4fc5-bf13-957b2c22edd7")
    _BuildEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _BuildEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _BuildEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _BuildEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _BuildEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _BuildEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _BuildEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _BuildEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _BuildEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _BuildEventsVtbl;

    interface _BuildEvents
    {
        CONST_VTBL struct _BuildEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _BuildEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _BuildEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _BuildEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _BuildEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _BuildEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _BuildEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _BuildEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___BuildEvents_INTERFACE_DEFINED__ */


#ifndef ___dispBuildEvents_DISPINTERFACE_DEFINED__
#define ___dispBuildEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispBuildEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispBuildEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1926364e-6b90-46cb-a44d-8a80fb11acd9")
    _dispBuildEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispBuildEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispBuildEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispBuildEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispBuildEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispBuildEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispBuildEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispBuildEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispBuildEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispBuildEventsVtbl;

    interface _dispBuildEvents
    {
        CONST_VTBL struct _dispBuildEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispBuildEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispBuildEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispBuildEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispBuildEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispBuildEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispBuildEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispBuildEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispBuildEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_BuildEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("d83d60e3-229f-4660-8dd0-28b629eedcda")
BuildEvents;
#endif

#ifndef ___SolutionEvents_INTERFACE_DEFINED__
#define ___SolutionEvents_INTERFACE_DEFINED__

/* interface _SolutionEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__SolutionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF8BBF37-5415-46a9-940D-594CAD9DEC26")
    _SolutionEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _SolutionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _SolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _SolutionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _SolutionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _SolutionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _SolutionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _SolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _SolutionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _SolutionEventsVtbl;

    interface _SolutionEvents
    {
        CONST_VTBL struct _SolutionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _SolutionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _SolutionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _SolutionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _SolutionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _SolutionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _SolutionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _SolutionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___SolutionEvents_INTERFACE_DEFINED__ */


#ifndef ___dispSolutionEvents_DISPINTERFACE_DEFINED__
#define ___dispSolutionEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispSolutionEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispSolutionEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("FBCFF1C2-261C-11D1-AE5E-00A0C90F26F4")
    _dispSolutionEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispSolutionEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispSolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispSolutionEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispSolutionEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispSolutionEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispSolutionEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispSolutionEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispSolutionEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispSolutionEventsVtbl;

    interface _dispSolutionEvents
    {
        CONST_VTBL struct _dispSolutionEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispSolutionEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispSolutionEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispSolutionEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispSolutionEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispSolutionEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispSolutionEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispSolutionEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispSolutionEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_SolutionEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("88ac98c7-b38c-404b-bd86-d2a4f2e89dca")
SolutionEvents;
#endif

#ifndef __ContextAttribute_INTERFACE_DEFINED__
#define __ContextAttribute_INTERFACE_DEFINED__

/* interface ContextAttribute */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ContextAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1a6e2cb3-b897-42eb-96be-ff0fdb65db2f")
    ContextAttribute : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ContextAttributes **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Values( 
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ContextAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ContextAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ContextAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ContextAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ContextAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ContextAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ContextAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ContextAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ContextAttribute * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ContextAttribute * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ContextAttribute * This,
            /* [retval][out] */ ContextAttributes **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Values )( 
            ContextAttribute * This,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ContextAttribute * This);
        
        END_INTERFACE
    } ContextAttributeVtbl;

    interface ContextAttribute
    {
        CONST_VTBL struct ContextAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ContextAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ContextAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ContextAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ContextAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ContextAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ContextAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ContextAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ContextAttribute_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ContextAttribute_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ContextAttribute_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define ContextAttribute_get_Values(This,pVal)	\
    (This)->lpVtbl -> get_Values(This,pVal)

#define ContextAttribute_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Name_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ContextAttribute_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_DTE_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ContextAttribute_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Collection_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ ContextAttributes **ppCollection);


void __RPC_STUB ContextAttribute_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_get_Values_Proxy( 
    ContextAttribute * This,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB ContextAttribute_get_Values_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttribute_Remove_Proxy( 
    ContextAttribute * This);


void __RPC_STUB ContextAttribute_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ContextAttribute_INTERFACE_DEFINED__ */


#ifndef ___DocumentEventsRoot_INTERFACE_DEFINED__
#define ___DocumentEventsRoot_INTERFACE_DEFINED__

/* interface _DocumentEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__DocumentEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC5437F4-F114-11D2-AACF-00C04F688DDE")
    _DocumentEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_DocumentEvents( 
            /* [in] */ Document *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DocumentEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DocumentEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DocumentEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DocumentEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DocumentEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DocumentEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DocumentEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DocumentEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_DocumentEvents )( 
            _DocumentEventsRoot * This,
            /* [in] */ Document *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _DocumentEventsRootVtbl;

    interface _DocumentEventsRoot
    {
        CONST_VTBL struct _DocumentEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DocumentEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DocumentEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DocumentEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DocumentEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DocumentEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DocumentEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DocumentEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DocumentEventsRoot_get_DocumentEvents(This,WindowFilter,ppdisp)	\
    (This)->lpVtbl -> get_DocumentEvents(This,WindowFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _DocumentEventsRoot_get_DocumentEvents_Proxy( 
    _DocumentEventsRoot * This,
    /* [in] */ Document *WindowFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _DocumentEventsRoot_get_DocumentEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DocumentEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___DocumentEvents_INTERFACE_DEFINED__
#define ___DocumentEvents_INTERFACE_DEFINED__

/* interface _DocumentEvents */
/* [object][oleautomation][uuid] */ 


EXTERN_C const IID IID__DocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DC5437F5-F114-11D2-AACF-00C04F688DDE")
    _DocumentEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _DocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DocumentEventsVtbl;

    interface _DocumentEvents
    {
        CONST_VTBL struct _DocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___DocumentEvents_INTERFACE_DEFINED__ */


#ifndef ___dispDocumentEvents_DISPINTERFACE_DEFINED__
#define ___dispDocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDocumentEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispDocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("DC5437F6-F114-11D2-AACF-00C04F688DDE")
    _dispDocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDocumentEventsVtbl;

    interface _dispDocumentEvents
    {
        CONST_VTBL struct _dispDocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDocumentEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDocumentEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDocumentEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDocumentEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DocumentEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("DC5437F7-F114-11D2-AACF-00C04F688DDE")
DocumentEvents;
#endif

#ifndef ___TextEditorEventsRoot_INTERFACE_DEFINED__
#define ___TextEditorEventsRoot_INTERFACE_DEFINED__

/* interface _TextEditorEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__TextEditorEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B3C38885-B288-44a8-B290-34FE63BF3C76")
    _TextEditorEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_TextEditorEvents( 
            /* [in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _TextEditorEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TextEditorEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TextEditorEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TextEditorEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TextEditorEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TextEditorEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TextEditorEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TextEditorEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_TextEditorEvents )( 
            _TextEditorEventsRoot * This,
            /* [in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _TextEditorEventsRootVtbl;

    interface _TextEditorEventsRoot
    {
        CONST_VTBL struct _TextEditorEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TextEditorEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TextEditorEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TextEditorEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TextEditorEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TextEditorEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TextEditorEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TextEditorEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _TextEditorEventsRoot_get_TextEditorEvents(This,TextDocumentFilter,ppdisp)	\
    (This)->lpVtbl -> get_TextEditorEvents(This,TextDocumentFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _TextEditorEventsRoot_get_TextEditorEvents_Proxy( 
    _TextEditorEventsRoot * This,
    /* [in] */ TextDocument *TextDocumentFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _TextEditorEventsRoot_get_TextEditorEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___TextEditorEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___TextEditorEvents_INTERFACE_DEFINED__
#define ___TextEditorEvents_INTERFACE_DEFINED__

/* interface _TextEditorEvents */
/* [object][oleautomation][uuid] */ 


EXTERN_C const IID IID__TextEditorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23B7A868-6C89-436a-94FA-25D755456A77")
    _TextEditorEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _TextEditorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TextEditorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TextEditorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TextEditorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TextEditorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TextEditorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _TextEditorEventsVtbl;

    interface _TextEditorEvents
    {
        CONST_VTBL struct _TextEditorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TextEditorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TextEditorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TextEditorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TextEditorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TextEditorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TextEditorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TextEditorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___TextEditorEvents_INTERFACE_DEFINED__ */


#ifndef ___dispTextEditorEvents_DISPINTERFACE_DEFINED__
#define ___dispTextEditorEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispTextEditorEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispTextEditorEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("2699DD44-C507-4da3-AA34-314A6C21DFE2")
    _dispTextEditorEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispTextEditorEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispTextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispTextEditorEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispTextEditorEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispTextEditorEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispTextEditorEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispTextEditorEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispTextEditorEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispTextEditorEventsVtbl;

    interface _dispTextEditorEvents
    {
        CONST_VTBL struct _dispTextEditorEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispTextEditorEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispTextEditorEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispTextEditorEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispTextEditorEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispTextEditorEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispTextEditorEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispTextEditorEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispTextEditorEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TextEditorEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("ADF22C37-0069-4adf-B12D-D8D47C38FE79")
TextEditorEvents;
#endif

#ifndef ___WindowEventsRoot_INTERFACE_DEFINED__
#define ___WindowEventsRoot_INTERFACE_DEFINED__

/* interface _WindowEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__WindowEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17d12026-ba99-403e-a359-71fd1e5a72cd")
    _WindowEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_WindowEvents( 
            /* [in] */ Window *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _WindowEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _WindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _WindowEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _WindowEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _WindowEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _WindowEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _WindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _WindowEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_WindowEvents )( 
            _WindowEventsRoot * This,
            /* [in] */ Window *WindowFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _WindowEventsRootVtbl;

    interface _WindowEventsRoot
    {
        CONST_VTBL struct _WindowEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WindowEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _WindowEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _WindowEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _WindowEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _WindowEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _WindowEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _WindowEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _WindowEventsRoot_get_WindowEvents(This,WindowFilter,ppdisp)	\
    (This)->lpVtbl -> get_WindowEvents(This,WindowFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _WindowEventsRoot_get_WindowEvents_Proxy( 
    _WindowEventsRoot * This,
    /* [in] */ Window *WindowFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _WindowEventsRoot_get_WindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___WindowEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___WindowEvents_INTERFACE_DEFINED__
#define ___WindowEvents_INTERFACE_DEFINED__

/* interface _WindowEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__WindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF")
    _WindowEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _WindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _WindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _WindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _WindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _WindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _WindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _WindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _WindowEventsVtbl;

    interface _WindowEvents
    {
        CONST_VTBL struct _WindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _WindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _WindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _WindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _WindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _WindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _WindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _WindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___WindowEvents_INTERFACE_DEFINED__ */


#ifndef ___dispWindowEvents_DISPINTERFACE_DEFINED__
#define ___dispWindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispWindowEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0D3A23A9-67BB-11D2-97C1-00C04FB6C6FF")
    _dispWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispWindowEventsVtbl;

    interface _dispWindowEvents
    {
        CONST_VTBL struct _dispWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispWindowEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_WindowEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("2e260fd4-c130-4e6d-8ebc-4a3bfd188181")
WindowEvents;
#endif

#ifndef ___OutputWindowEventsRoot_INTERFACE_DEFINED__
#define ___OutputWindowEventsRoot_INTERFACE_DEFINED__

/* interface _OutputWindowEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__OutputWindowEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa6f4085-33b6-4629-b9ea-692101007cc2")
    _OutputWindowEventsRoot : public IDispatch
    {
    public:
        virtual /* [hidden][propget][id] */ HRESULT __stdcall get_OutputWindowEvents( 
            /* [in] */ BSTR PaneFilter,
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _OutputWindowEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _OutputWindowEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _OutputWindowEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _OutputWindowEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][propget][id] */ HRESULT ( __stdcall *get_OutputWindowEvents )( 
            _OutputWindowEventsRoot * This,
            /* [in] */ BSTR PaneFilter,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _OutputWindowEventsRootVtbl;

    interface _OutputWindowEventsRoot
    {
        CONST_VTBL struct _OutputWindowEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _OutputWindowEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _OutputWindowEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _OutputWindowEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _OutputWindowEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _OutputWindowEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _OutputWindowEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _OutputWindowEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _OutputWindowEventsRoot_get_OutputWindowEvents(This,PaneFilter,ppdisp)	\
    (This)->lpVtbl -> get_OutputWindowEvents(This,PaneFilter,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][propget][id] */ HRESULT __stdcall _OutputWindowEventsRoot_get_OutputWindowEvents_Proxy( 
    _OutputWindowEventsRoot * This,
    /* [in] */ BSTR PaneFilter,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _OutputWindowEventsRoot_get_OutputWindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___OutputWindowEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___OutputWindowEvents_INTERFACE_DEFINED__
#define ___OutputWindowEvents_INTERFACE_DEFINED__

/* interface _OutputWindowEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__OutputWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A3546A8-6840-11D2-97C1-00C04FB6C6FF")
    _OutputWindowEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _OutputWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _OutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _OutputWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _OutputWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _OutputWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _OutputWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _OutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _OutputWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _OutputWindowEventsVtbl;

    interface _OutputWindowEvents
    {
        CONST_VTBL struct _OutputWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _OutputWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _OutputWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _OutputWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _OutputWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _OutputWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _OutputWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _OutputWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___OutputWindowEvents_INTERFACE_DEFINED__ */


#ifndef ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__
#define ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispOutputWindowEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispOutputWindowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0D3A23AF-67BB-11D2-97C1-00C04FB6C6FF")
    _dispOutputWindowEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispOutputWindowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispOutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispOutputWindowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispOutputWindowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispOutputWindowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispOutputWindowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispOutputWindowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispOutputWindowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispOutputWindowEventsVtbl;

    interface _dispOutputWindowEvents
    {
        CONST_VTBL struct _dispOutputWindowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispOutputWindowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispOutputWindowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispOutputWindowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispOutputWindowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispOutputWindowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispOutputWindowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispOutputWindowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispOutputWindowEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_OutputWindowEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("3760037f-b012-44f8-9c23-3609d7a16def")
OutputWindowEvents;
#endif

#ifndef ___TaskListEventsRoot_INTERFACE_DEFINED__
#define ___TaskListEventsRoot_INTERFACE_DEFINED__

/* interface _TaskListEventsRoot */
/* [hidden][object][dual][uuid] */ 


EXTERN_C const IID IID__TaskListEventsRoot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6bc8c372-c6f0-4be6-b255-827ac190bf71")
    _TaskListEventsRoot : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT __stdcall get_TaskListEvents( 
            /* [retval][out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _TaskListEventsRootVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TaskListEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TaskListEventsRoot * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TaskListEventsRoot * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TaskListEventsRoot * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TaskListEventsRoot * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TaskListEventsRoot * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TaskListEventsRoot * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( __stdcall *get_TaskListEvents )( 
            _TaskListEventsRoot * This,
            /* [retval][out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } _TaskListEventsRootVtbl;

    interface _TaskListEventsRoot
    {
        CONST_VTBL struct _TaskListEventsRootVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TaskListEventsRoot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TaskListEventsRoot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TaskListEventsRoot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TaskListEventsRoot_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TaskListEventsRoot_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TaskListEventsRoot_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TaskListEventsRoot_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _TaskListEventsRoot_get_TaskListEvents(This,ppdisp)	\
    (This)->lpVtbl -> get_TaskListEvents(This,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT __stdcall _TaskListEventsRoot_get_TaskListEvents_Proxy( 
    _TaskListEventsRoot * This,
    /* [retval][out] */ IDispatch **ppdisp);


void __RPC_STUB _TaskListEventsRoot_get_TaskListEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___TaskListEventsRoot_INTERFACE_DEFINED__ */


#ifndef ___TaskListEvents_INTERFACE_DEFINED__
#define ___TaskListEvents_INTERFACE_DEFINED__

/* interface _TaskListEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__TaskListEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1125C422-49BD-11D2-8823-00C04FB6C6FF")
    _TaskListEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _TaskListEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _TaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _TaskListEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _TaskListEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _TaskListEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _TaskListEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _TaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _TaskListEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _TaskListEventsVtbl;

    interface _TaskListEvents
    {
        CONST_VTBL struct _TaskListEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _TaskListEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _TaskListEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _TaskListEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _TaskListEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _TaskListEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _TaskListEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _TaskListEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___TaskListEvents_INTERFACE_DEFINED__ */


#ifndef ___dispTaskListEvents_DISPINTERFACE_DEFINED__
#define ___dispTaskListEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispTaskListEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispTaskListEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("1125C423-49BD-11D2-8823-00C04FB6C6FF")
    _dispTaskListEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispTaskListEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispTaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispTaskListEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispTaskListEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispTaskListEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispTaskListEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispTaskListEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispTaskListEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispTaskListEventsVtbl;

    interface _dispTaskListEvents
    {
        CONST_VTBL struct _dispTaskListEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispTaskListEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispTaskListEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispTaskListEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispTaskListEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispTaskListEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispTaskListEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispTaskListEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispTaskListEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_TaskListEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("29617acd-7859-4328-be09-298f91f48196")
TaskListEvents;
#endif

#ifndef __IDTToolsOptionsPage_INTERFACE_DEFINED__
#define __IDTToolsOptionsPage_INTERFACE_DEFINED__

/* interface IDTToolsOptionsPage */
/* [helpstringcontext][helpstring][helpcontext][local][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IDTToolsOptionsPage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bdcaf240-2692-4713-902a-b110b1d0f100")
    IDTToolsOptionsPage : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnAfterCreated( 
            /* [in] */ DTE	*DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetProperties( 
            /* [out][in] */ IDispatch **PropertiesObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnOK( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnCancel( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnHelp( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDTToolsOptionsPageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDTToolsOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDTToolsOptionsPage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDTToolsOptionsPage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDTToolsOptionsPage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDTToolsOptionsPage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDTToolsOptionsPage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDTToolsOptionsPage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnAfterCreated )( 
            IDTToolsOptionsPage * This,
            /* [in] */ DTE	*DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
            IDTToolsOptionsPage * This,
            /* [out][in] */ IDispatch **PropertiesObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnOK )( 
            IDTToolsOptionsPage * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnCancel )( 
            IDTToolsOptionsPage * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnHelp )( 
            IDTToolsOptionsPage * This);
        
        END_INTERFACE
    } IDTToolsOptionsPageVtbl;

    interface IDTToolsOptionsPage
    {
        CONST_VTBL struct IDTToolsOptionsPageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDTToolsOptionsPage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDTToolsOptionsPage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDTToolsOptionsPage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDTToolsOptionsPage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDTToolsOptionsPage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDTToolsOptionsPage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDTToolsOptionsPage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDTToolsOptionsPage_OnAfterCreated(This,DTEObject)	\
    (This)->lpVtbl -> OnAfterCreated(This,DTEObject)

#define IDTToolsOptionsPage_GetProperties(This,PropertiesObject)	\
    (This)->lpVtbl -> GetProperties(This,PropertiesObject)

#define IDTToolsOptionsPage_OnOK(This)	\
    (This)->lpVtbl -> OnOK(This)

#define IDTToolsOptionsPage_OnCancel(This)	\
    (This)->lpVtbl -> OnCancel(This)

#define IDTToolsOptionsPage_OnHelp(This)	\
    (This)->lpVtbl -> OnHelp(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnAfterCreated_Proxy( 
    IDTToolsOptionsPage * This,
    /* [in] */ DTE	*DTEObject);


void __RPC_STUB IDTToolsOptionsPage_OnAfterCreated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_GetProperties_Proxy( 
    IDTToolsOptionsPage * This,
    /* [out][in] */ IDispatch **PropertiesObject);


void __RPC_STUB IDTToolsOptionsPage_GetProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnOK_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnOK_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnCancel_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IDTToolsOptionsPage_OnHelp_Proxy( 
    IDTToolsOptionsPage * This);


void __RPC_STUB IDTToolsOptionsPage_OnHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDTToolsOptionsPage_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentWebBrowser_INTERFACE_DEFINED__
#define ___EnvironmentWebBrowser_INTERFACE_DEFINED__

/* interface _EnvironmentWebBrowser */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentWebBrowser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3286b03-5ac6-44f0-8cc3-ebed7f1124e5")
    _EnvironmentWebBrowser : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseDefaultHomePage( 
            VARIANT_BOOL UseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseDefaultHomePage( 
            /* [retval][out] */ VARIANT_BOOL *pUseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HomePage( 
            BSTR URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HomePage( 
            /* [retval][out] */ BSTR *URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseDefaultSearchPage( 
            VARIANT_BOOL UseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseDefaultSearchPage( 
            /* [retval][out] */ VARIANT_BOOL *pUseDefault) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchPage( 
            BSTR URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchPage( 
            /* [retval][out] */ BSTR *URL) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewSourceIn( 
            vsBrowserViewSource Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewSourceIn( 
            /* [retval][out] */ vsBrowserViewSource *Location) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewSourceExternalProgram( 
            BSTR Path) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewSourceExternalProgram( 
            /* [retval][out] */ BSTR *Path) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentWebBrowserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentWebBrowser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentWebBrowser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentWebBrowser * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentWebBrowser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseDefaultHomePage )( 
            _EnvironmentWebBrowser * This,
            VARIANT_BOOL UseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseDefaultHomePage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ VARIANT_BOOL *pUseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HomePage )( 
            _EnvironmentWebBrowser * This,
            BSTR URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HomePage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseDefaultSearchPage )( 
            _EnvironmentWebBrowser * This,
            VARIANT_BOOL UseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseDefaultSearchPage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ VARIANT_BOOL *pUseDefault);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchPage )( 
            _EnvironmentWebBrowser * This,
            BSTR URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchPage )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *URL);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewSourceIn )( 
            _EnvironmentWebBrowser * This,
            vsBrowserViewSource Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewSourceIn )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ vsBrowserViewSource *Location);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewSourceExternalProgram )( 
            _EnvironmentWebBrowser * This,
            BSTR Path);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewSourceExternalProgram )( 
            _EnvironmentWebBrowser * This,
            /* [retval][out] */ BSTR *Path);
        
        END_INTERFACE
    } _EnvironmentWebBrowserVtbl;

    interface _EnvironmentWebBrowser
    {
        CONST_VTBL struct _EnvironmentWebBrowserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentWebBrowser_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentWebBrowser_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentWebBrowser_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentWebBrowser_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentWebBrowser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentWebBrowser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentWebBrowser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentWebBrowser_put_UseDefaultHomePage(This,UseDefault)	\
    (This)->lpVtbl -> put_UseDefaultHomePage(This,UseDefault)

#define _EnvironmentWebBrowser_get_UseDefaultHomePage(This,pUseDefault)	\
    (This)->lpVtbl -> get_UseDefaultHomePage(This,pUseDefault)

#define _EnvironmentWebBrowser_put_HomePage(This,URL)	\
    (This)->lpVtbl -> put_HomePage(This,URL)

#define _EnvironmentWebBrowser_get_HomePage(This,URL)	\
    (This)->lpVtbl -> get_HomePage(This,URL)

#define _EnvironmentWebBrowser_put_UseDefaultSearchPage(This,UseDefault)	\
    (This)->lpVtbl -> put_UseDefaultSearchPage(This,UseDefault)

#define _EnvironmentWebBrowser_get_UseDefaultSearchPage(This,pUseDefault)	\
    (This)->lpVtbl -> get_UseDefaultSearchPage(This,pUseDefault)

#define _EnvironmentWebBrowser_put_SearchPage(This,URL)	\
    (This)->lpVtbl -> put_SearchPage(This,URL)

#define _EnvironmentWebBrowser_get_SearchPage(This,URL)	\
    (This)->lpVtbl -> get_SearchPage(This,URL)

#define _EnvironmentWebBrowser_put_ViewSourceIn(This,Location)	\
    (This)->lpVtbl -> put_ViewSourceIn(This,Location)

#define _EnvironmentWebBrowser_get_ViewSourceIn(This,Location)	\
    (This)->lpVtbl -> get_ViewSourceIn(This,Location)

#define _EnvironmentWebBrowser_put_ViewSourceExternalProgram(This,Path)	\
    (This)->lpVtbl -> put_ViewSourceExternalProgram(This,Path)

#define _EnvironmentWebBrowser_get_ViewSourceExternalProgram(This,Path)	\
    (This)->lpVtbl -> get_ViewSourceExternalProgram(This,Path)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_UseDefaultHomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    VARIANT_BOOL UseDefault);


void __RPC_STUB _EnvironmentWebBrowser_put_UseDefaultHomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_UseDefaultHomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ VARIANT_BOOL *pUseDefault);


void __RPC_STUB _EnvironmentWebBrowser_get_UseDefaultHomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_HomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR URL);


void __RPC_STUB _EnvironmentWebBrowser_put_HomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_HomePage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *URL);


void __RPC_STUB _EnvironmentWebBrowser_get_HomePage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_UseDefaultSearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    VARIANT_BOOL UseDefault);


void __RPC_STUB _EnvironmentWebBrowser_put_UseDefaultSearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_UseDefaultSearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ VARIANT_BOOL *pUseDefault);


void __RPC_STUB _EnvironmentWebBrowser_get_UseDefaultSearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_SearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR URL);


void __RPC_STUB _EnvironmentWebBrowser_put_SearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_SearchPage_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *URL);


void __RPC_STUB _EnvironmentWebBrowser_get_SearchPage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_ViewSourceIn_Proxy( 
    _EnvironmentWebBrowser * This,
    vsBrowserViewSource Location);


void __RPC_STUB _EnvironmentWebBrowser_put_ViewSourceIn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_ViewSourceIn_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ vsBrowserViewSource *Location);


void __RPC_STUB _EnvironmentWebBrowser_get_ViewSourceIn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_put_ViewSourceExternalProgram_Proxy( 
    _EnvironmentWebBrowser * This,
    BSTR Path);


void __RPC_STUB _EnvironmentWebBrowser_put_ViewSourceExternalProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentWebBrowser_get_ViewSourceExternalProgram_Proxy( 
    _EnvironmentWebBrowser * This,
    /* [retval][out] */ BSTR *Path);


void __RPC_STUB _EnvironmentWebBrowser_get_ViewSourceExternalProgram_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentWebBrowser_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentHelp_INTERFACE_DEFINED__
#define ___EnvironmentHelp_INTERFACE_DEFINED__

/* interface _EnvironmentHelp */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentHelp;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AEBDED64-A206-11d3-B8B5-00C04F79F802")
    _EnvironmentHelp : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredLanguage( 
            /* [retval][out] */ LONG *LCID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreferredLanguage( 
            /* [in] */ LONG LCID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredCollection( 
            /* [retval][out] */ BSTR *NameSpace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_PreferredCollection( 
            /* [in] */ BSTR NameSpace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_External( 
            /* [retval][out] */ VARIANT_BOOL *ExternalHelp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_External( 
            /* [in] */ VARIANT_BOOL ExternalHelp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentHelpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentHelp * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentHelp * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentHelp * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentHelp * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentHelp * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentHelp * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentHelp * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredLanguage )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ LONG *LCID);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredLanguage )( 
            _EnvironmentHelp * This,
            /* [in] */ LONG LCID);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredCollection )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ BSTR *NameSpace);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredCollection )( 
            _EnvironmentHelp * This,
            /* [in] */ BSTR NameSpace);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_External )( 
            _EnvironmentHelp * This,
            /* [retval][out] */ VARIANT_BOOL *ExternalHelp);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_External )( 
            _EnvironmentHelp * This,
            /* [in] */ VARIANT_BOOL ExternalHelp);
        
        END_INTERFACE
    } _EnvironmentHelpVtbl;

    interface _EnvironmentHelp
    {
        CONST_VTBL struct _EnvironmentHelpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentHelp_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentHelp_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentHelp_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentHelp_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentHelp_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentHelp_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentHelp_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentHelp_get_PreferredLanguage(This,LCID)	\
    (This)->lpVtbl -> get_PreferredLanguage(This,LCID)

#define _EnvironmentHelp_put_PreferredLanguage(This,LCID)	\
    (This)->lpVtbl -> put_PreferredLanguage(This,LCID)

#define _EnvironmentHelp_get_PreferredCollection(This,NameSpace)	\
    (This)->lpVtbl -> get_PreferredCollection(This,NameSpace)

#define _EnvironmentHelp_put_PreferredCollection(This,NameSpace)	\
    (This)->lpVtbl -> put_PreferredCollection(This,NameSpace)

#define _EnvironmentHelp_get_External(This,ExternalHelp)	\
    (This)->lpVtbl -> get_External(This,ExternalHelp)

#define _EnvironmentHelp_put_External(This,ExternalHelp)	\
    (This)->lpVtbl -> put_External(This,ExternalHelp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_PreferredLanguage_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ LONG *LCID);


void __RPC_STUB _EnvironmentHelp_get_PreferredLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_PreferredLanguage_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ LONG LCID);


void __RPC_STUB _EnvironmentHelp_put_PreferredLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_PreferredCollection_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ BSTR *NameSpace);


void __RPC_STUB _EnvironmentHelp_get_PreferredCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_PreferredCollection_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ BSTR NameSpace);


void __RPC_STUB _EnvironmentHelp_put_PreferredCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_get_External_Proxy( 
    _EnvironmentHelp * This,
    /* [retval][out] */ VARIANT_BOOL *ExternalHelp);


void __RPC_STUB _EnvironmentHelp_get_External_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _EnvironmentHelp_put_External_Proxy( 
    _EnvironmentHelp * This,
    /* [in] */ VARIANT_BOOL ExternalHelp);


void __RPC_STUB _EnvironmentHelp_put_External_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentHelp_INTERFACE_DEFINED__ */


#ifndef __ColorableItems_INTERFACE_DEFINED__
#define __ColorableItems_INTERFACE_DEFINED__

/* interface ColorableItems */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ColorableItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e5d17051-d6e5-4da7-8b3a-ca888617a5e7")
    ColorableItems : public IDispatch
    {
    public:
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Foreground( 
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Foreground( 
            /* external definition not present */ OLE_COLOR Color) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Background( 
            /* external definition not present */ OLE_COLOR Color) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ VARIANT_BOOL *Bold) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            VARIANT_BOOL Bols) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorableItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorableItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorableItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorableItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorableItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorableItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorableItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorableItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ColorableItems * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Foreground )( 
            ColorableItems * This,
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Foreground )( 
            ColorableItems * This,
            /* external definition not present */ OLE_COLOR Color);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            ColorableItems * This,
            /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            ColorableItems * This,
            /* external definition not present */ OLE_COLOR Color);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            ColorableItems * This,
            /* [retval][out] */ VARIANT_BOOL *Bold);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            ColorableItems * This,
            VARIANT_BOOL Bols);
        
        END_INTERFACE
    } ColorableItemsVtbl;

    interface ColorableItems
    {
        CONST_VTBL struct ColorableItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorableItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ColorableItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ColorableItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ColorableItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ColorableItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ColorableItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ColorableItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ColorableItems_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ColorableItems_get_Foreground(This,pColor)	\
    (This)->lpVtbl -> get_Foreground(This,pColor)

#define ColorableItems_put_Foreground(This,Color)	\
    (This)->lpVtbl -> put_Foreground(This,Color)

#define ColorableItems_get_Background(This,pColor)	\
    (This)->lpVtbl -> get_Background(This,pColor)

#define ColorableItems_put_Background(This,Color)	\
    (This)->lpVtbl -> put_Background(This,Color)

#define ColorableItems_get_Bold(This,Bold)	\
    (This)->lpVtbl -> get_Bold(This,Bold)

#define ColorableItems_put_Bold(This,Bols)	\
    (This)->lpVtbl -> put_Bold(This,Bols)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Name_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ColorableItems_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Foreground_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);


void __RPC_STUB ColorableItems_get_Foreground_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Foreground_Proxy( 
    ColorableItems * This,
    /* external definition not present */ OLE_COLOR Color);


void __RPC_STUB ColorableItems_put_Foreground_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Background_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ /* external definition not present */ OLE_COLOR *pColor);


void __RPC_STUB ColorableItems_get_Background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Background_Proxy( 
    ColorableItems * This,
    /* external definition not present */ OLE_COLOR Color);


void __RPC_STUB ColorableItems_put_Background_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_get_Bold_Proxy( 
    ColorableItems * This,
    /* [retval][out] */ VARIANT_BOOL *Bold);


void __RPC_STUB ColorableItems_get_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ColorableItems_put_Bold_Proxy( 
    ColorableItems * This,
    VARIANT_BOOL Bols);


void __RPC_STUB ColorableItems_put_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ColorableItems_INTERFACE_DEFINED__ */


#ifndef __FontsAndColorsItems_INTERFACE_DEFINED__
#define __FontsAndColorsItems_INTERFACE_DEFINED__

/* interface FontsAndColorsItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_FontsAndColorsItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f25ae7e6-1460-4ba4-8e5e-bbbe746de353")
    FontsAndColorsItems : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ColorableItems **pFontsAndColorsItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FontsAndColorsItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FontsAndColorsItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FontsAndColorsItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FontsAndColorsItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FontsAndColorsItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FontsAndColorsItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FontsAndColorsItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FontsAndColorsItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            FontsAndColorsItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FontsAndColorsItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ ColorableItems **pFontsAndColorsItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FontsAndColorsItems * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } FontsAndColorsItemsVtbl;

    interface FontsAndColorsItems
    {
        CONST_VTBL struct FontsAndColorsItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FontsAndColorsItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define FontsAndColorsItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define FontsAndColorsItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define FontsAndColorsItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define FontsAndColorsItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define FontsAndColorsItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define FontsAndColorsItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define FontsAndColorsItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define FontsAndColorsItems_Item(This,Index,pFontsAndColorsItem)	\
    (This)->lpVtbl -> Item(This,Index,pFontsAndColorsItem)

#define FontsAndColorsItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems__NewEnum_Proxy( 
    FontsAndColorsItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB FontsAndColorsItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems_Item_Proxy( 
    FontsAndColorsItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ ColorableItems **pFontsAndColorsItem);


void __RPC_STUB FontsAndColorsItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE FontsAndColorsItems_get_Count_Proxy( 
    FontsAndColorsItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB FontsAndColorsItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __FontsAndColorsItems_INTERFACE_DEFINED__ */


#ifndef ___FontsAndColors_INTERFACE_DEFINED__
#define ___FontsAndColors_INTERFACE_DEFINED__

/* interface _FontsAndColors */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__FontsAndColors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("256068f6-1add-4f7b-ba76-571314c413ad")
    _FontsAndColors : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
            /* [retval][out] */ BSTR *pFamily) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
            BSTR Family) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontCharacterSet( 
            /* [retval][out] */ vsFontCharSet *pFontCharSet) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontCharacterSet( 
            vsFontCharSet FontCharSet) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ short *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            short Size) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontsAndColorsItems( 
            /* [retval][out] */ FontsAndColorsItems **ppColorableItems) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _FontsAndColorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _FontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _FontsAndColors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _FontsAndColors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _FontsAndColors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _FontsAndColors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _FontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _FontsAndColors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            _FontsAndColors * This,
            /* [retval][out] */ BSTR *pFamily);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            _FontsAndColors * This,
            BSTR Family);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontCharacterSet )( 
            _FontsAndColors * This,
            /* [retval][out] */ vsFontCharSet *pFontCharSet);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontCharacterSet )( 
            _FontsAndColors * This,
            vsFontCharSet FontCharSet);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            _FontsAndColors * This,
            /* [retval][out] */ short *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            _FontsAndColors * This,
            short Size);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontsAndColorsItems )( 
            _FontsAndColors * This,
            /* [retval][out] */ FontsAndColorsItems **ppColorableItems);
        
        END_INTERFACE
    } _FontsAndColorsVtbl;

    interface _FontsAndColors
    {
        CONST_VTBL struct _FontsAndColorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _FontsAndColors_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _FontsAndColors_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _FontsAndColors_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _FontsAndColors_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _FontsAndColors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _FontsAndColors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _FontsAndColors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _FontsAndColors_get_FontFamily(This,pFamily)	\
    (This)->lpVtbl -> get_FontFamily(This,pFamily)

#define _FontsAndColors_put_FontFamily(This,Family)	\
    (This)->lpVtbl -> put_FontFamily(This,Family)

#define _FontsAndColors_get_FontCharacterSet(This,pFontCharSet)	\
    (This)->lpVtbl -> get_FontCharacterSet(This,pFontCharSet)

#define _FontsAndColors_put_FontCharacterSet(This,FontCharSet)	\
    (This)->lpVtbl -> put_FontCharacterSet(This,FontCharSet)

#define _FontsAndColors_get_FontSize(This,pSize)	\
    (This)->lpVtbl -> get_FontSize(This,pSize)

#define _FontsAndColors_put_FontSize(This,Size)	\
    (This)->lpVtbl -> put_FontSize(This,Size)

#define _FontsAndColors_get_FontsAndColorsItems(This,ppColorableItems)	\
    (This)->lpVtbl -> get_FontsAndColorsItems(This,ppColorableItems)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontFamily_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ BSTR *pFamily);


void __RPC_STUB _FontsAndColors_get_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontFamily_Proxy( 
    _FontsAndColors * This,
    BSTR Family);


void __RPC_STUB _FontsAndColors_put_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontCharacterSet_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ vsFontCharSet *pFontCharSet);


void __RPC_STUB _FontsAndColors_get_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontCharacterSet_Proxy( 
    _FontsAndColors * This,
    vsFontCharSet FontCharSet);


void __RPC_STUB _FontsAndColors_put_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontSize_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ short *pSize);


void __RPC_STUB _FontsAndColors_get_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_put_FontSize_Proxy( 
    _FontsAndColors * This,
    short Size);


void __RPC_STUB _FontsAndColors_put_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _FontsAndColors_get_FontsAndColorsItems_Proxy( 
    _FontsAndColors * This,
    /* [retval][out] */ FontsAndColorsItems **ppColorableItems);


void __RPC_STUB _FontsAndColors_get_FontsAndColorsItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___FontsAndColors_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentGeneral_INTERFACE_DEFINED__
#define ___EnvironmentGeneral_INTERFACE_DEFINED__

/* interface _EnvironmentGeneral */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentGeneral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("48e61d9c-8c8d-42d3-914b-46d70c8b7a40")
    _EnvironmentGeneral : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OnStartUp( 
            /* [in] */ vsStartUp startup) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OnStartUp( 
            /* [retval][out] */ vsStartUp *pstartup) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowStatusBar( 
            /* [in] */ VARIANT_BOOL fshow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowStatusBar( 
            /* [retval][out] */ VARIANT_BOOL *pfshow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowMenuContainsNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowMenuContainsNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MRUListContainsNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MRUListContainsNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimationSpeed( 
            /* [retval][out] */ short *pSpeed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimationSpeed( 
            short Speed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Animations( 
            /* [retval][out] */ VARIANT_BOOL *pAnimations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Animations( 
            VARIANT_BOOL Animations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCommandWindowCompletion( 
            /* [retval][out] */ VARIANT_BOOL *pComplete) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCommandWindowCompletion( 
            VARIANT_BOOL Complete) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_CloseButtonActiveTabOnly( 
            VARIANT_BOOL CloseActiveOnly) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_CloseButtonActiveTabOnly( 
            /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutohidePinActiveTabOnly( 
            VARIANT_BOOL AutohidePinActiveOnly) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutohidePinActiveTabOnly( 
            /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentGeneralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentGeneral * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentGeneral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentGeneral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentGeneral * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentGeneral * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentGeneral * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentGeneral * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OnStartUp )( 
            _EnvironmentGeneral * This,
            /* [in] */ vsStartUp startup);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OnStartUp )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ vsStartUp *pstartup);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowStatusBar )( 
            _EnvironmentGeneral * This,
            /* [in] */ VARIANT_BOOL fshow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowStatusBar )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfshow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowMenuContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowMenuContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MRUListContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MRUListContainsNItems )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimationSpeed )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ short *pSpeed);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimationSpeed )( 
            _EnvironmentGeneral * This,
            short Speed);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Animations )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pAnimations);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Animations )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL Animations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCommandWindowCompletion )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pComplete);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCommandWindowCompletion )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL Complete);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CloseButtonActiveTabOnly )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL CloseActiveOnly);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CloseButtonActiveTabOnly )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutohidePinActiveTabOnly )( 
            _EnvironmentGeneral * This,
            VARIANT_BOOL AutohidePinActiveOnly);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutohidePinActiveTabOnly )( 
            _EnvironmentGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly);
        
        END_INTERFACE
    } _EnvironmentGeneralVtbl;

    interface _EnvironmentGeneral
    {
        CONST_VTBL struct _EnvironmentGeneralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentGeneral_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentGeneral_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentGeneral_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentGeneral_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentGeneral_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentGeneral_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentGeneral_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentGeneral_put_OnStartUp(This,startup)	\
    (This)->lpVtbl -> put_OnStartUp(This,startup)

#define _EnvironmentGeneral_get_OnStartUp(This,pstartup)	\
    (This)->lpVtbl -> get_OnStartUp(This,pstartup)

#define _EnvironmentGeneral_put_ShowStatusBar(This,fshow)	\
    (This)->lpVtbl -> put_ShowStatusBar(This,fshow)

#define _EnvironmentGeneral_get_ShowStatusBar(This,pfshow)	\
    (This)->lpVtbl -> get_ShowStatusBar(This,pfshow)

#define _EnvironmentGeneral_put_WindowMenuContainsNItems(This,lCount)	\
    (This)->lpVtbl -> put_WindowMenuContainsNItems(This,lCount)

#define _EnvironmentGeneral_get_WindowMenuContainsNItems(This,plCount)	\
    (This)->lpVtbl -> get_WindowMenuContainsNItems(This,plCount)

#define _EnvironmentGeneral_put_MRUListContainsNItems(This,lCount)	\
    (This)->lpVtbl -> put_MRUListContainsNItems(This,lCount)

#define _EnvironmentGeneral_get_MRUListContainsNItems(This,plCount)	\
    (This)->lpVtbl -> get_MRUListContainsNItems(This,plCount)

#define _EnvironmentGeneral_get_AnimationSpeed(This,pSpeed)	\
    (This)->lpVtbl -> get_AnimationSpeed(This,pSpeed)

#define _EnvironmentGeneral_put_AnimationSpeed(This,Speed)	\
    (This)->lpVtbl -> put_AnimationSpeed(This,Speed)

#define _EnvironmentGeneral_get_Animations(This,pAnimations)	\
    (This)->lpVtbl -> get_Animations(This,pAnimations)

#define _EnvironmentGeneral_put_Animations(This,Animations)	\
    (This)->lpVtbl -> put_Animations(This,Animations)

#define _EnvironmentGeneral_get_ShowCommandWindowCompletion(This,pComplete)	\
    (This)->lpVtbl -> get_ShowCommandWindowCompletion(This,pComplete)

#define _EnvironmentGeneral_put_ShowCommandWindowCompletion(This,Complete)	\
    (This)->lpVtbl -> put_ShowCommandWindowCompletion(This,Complete)

#define _EnvironmentGeneral_put_CloseButtonActiveTabOnly(This,CloseActiveOnly)	\
    (This)->lpVtbl -> put_CloseButtonActiveTabOnly(This,CloseActiveOnly)

#define _EnvironmentGeneral_get_CloseButtonActiveTabOnly(This,CloseActiveOnly)	\
    (This)->lpVtbl -> get_CloseButtonActiveTabOnly(This,CloseActiveOnly)

#define _EnvironmentGeneral_put_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)	\
    (This)->lpVtbl -> put_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)

#define _EnvironmentGeneral_get_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)	\
    (This)->lpVtbl -> get_AutohidePinActiveTabOnly(This,AutohidePinActiveOnly)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_OnStartUp_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ vsStartUp startup);


void __RPC_STUB _EnvironmentGeneral_put_OnStartUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_OnStartUp_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ vsStartUp *pstartup);


void __RPC_STUB _EnvironmentGeneral_get_OnStartUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_ShowStatusBar_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ VARIANT_BOOL fshow);


void __RPC_STUB _EnvironmentGeneral_put_ShowStatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_ShowStatusBar_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfshow);


void __RPC_STUB _EnvironmentGeneral_get_ShowStatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_WindowMenuContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentGeneral_put_WindowMenuContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_WindowMenuContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentGeneral_get_WindowMenuContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_MRUListContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentGeneral_put_MRUListContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_MRUListContainsNItems_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentGeneral_get_MRUListContainsNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_AnimationSpeed_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ short *pSpeed);


void __RPC_STUB _EnvironmentGeneral_get_AnimationSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_AnimationSpeed_Proxy( 
    _EnvironmentGeneral * This,
    short Speed);


void __RPC_STUB _EnvironmentGeneral_put_AnimationSpeed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_Animations_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pAnimations);


void __RPC_STUB _EnvironmentGeneral_get_Animations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_Animations_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL Animations);


void __RPC_STUB _EnvironmentGeneral_put_Animations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_ShowCommandWindowCompletion_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pComplete);


void __RPC_STUB _EnvironmentGeneral_get_ShowCommandWindowCompletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_ShowCommandWindowCompletion_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL Complete);


void __RPC_STUB _EnvironmentGeneral_put_ShowCommandWindowCompletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_CloseButtonActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL CloseActiveOnly);


void __RPC_STUB _EnvironmentGeneral_put_CloseButtonActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_CloseButtonActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *CloseActiveOnly);


void __RPC_STUB _EnvironmentGeneral_get_CloseButtonActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_put_AutohidePinActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    VARIANT_BOOL AutohidePinActiveOnly);


void __RPC_STUB _EnvironmentGeneral_put_AutohidePinActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentGeneral_get_AutohidePinActiveTabOnly_Proxy( 
    _EnvironmentGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *AutohidePinActiveOnly);


void __RPC_STUB _EnvironmentGeneral_get_AutohidePinActiveTabOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentGeneral_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentFontsAndColors_INTERFACE_DEFINED__
#define ___EnvironmentFontsAndColors_INTERFACE_DEFINED__

/* interface _EnvironmentFontsAndColors */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentFontsAndColors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f809cab6-2c9f-41f2-a5af-e26fb80e62ad")
    _EnvironmentFontsAndColors : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentFontsAndColorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentFontsAndColors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentFontsAndColors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentFontsAndColors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentFontsAndColors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _EnvironmentFontsAndColorsVtbl;

    interface _EnvironmentFontsAndColors
    {
        CONST_VTBL struct _EnvironmentFontsAndColorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentFontsAndColors_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentFontsAndColors_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentFontsAndColors_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentFontsAndColors_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentFontsAndColors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentFontsAndColors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentFontsAndColors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___EnvironmentFontsAndColors_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__
#define ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__

/* interface _EnvironmentProjectsAndSolution */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentProjectsAndSolution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("478f06d4-5d57-473f-9b74-5f8e88efa5e7")
    _EnvironmentProjectsAndSolution : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OnRunOrPreview( 
            /* [in] */ vsSaveChanges bld) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OnRunOrPreview( 
            /* [retval][out] */ vsSaveChanges *pbld) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ProjectsLocation( 
            /* [in] */ BSTR Location) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectsLocation( 
            /* [retval][out] */ BSTR *pLocation) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowOutputWindowBeforeBuild( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowOutputWindowBeforeBuild( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowTaskListAfterBuild( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowTaskListAfterBuild( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentProjectsAndSolutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentProjectsAndSolution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentProjectsAndSolution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentProjectsAndSolution * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OnRunOrPreview )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ vsSaveChanges bld);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OnRunOrPreview )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ vsSaveChanges *pbld);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProjectsLocation )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ BSTR Location);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectsLocation )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ BSTR *pLocation);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowOutputWindowBeforeBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowOutputWindowBeforeBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTaskListAfterBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowTaskListAfterBuild )( 
            _EnvironmentProjectsAndSolution * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        END_INTERFACE
    } _EnvironmentProjectsAndSolutionVtbl;

    interface _EnvironmentProjectsAndSolution
    {
        CONST_VTBL struct _EnvironmentProjectsAndSolutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentProjectsAndSolution_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentProjectsAndSolution_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentProjectsAndSolution_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentProjectsAndSolution_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentProjectsAndSolution_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentProjectsAndSolution_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentProjectsAndSolution_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentProjectsAndSolution_put_OnRunOrPreview(This,bld)	\
    (This)->lpVtbl -> put_OnRunOrPreview(This,bld)

#define _EnvironmentProjectsAndSolution_get_OnRunOrPreview(This,pbld)	\
    (This)->lpVtbl -> get_OnRunOrPreview(This,pbld)

#define _EnvironmentProjectsAndSolution_put_ProjectsLocation(This,Location)	\
    (This)->lpVtbl -> put_ProjectsLocation(This,Location)

#define _EnvironmentProjectsAndSolution_get_ProjectsLocation(This,pLocation)	\
    (This)->lpVtbl -> get_ProjectsLocation(This,pLocation)

#define _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild(This,fShow)	\
    (This)->lpVtbl -> put_ShowOutputWindowBeforeBuild(This,fShow)

#define _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild(This,pfShow)	\
    (This)->lpVtbl -> get_ShowOutputWindowBeforeBuild(This,pfShow)

#define _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild(This,fShow)	\
    (This)->lpVtbl -> put_ShowTaskListAfterBuild(This,fShow)

#define _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild(This,pfShow)	\
    (This)->lpVtbl -> get_ShowTaskListAfterBuild(This,pfShow)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_OnRunOrPreview_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ vsSaveChanges bld);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_OnRunOrPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_OnRunOrPreview_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ vsSaveChanges *pbld);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_OnRunOrPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ProjectsLocation_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ BSTR Location);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ProjectsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ProjectsLocation_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ BSTR *pLocation);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ProjectsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ShowOutputWindowBeforeBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ShowOutputWindowBeforeBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_put_ShowTaskListAfterBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild_Proxy( 
    _EnvironmentProjectsAndSolution * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB _EnvironmentProjectsAndSolution_get_ShowTaskListAfterBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentProjectsAndSolution_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentDocuments_INTERFACE_DEFINED__
#define ___EnvironmentDocuments_INTERFACE_DEFINED__

/* interface _EnvironmentDocuments */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentDocuments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("76ed1c48-ed86-4e9e-acf8-a40e765daf25")
    _EnvironmentDocuments : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReuseSavedActiveDocWindow( 
            VARIANT_BOOL Reuse) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReuseSavedActiveDocWindow( 
            /* [retval][out] */ VARIANT_BOOL *pReuse) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DetectFileChangesOutsideIDE( 
            /* [in] */ VARIANT_BOOL fAutoRead) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DetectFileChangesOutsideIDE( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoRead) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoloadExternalChanges( 
            /* [in] */ VARIANT_BOOL fAutoload) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoloadExternalChanges( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoload) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_InitializeOpenFileFromCurrentDocument( 
            /* [in] */ VARIANT_BOOL fInit) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_InitializeOpenFileFromCurrentDocument( 
            /* [retval][out] */ VARIANT_BOOL *pfInit) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MiscFilesProjectSavesLastNItems( 
            /* [in] */ long lCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesProjectSavesLastNItems( 
            /* [retval][out] */ long *plCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindReplaceShowMessageBoxes( 
            /* [retval][out] */ VARIANT_BOOL *pShow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindReplaceShowMessageBoxes( 
            VARIANT_BOOL Show) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindReplaceInitializeFromEditor( 
            /* [retval][out] */ VARIANT_BOOL *pShow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindReplaceInitializeFromEditor( 
            VARIANT_BOOL Show) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentDocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentDocuments * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentDocuments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentDocuments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentDocuments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentDocuments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentDocuments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentDocuments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReuseSavedActiveDocWindow )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Reuse);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReuseSavedActiveDocWindow )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pReuse);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DetectFileChangesOutsideIDE )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fAutoRead);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DetectFileChangesOutsideIDE )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoRead);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoloadExternalChanges )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fAutoload);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoloadExternalChanges )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoload);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InitializeOpenFileFromCurrentDocument )( 
            _EnvironmentDocuments * This,
            /* [in] */ VARIANT_BOOL fInit);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InitializeOpenFileFromCurrentDocument )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pfInit);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MiscFilesProjectSavesLastNItems )( 
            _EnvironmentDocuments * This,
            /* [in] */ long lCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesProjectSavesLastNItems )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ long *plCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindReplaceShowMessageBoxes )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pShow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindReplaceShowMessageBoxes )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Show);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindReplaceInitializeFromEditor )( 
            _EnvironmentDocuments * This,
            /* [retval][out] */ VARIANT_BOOL *pShow);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindReplaceInitializeFromEditor )( 
            _EnvironmentDocuments * This,
            VARIANT_BOOL Show);
        
        END_INTERFACE
    } _EnvironmentDocumentsVtbl;

    interface _EnvironmentDocuments
    {
        CONST_VTBL struct _EnvironmentDocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentDocuments_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentDocuments_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentDocuments_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentDocuments_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentDocuments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentDocuments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentDocuments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentDocuments_put_ReuseSavedActiveDocWindow(This,Reuse)	\
    (This)->lpVtbl -> put_ReuseSavedActiveDocWindow(This,Reuse)

#define _EnvironmentDocuments_get_ReuseSavedActiveDocWindow(This,pReuse)	\
    (This)->lpVtbl -> get_ReuseSavedActiveDocWindow(This,pReuse)

#define _EnvironmentDocuments_put_DetectFileChangesOutsideIDE(This,fAutoRead)	\
    (This)->lpVtbl -> put_DetectFileChangesOutsideIDE(This,fAutoRead)

#define _EnvironmentDocuments_get_DetectFileChangesOutsideIDE(This,pfAutoRead)	\
    (This)->lpVtbl -> get_DetectFileChangesOutsideIDE(This,pfAutoRead)

#define _EnvironmentDocuments_put_AutoloadExternalChanges(This,fAutoload)	\
    (This)->lpVtbl -> put_AutoloadExternalChanges(This,fAutoload)

#define _EnvironmentDocuments_get_AutoloadExternalChanges(This,pfAutoload)	\
    (This)->lpVtbl -> get_AutoloadExternalChanges(This,pfAutoload)

#define _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument(This,fInit)	\
    (This)->lpVtbl -> put_InitializeOpenFileFromCurrentDocument(This,fInit)

#define _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument(This,pfInit)	\
    (This)->lpVtbl -> get_InitializeOpenFileFromCurrentDocument(This,pfInit)

#define _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems(This,lCount)	\
    (This)->lpVtbl -> put_MiscFilesProjectSavesLastNItems(This,lCount)

#define _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems(This,plCount)	\
    (This)->lpVtbl -> get_MiscFilesProjectSavesLastNItems(This,plCount)

#define _EnvironmentDocuments_get_FindReplaceShowMessageBoxes(This,pShow)	\
    (This)->lpVtbl -> get_FindReplaceShowMessageBoxes(This,pShow)

#define _EnvironmentDocuments_put_FindReplaceShowMessageBoxes(This,Show)	\
    (This)->lpVtbl -> put_FindReplaceShowMessageBoxes(This,Show)

#define _EnvironmentDocuments_get_FindReplaceInitializeFromEditor(This,pShow)	\
    (This)->lpVtbl -> get_FindReplaceInitializeFromEditor(This,pShow)

#define _EnvironmentDocuments_put_FindReplaceInitializeFromEditor(This,Show)	\
    (This)->lpVtbl -> put_FindReplaceInitializeFromEditor(This,Show)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_ReuseSavedActiveDocWindow_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Reuse);


void __RPC_STUB _EnvironmentDocuments_put_ReuseSavedActiveDocWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_ReuseSavedActiveDocWindow_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pReuse);


void __RPC_STUB _EnvironmentDocuments_get_ReuseSavedActiveDocWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_DetectFileChangesOutsideIDE_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fAutoRead);


void __RPC_STUB _EnvironmentDocuments_put_DetectFileChangesOutsideIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_DetectFileChangesOutsideIDE_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoRead);


void __RPC_STUB _EnvironmentDocuments_get_DetectFileChangesOutsideIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_AutoloadExternalChanges_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fAutoload);


void __RPC_STUB _EnvironmentDocuments_put_AutoloadExternalChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_AutoloadExternalChanges_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoload);


void __RPC_STUB _EnvironmentDocuments_get_AutoloadExternalChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ VARIANT_BOOL fInit);


void __RPC_STUB _EnvironmentDocuments_put_InitializeOpenFileFromCurrentDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pfInit);


void __RPC_STUB _EnvironmentDocuments_get_InitializeOpenFileFromCurrentDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems_Proxy( 
    _EnvironmentDocuments * This,
    /* [in] */ long lCount);


void __RPC_STUB _EnvironmentDocuments_put_MiscFilesProjectSavesLastNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ long *plCount);


void __RPC_STUB _EnvironmentDocuments_get_MiscFilesProjectSavesLastNItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_FindReplaceShowMessageBoxes_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pShow);


void __RPC_STUB _EnvironmentDocuments_get_FindReplaceShowMessageBoxes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_FindReplaceShowMessageBoxes_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Show);


void __RPC_STUB _EnvironmentDocuments_put_FindReplaceShowMessageBoxes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_get_FindReplaceInitializeFromEditor_Proxy( 
    _EnvironmentDocuments * This,
    /* [retval][out] */ VARIANT_BOOL *pShow);


void __RPC_STUB _EnvironmentDocuments_get_FindReplaceInitializeFromEditor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentDocuments_put_FindReplaceInitializeFromEditor_Proxy( 
    _EnvironmentDocuments * This,
    VARIANT_BOOL Show);


void __RPC_STUB _EnvironmentDocuments_put_FindReplaceInitializeFromEditor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentDocuments_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentTaskList_INTERFACE_DEFINED__
#define ___EnvironmentTaskList_INTERFACE_DEFINED__

/* interface _EnvironmentTaskList */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentTaskList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4bc18a5b-dbb6-4af5-a443-2e3f19365304")
    _EnvironmentTaskList : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfirmTaskDeletion( 
            /* [retval][out] */ VARIANT_BOOL *pConfirm) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfirmTaskDeletion( 
            VARIANT_BOOL Confirm) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WarnOnAddingHiddenItem( 
            /* [retval][out] */ VARIANT_BOOL *pWarn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WarnOnAddingHiddenItem( 
            VARIANT_BOOL Warn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommentTokens( 
            /* [retval][out] */ VARIANT *pTokens) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CommentTokens( 
            VARIANT Tokens) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentTaskListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentTaskList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentTaskList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentTaskList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentTaskList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentTaskList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentTaskList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentTaskList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfirmTaskDeletion )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT_BOOL *pConfirm);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfirmTaskDeletion )( 
            _EnvironmentTaskList * This,
            VARIANT_BOOL Confirm);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WarnOnAddingHiddenItem )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT_BOOL *pWarn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WarnOnAddingHiddenItem )( 
            _EnvironmentTaskList * This,
            VARIANT_BOOL Warn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommentTokens )( 
            _EnvironmentTaskList * This,
            /* [retval][out] */ VARIANT *pTokens);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CommentTokens )( 
            _EnvironmentTaskList * This,
            VARIANT Tokens);
        
        END_INTERFACE
    } _EnvironmentTaskListVtbl;

    interface _EnvironmentTaskList
    {
        CONST_VTBL struct _EnvironmentTaskListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentTaskList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentTaskList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentTaskList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentTaskList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentTaskList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentTaskList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentTaskList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentTaskList_get_ConfirmTaskDeletion(This,pConfirm)	\
    (This)->lpVtbl -> get_ConfirmTaskDeletion(This,pConfirm)

#define _EnvironmentTaskList_put_ConfirmTaskDeletion(This,Confirm)	\
    (This)->lpVtbl -> put_ConfirmTaskDeletion(This,Confirm)

#define _EnvironmentTaskList_get_WarnOnAddingHiddenItem(This,pWarn)	\
    (This)->lpVtbl -> get_WarnOnAddingHiddenItem(This,pWarn)

#define _EnvironmentTaskList_put_WarnOnAddingHiddenItem(This,Warn)	\
    (This)->lpVtbl -> put_WarnOnAddingHiddenItem(This,Warn)

#define _EnvironmentTaskList_get_CommentTokens(This,pTokens)	\
    (This)->lpVtbl -> get_CommentTokens(This,pTokens)

#define _EnvironmentTaskList_put_CommentTokens(This,Tokens)	\
    (This)->lpVtbl -> put_CommentTokens(This,Tokens)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_ConfirmTaskDeletion_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT_BOOL *pConfirm);


void __RPC_STUB _EnvironmentTaskList_get_ConfirmTaskDeletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_ConfirmTaskDeletion_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT_BOOL Confirm);


void __RPC_STUB _EnvironmentTaskList_put_ConfirmTaskDeletion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_WarnOnAddingHiddenItem_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT_BOOL *pWarn);


void __RPC_STUB _EnvironmentTaskList_get_WarnOnAddingHiddenItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_WarnOnAddingHiddenItem_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT_BOOL Warn);


void __RPC_STUB _EnvironmentTaskList_put_WarnOnAddingHiddenItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_get_CommentTokens_Proxy( 
    _EnvironmentTaskList * This,
    /* [retval][out] */ VARIANT *pTokens);


void __RPC_STUB _EnvironmentTaskList_get_CommentTokens_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentTaskList_put_CommentTokens_Proxy( 
    _EnvironmentTaskList * This,
    VARIANT Tokens);


void __RPC_STUB _EnvironmentTaskList_put_CommentTokens_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentTaskList_INTERFACE_DEFINED__ */


#ifndef ___EnvironmentKeyboard_INTERFACE_DEFINED__
#define ___EnvironmentKeyboard_INTERFACE_DEFINED__

/* interface _EnvironmentKeyboard */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__EnvironmentKeyboard;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c722678-490d-408f-98ae-b6b9a68aa45d")
    _EnvironmentKeyboard : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Scheme( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scheme( 
            /* [retval][out] */ BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _EnvironmentKeyboardVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _EnvironmentKeyboard * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _EnvironmentKeyboard * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _EnvironmentKeyboard * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _EnvironmentKeyboard * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _EnvironmentKeyboard * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _EnvironmentKeyboard * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _EnvironmentKeyboard * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Scheme )( 
            _EnvironmentKeyboard * This,
            /* [in] */ BSTR bstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scheme )( 
            _EnvironmentKeyboard * This,
            /* [retval][out] */ BSTR *pbstr);
        
        END_INTERFACE
    } _EnvironmentKeyboardVtbl;

    interface _EnvironmentKeyboard
    {
        CONST_VTBL struct _EnvironmentKeyboardVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _EnvironmentKeyboard_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _EnvironmentKeyboard_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _EnvironmentKeyboard_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _EnvironmentKeyboard_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _EnvironmentKeyboard_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _EnvironmentKeyboard_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _EnvironmentKeyboard_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _EnvironmentKeyboard_put_Scheme(This,bstr)	\
    (This)->lpVtbl -> put_Scheme(This,bstr)

#define _EnvironmentKeyboard_get_Scheme(This,pbstr)	\
    (This)->lpVtbl -> get_Scheme(This,pbstr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentKeyboard_put_Scheme_Proxy( 
    _EnvironmentKeyboard * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB _EnvironmentKeyboard_put_Scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _EnvironmentKeyboard_get_Scheme_Proxy( 
    _EnvironmentKeyboard * This,
    /* [retval][out] */ BSTR *pbstr);


void __RPC_STUB _EnvironmentKeyboard_get_Scheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___EnvironmentKeyboard_INTERFACE_DEFINED__ */


#ifndef __IExtensibleObject_INTERFACE_DEFINED__
#define __IExtensibleObject_INTERFACE_DEFINED__

/* interface IExtensibleObject */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IExtensibleObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86c31347-5b52-4715-b454-a6e5fcab975d")
    IExtensibleObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAutomationObject( 
            /* [in] */ BSTR Name,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [out] */ IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtensibleObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtensibleObject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtensibleObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtensibleObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAutomationObject )( 
            IExtensibleObject * This,
            /* [in] */ BSTR Name,
            /* [in] */ IExtensibleObjectSite *pParent,
            /* [out] */ IDispatch **ppDisp);
        
        END_INTERFACE
    } IExtensibleObjectVtbl;

    interface IExtensibleObject
    {
        CONST_VTBL struct IExtensibleObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtensibleObject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtensibleObject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtensibleObject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtensibleObject_GetAutomationObject(This,Name,pParent,ppDisp)	\
    (This)->lpVtbl -> GetAutomationObject(This,Name,pParent,ppDisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IExtensibleObject_GetAutomationObject_Proxy( 
    IExtensibleObject * This,
    /* [in] */ BSTR Name,
    /* [in] */ IExtensibleObjectSite *pParent,
    /* [out] */ IDispatch **ppDisp);


void __RPC_STUB IExtensibleObject_GetAutomationObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtensibleObject_INTERFACE_DEFINED__ */



#ifndef __vsTaskCategories_MODULE_DEFINED__
#define __vsTaskCategories_MODULE_DEFINED__


/* module vsTaskCategories */
/* [dllname][uuid] */ 

const LPSTR vsTaskCategoryBuildCompile	=	"BuildCompile";

const LPSTR vsTaskCategoryComment	=	"Comment";

const LPSTR vsTaskCategoryShortcut	=	"Shortcut";

const LPSTR vsTaskCategoryUser	=	"User";

const LPSTR vsTaskCategoryMisc	=	"Misc";

const LPSTR vsTaskCategoryHTML	=	"HTML";

#endif /* __vsTaskCategories_MODULE_DEFINED__ */


#ifndef __Constants_MODULE_DEFINED__
#define __Constants_MODULE_DEFINED__


/* module Constants */
/* [dllname][uuid] */ 

const LPSTR vsDocumentKindText	=	"{8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A}";

const LPSTR vsDocumentKindHTML	=	"{C76D83F8-A489-11D0-8195-00A0C91BBEE3}";

const LPSTR vsDocumentKindResource	=	"{00000000-0000-0000-0000-000000000000}";

const LPSTR vsDocumentKindBinary	=	"{25834150-CD7E-11D0-92DF-00A0C9138C45}";

const LPSTR vsViewKindPrimary	=	"{00000000-0000-0000-0000-000000000000}";

const LPSTR vsViewKindAny	=	"{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}";

const LPSTR vsViewKindDebugging	=	"{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindCode	=	"{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindDesigner	=	"{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsViewKindTextView	=	"{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";

const LPSTR vsWindowKindTaskList	=	"{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";

const LPSTR vsWindowKindToolbox	=	"{B1E99781-AB81-11D0-B683-00AA00A3EE26}";

const LPSTR vsWindowKindCallStack	=	"{0504FF91-9D61-11D0-A794-00A0C9110051}";

const LPSTR vsWindowKindThread	=	"{E62CE6A0-B439-11D0-A79D-00A0C9110051}";

const LPSTR vsWindowKindLocals	=	"{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";

const LPSTR vsWindowKindAutoLocals	=	"{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";

const LPSTR vsWindowKindWatch	=	"{90243340-BD7A-11D0-93EF-00A0C90F2734}";

const LPSTR vsWindowKindProperties	=	"{EEFA5220-E298-11D0-8F78-00A0C9110057}";

const LPSTR vsWindowKindSolutionExplorer	=	"{3AE79031-E1BC-11D0-8F78-00A0C9110057}";

const LPSTR vsWindowKindOutput	=	"{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";

const LPSTR vsWindowKindObjectBrowser	=	"{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";

const LPSTR vsWindowKindMacroExplorer	=	"{07CD18B4-3BA1-11D2-890A-0060083196C6}";

const LPSTR vsWindowKindDynamicHelp	=	"{66DBA47C-61DF-11D2-AA79-00C04F990343}";

const LPSTR vsWindowKindClassView	=	"{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";

const LPSTR vsWindowKindResourceView	=	"{2D7728C2-DE0A-45b5-99AA-89B609DFDE73}";

const LPSTR vsWindowKindDocumentOutline	=	"{25F7E850-FFA1-11D0-B63F-00A0C922E851}";

const LPSTR vsWindowKindServerExplorer	=	"{74946827-37A0-11D2-A273-00C04F8EF4FF}";

const LPSTR vsWindowKindCommandWindow	=	"{28836128-FC2C-11D2-A433-00C04F72D18A}";

const LPSTR vsWindowKindFindSymbol	=	"{53024D34-0EF5-11D3-87E0-00C04F7971A5}";

const LPSTR vsWindowKindFindSymbolResults	=	"{68487888-204A-11D3-87EB-00C04F7971A5}";

const LPSTR vsWindowKindFindReplace	=	"{CF2DDC32-8CAD-11D2-9302-005345000000}";

const LPSTR vsWindowKindFindResults1	=	"{0F887920-C2B6-11D2-9375-0080C747D9A0}";

const LPSTR vsWindowKindFindResults2	=	"{0F887921-C2B6-11D2-9375-0080C747D9A0}";

const LPSTR vsWindowKindMainWindow	=	"{9DDABE98-1D02-11D3-89A1-00C04F688DDE}";

const LPSTR vsWindowKindLinkedWindowFrame	=	"{9DDABE99-1D02-11D3-89A1-00C04F688DDE}";

const LPSTR vsWindowKindWebBrowser	=	"{E8B06F52-6D01-11D2-AA7D-00C04F990343}";

const LPSTR vsWizardAddSubProject	=	"{0F90E1D2-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsWizardAddItem	=	"{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsWizardNewProject	=	"{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";

const LPSTR vsProjectKindMisc	=	"{66A2671D-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemsKindMisc	=	"{66A2671E-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemKindMisc	=	"{66A2671F-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectKindUnmodeled	=	"{67294A52-A4F0-11D2-AA88-00C04F688DDE}";

const LPSTR vsProjectKindSolutionItems	=	"{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemsKindSolutionItems	=	"{66A26721-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectItemKindSolutionItems	=	"{66A26722-8FB5-11D2-AA7E-00C04F688DDE}";

const LPSTR vsProjectsKindSolution	=	"{96410B9F-3542-4A14-877F-BC7227B51D3B}";

const LPSTR vsAddInCmdGroup	=	"{1E58696E-C90F-11D2-AAB2-00C04F688DDE}";

const LPSTR vsContextSolutionBuilding	=	"{ADFC4E60-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextDebugging	=	"{ADFC4E61-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextFullScreenMode	=	"{ADFC4E62-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextDesignMode	=	"{ADFC4E63-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextNoSolution	=	"{ADFC4E64-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextEmptySolution	=	"{ADFC4E65-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextSolutionHasSingleProject	=	"{ADFC4E66-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextSolutionHasMultipleProjects	=	"{93694FA0-0397-11D1-9F4E-00A0C911004F}";

const LPSTR vsContextMacroRecording	=	"{04BBF6A5-4697-11D2-890E-0060083196C6}";

const LPSTR vsContextMacroRecordingToolbar	=	"{85A70471-270A-11D2-88F9-0060083196C6}";

const LPSTR vsMiscFilesProjectUniqueName	=	"<MiscFiles>";

const LPSTR vsSolutionItemsProjectUniqueName	=	"<SolnItems>";

const LPSTR vsProjectItemKindPhysicalFile	=	"{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindPhysicalFolder	=	"{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindVirtualFolder	=	"{6BB5F8F0-4483-11D3-8BCF-00C04F8EC28C}";

const LPSTR vsProjectItemKindSubProject	=	"{EA6618E8-6E24-4528-94BE-6889FE16485C}";

/* [hidden] */ const LPSTR vsext_vk_Primary	=	"{00000000-0000-0000-0000-000000000000}";

/* [hidden] */ const LPSTR vsext_vk_Debugging	=	"{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_Code	=	"{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_Designer	=	"{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_vk_TextView	=	"{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";

/* [hidden] */ const LPSTR vsext_wk_TaskList	=	"{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";

/* [hidden] */ const LPSTR vsext_wk_Toolbox	=	"{B1E99781-AB81-11D0-B683-00AA00A3EE26}";

/* [hidden] */ const LPSTR vsext_wk_CallStackWindow	=	"{0504FF91-9D61-11D0-A794-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_ThreadWindow	=	"{E62CE6A0-B439-11D0-A79D-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_LocalsWindow	=	"{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";

/* [hidden] */ const LPSTR vsext_wk_AutoLocalsWindow	=	"{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_WatchWindow	=	"{90243340-BD7A-11D0-93EF-00A0C90F2734}";

/* [hidden] */ const LPSTR vsext_wk_ImmedWindow	=	"{98731960-965C-11D0-A78F-00A0C9110051}";

/* [hidden] */ const LPSTR vsext_wk_PropertyBrowser	=	"{EEFA5220-E298-11D0-8F78-00A0C9110057}";

/* [hidden] */ const LPSTR vsext_wk_SProjectWindow	=	"{3AE79031-E1BC-11D0-8F78-00A0C9110057}";

/* [hidden] */ const LPSTR vsext_wk_OutputWindow	=	"{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";

/* [hidden] */ const LPSTR vsext_wk_ObjectBrowser	=	"{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";

/* [hidden] */ const LPSTR vsext_wk_ContextWindow	=	"{66DBA47C-61DF-11D2-AA79-00C04F990343}";

/* [hidden] */ const LPSTR vsext_wk_ClassView	=	"{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";

/* [hidden] */ const LPSTR vsext_GUID_AddItemWizard	=	"{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";

/* [hidden] */ const LPSTR vsext_GUID_NewProjectWizard	=	"{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";

/* [hidden] */ const LPSTR dsCPP	=	"C/C++";

/* [hidden] */ const LPSTR dsHTML_IE3	=	"HTML - IE 3.0";

/* [hidden] */ const LPSTR dsHTML_RFC1866	=	"HTML 2.0 (RFC 1866)";

/* [hidden] */ const LPSTR dsFortran_Fixed	=	"Fortran Fixed";

/* [hidden] */ const LPSTR dsFortran_Free	=	"Fortran Free";

/* [hidden] */ const LPSTR dsJava	=	"Java";

/* [hidden] */ const LPSTR dsVBSMacro	=	"VBS Macro";

/* [hidden] */ const LPSTR dsIDL	=	"ODL/IDL";

/* [helpstring] */ const LPSTR vsCATIDSolution	=	"{52AEFF70-BBD8-11d2-8598-006097C68E81}";

/* [helpstring] */ const LPSTR vsCATIDSolutionBrowseObject	=	"{A2392464-7C22-11d3-BDCA-00C04F688E50}";

/* [helpstring] */ const LPSTR vsCATIDMiscFilesProject	=	"{610d4612-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDMiscFilesProjectItem	=	"{610d4613-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDGenericProject	=	"{610d4616-d0d5-11d2-8599-006097c68e81}";

/* [helpstring] */ const LPSTR vsCATIDDocument	=	"{610d4611-d0d5-11d2-8599-006097c68e81}";

#endif /* __Constants_MODULE_DEFINED__ */

#ifndef ___FindEvents_INTERFACE_DEFINED__
#define ___FindEvents_INTERFACE_DEFINED__

/* interface _FindEvents */
/* [object][helpstringcontext][helpstring][helpcontext][oleautomation][uuid] */ 


EXTERN_C const IID IID__FindEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c5331acd-c5d5-11D2-8598-006097c68e81")
    _FindEvents : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct _FindEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _FindEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _FindEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _FindEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _FindEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _FindEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _FindEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _FindEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _FindEventsVtbl;

    interface _FindEvents
    {
        CONST_VTBL struct _FindEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _FindEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _FindEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _FindEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _FindEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _FindEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _FindEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _FindEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___FindEvents_INTERFACE_DEFINED__ */


#ifndef ___dispFindEvents_DISPINTERFACE_DEFINED__
#define ___dispFindEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispFindEvents */
/* [uuid] */ 


EXTERN_C const IID DIID__dispFindEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("c5331ace-c5d5-11D2-8598-006097c68e81")
    _dispFindEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispFindEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispFindEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispFindEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispFindEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispFindEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispFindEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispFindEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispFindEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispFindEventsVtbl;

    interface _dispFindEvents
    {
        CONST_VTBL struct _dispFindEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispFindEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispFindEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispFindEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispFindEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispFindEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispFindEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispFindEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispFindEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_FindEvents;

#ifdef __cplusplus

class DECLSPEC_UUID("811322bc-042d-4828-bff2-640ef8b7209f")
FindEvents;
#endif

#ifndef __IVsTextEditGeneral_INTERFACE_DEFINED__
#define __IVsTextEditGeneral_INTERFACE_DEFINED__

/* interface IVsTextEditGeneral */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditGeneral;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2e1bfd1c-5b26-4aca-b97b-ed9d261ba3e7")
    IVsTextEditGeneral : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_SelectionMargin( 
            /* [in] */ VARIANT_BOOL fSelectionMargin) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionMargin( 
            /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_GoToAnchorAfterEscape( 
            /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_GoToAnchorAfterEscape( 
            /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_DragNDropTextEditing( 
            /* [in] */ VARIANT_BOOL fDragNDropTextEditing) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_DragNDropTextEditing( 
            /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_UndoCaretActions( 
            /* [in] */ VARIANT_BOOL fUndoCaretActions) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_UndoCaretActions( 
            /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginIndicatorBar( 
            /* [in] */ VARIANT_BOOL fMarginIndicatorBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginIndicatorBar( 
            /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalScrollBar( 
            /* [in] */ VARIANT_BOOL fHorizontalScrollBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalScrollBar( 
            /* [in] */ VARIANT_BOOL fVerticalScrollBar) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoDelimiterHighlighting( 
            /* [in] */ VARIANT_BOOL fHighlighting) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoDelimiterHighlighting( 
            /* [retval][out] */ VARIANT_BOOL *pfHighlighting) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditGeneralVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditGeneral * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditGeneral * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditGeneral * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditGeneral * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditGeneral * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditGeneral * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditGeneral * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SelectionMargin )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fSelectionMargin);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionMargin )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GoToAnchorAfterEscape )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GoToAnchorAfterEscape )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DragNDropTextEditing )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fDragNDropTextEditing);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DragNDropTextEditing )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UndoCaretActions )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fUndoCaretActions);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UndoCaretActions )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginIndicatorBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fMarginIndicatorBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginIndicatorBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fHorizontalScrollBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fVerticalScrollBar);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalScrollBar )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoDelimiterHighlighting )( 
            IVsTextEditGeneral * This,
            /* [in] */ VARIANT_BOOL fHighlighting);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoDelimiterHighlighting )( 
            IVsTextEditGeneral * This,
            /* [retval][out] */ VARIANT_BOOL *pfHighlighting);
        
        END_INTERFACE
    } IVsTextEditGeneralVtbl;

    interface IVsTextEditGeneral
    {
        CONST_VTBL struct IVsTextEditGeneralVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditGeneral_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditGeneral_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditGeneral_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditGeneral_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditGeneral_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditGeneral_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditGeneral_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditGeneral_put_SelectionMargin(This,fSelectionMargin)	\
    (This)->lpVtbl -> put_SelectionMargin(This,fSelectionMargin)

#define IVsTextEditGeneral_get_SelectionMargin(This,pfSelectionMargin)	\
    (This)->lpVtbl -> get_SelectionMargin(This,pfSelectionMargin)

#define IVsTextEditGeneral_put_GoToAnchorAfterEscape(This,fGoToAnchorAfterEscape)	\
    (This)->lpVtbl -> put_GoToAnchorAfterEscape(This,fGoToAnchorAfterEscape)

#define IVsTextEditGeneral_get_GoToAnchorAfterEscape(This,pfGoToAnchorAfterEscape)	\
    (This)->lpVtbl -> get_GoToAnchorAfterEscape(This,pfGoToAnchorAfterEscape)

#define IVsTextEditGeneral_put_DragNDropTextEditing(This,fDragNDropTextEditing)	\
    (This)->lpVtbl -> put_DragNDropTextEditing(This,fDragNDropTextEditing)

#define IVsTextEditGeneral_get_DragNDropTextEditing(This,pfDragNDropTextEditing)	\
    (This)->lpVtbl -> get_DragNDropTextEditing(This,pfDragNDropTextEditing)

#define IVsTextEditGeneral_put_UndoCaretActions(This,fUndoCaretActions)	\
    (This)->lpVtbl -> put_UndoCaretActions(This,fUndoCaretActions)

#define IVsTextEditGeneral_get_UndoCaretActions(This,pfUndoCaretActions)	\
    (This)->lpVtbl -> get_UndoCaretActions(This,pfUndoCaretActions)

#define IVsTextEditGeneral_put_MarginIndicatorBar(This,fMarginIndicatorBar)	\
    (This)->lpVtbl -> put_MarginIndicatorBar(This,fMarginIndicatorBar)

#define IVsTextEditGeneral_get_MarginIndicatorBar(This,pfMarginIndicatorBar)	\
    (This)->lpVtbl -> get_MarginIndicatorBar(This,pfMarginIndicatorBar)

#define IVsTextEditGeneral_put_HorizontalScrollBar(This,fHorizontalScrollBar)	\
    (This)->lpVtbl -> put_HorizontalScrollBar(This,fHorizontalScrollBar)

#define IVsTextEditGeneral_get_HorizontalScrollBar(This,pfHorizontalScrollBar)	\
    (This)->lpVtbl -> get_HorizontalScrollBar(This,pfHorizontalScrollBar)

#define IVsTextEditGeneral_put_VerticalScrollBar(This,fVerticalScrollBar)	\
    (This)->lpVtbl -> put_VerticalScrollBar(This,fVerticalScrollBar)

#define IVsTextEditGeneral_get_VerticalScrollBar(This,pfVerticalScrollBar)	\
    (This)->lpVtbl -> get_VerticalScrollBar(This,pfVerticalScrollBar)

#define IVsTextEditGeneral_put_AutoDelimiterHighlighting(This,fHighlighting)	\
    (This)->lpVtbl -> put_AutoDelimiterHighlighting(This,fHighlighting)

#define IVsTextEditGeneral_get_AutoDelimiterHighlighting(This,pfHighlighting)	\
    (This)->lpVtbl -> get_AutoDelimiterHighlighting(This,pfHighlighting)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_SelectionMargin_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fSelectionMargin);


void __RPC_STUB IVsTextEditGeneral_put_SelectionMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_SelectionMargin_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfSelectionMargin);


void __RPC_STUB IVsTextEditGeneral_get_SelectionMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_GoToAnchorAfterEscape_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fGoToAnchorAfterEscape);


void __RPC_STUB IVsTextEditGeneral_put_GoToAnchorAfterEscape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_GoToAnchorAfterEscape_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfGoToAnchorAfterEscape);


void __RPC_STUB IVsTextEditGeneral_get_GoToAnchorAfterEscape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_DragNDropTextEditing_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fDragNDropTextEditing);


void __RPC_STUB IVsTextEditGeneral_put_DragNDropTextEditing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_DragNDropTextEditing_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfDragNDropTextEditing);


void __RPC_STUB IVsTextEditGeneral_get_DragNDropTextEditing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_UndoCaretActions_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fUndoCaretActions);


void __RPC_STUB IVsTextEditGeneral_put_UndoCaretActions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_UndoCaretActions_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfUndoCaretActions);


void __RPC_STUB IVsTextEditGeneral_get_UndoCaretActions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_MarginIndicatorBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fMarginIndicatorBar);


void __RPC_STUB IVsTextEditGeneral_put_MarginIndicatorBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_MarginIndicatorBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfMarginIndicatorBar);


void __RPC_STUB IVsTextEditGeneral_get_MarginIndicatorBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_HorizontalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fHorizontalScrollBar);


void __RPC_STUB IVsTextEditGeneral_put_HorizontalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_HorizontalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfHorizontalScrollBar);


void __RPC_STUB IVsTextEditGeneral_get_HorizontalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_VerticalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fVerticalScrollBar);


void __RPC_STUB IVsTextEditGeneral_put_VerticalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_VerticalScrollBar_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfVerticalScrollBar);


void __RPC_STUB IVsTextEditGeneral_get_VerticalScrollBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_put_AutoDelimiterHighlighting_Proxy( 
    IVsTextEditGeneral * This,
    /* [in] */ VARIANT_BOOL fHighlighting);


void __RPC_STUB IVsTextEditGeneral_put_AutoDelimiterHighlighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditGeneral_get_AutoDelimiterHighlighting_Proxy( 
    IVsTextEditGeneral * This,
    /* [retval][out] */ VARIANT_BOOL *pfHighlighting);


void __RPC_STUB IVsTextEditGeneral_get_AutoDelimiterHighlighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditGeneral_INTERFACE_DEFINED__ */


#ifndef __IVsTextEditPerLanguage_INTERFACE_DEFINED__
#define __IVsTextEditPerLanguage_INTERFACE_DEFINED__

/* interface IVsTextEditPerLanguage */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditPerLanguage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5943bd7e-d722-42db-a251-fe2add8711ea")
    IVsTextEditPerLanguage : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_TabSize( 
            /* [in] */ short iTabSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ short *piTabSize) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IndentSize( 
            /* [in] */ short iIndentSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ short *piIndentSize) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertTabs( 
            /* [in] */ VARIANT_BOOL fInsertTabs) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertTabs( 
            /* [retval][out] */ VARIANT_BOOL *pfInsertTabs) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_IndentStyle( 
            /* [in] */ vsIndentStyle indentStyle) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentStyle( 
            /* [retval][out] */ vsIndentStyle *pfIndentStyle) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoListMembers( 
            /* [in] */ VARIANT_BOOL fAutoListMembers) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoListMembers( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoListParams( 
            /* [in] */ VARIANT_BOOL fAutoListParams) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoListParams( 
            /* [retval][out] */ VARIANT_BOOL *pfAutoListParams) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_VirtualSpace( 
            /* [in] */ VARIANT_BOOL fVirtualSpace) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualSpace( 
            /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableLeftClickForURLs( 
            /* [in] */ VARIANT_BOOL fHotURLs) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableLeftClickForURLs( 
            /* [retval][out] */ VARIANT_BOOL *pfHotURLs) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ VARIANT_BOOL fWrap) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ VARIANT_BOOL *pfWrap) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowLineNumbers( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowLineNumbers( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowNavigationBar( 
            /* [in] */ VARIANT_BOOL fShow) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowNavigationBar( 
            /* [retval][out] */ VARIANT_BOOL *pfShow) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_HideAdvancedMembers( 
            /* [in] */ VARIANT_BOOL fHide) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_HideAdvancedMembers( 
            /* [retval][out] */ VARIANT_BOOL *pfHide) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditPerLanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditPerLanguage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditPerLanguage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditPerLanguage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabSize )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ short iTabSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ short *piTabSize);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndentSize )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ short iIndentSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ short *piIndentSize);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertTabs )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fInsertTabs);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertTabs )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfInsertTabs);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndentStyle )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ vsIndentStyle indentStyle);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentStyle )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ vsIndentStyle *pfIndentStyle);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoListMembers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fAutoListMembers);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoListMembers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoListParams )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fAutoListParams);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoListParams )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfAutoListParams);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VirtualSpace )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fVirtualSpace);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualSpace )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableLeftClickForURLs )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fHotURLs);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableLeftClickForURLs )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfHotURLs);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fWrap);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfWrap);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowLineNumbers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowLineNumbers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowNavigationBar )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fShow);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowNavigationBar )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfShow);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HideAdvancedMembers )( 
            IVsTextEditPerLanguage * This,
            /* [in] */ VARIANT_BOOL fHide);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HideAdvancedMembers )( 
            IVsTextEditPerLanguage * This,
            /* [retval][out] */ VARIANT_BOOL *pfHide);
        
        END_INTERFACE
    } IVsTextEditPerLanguageVtbl;

    interface IVsTextEditPerLanguage
    {
        CONST_VTBL struct IVsTextEditPerLanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditPerLanguage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditPerLanguage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditPerLanguage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditPerLanguage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditPerLanguage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditPerLanguage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditPerLanguage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditPerLanguage_put_TabSize(This,iTabSize)	\
    (This)->lpVtbl -> put_TabSize(This,iTabSize)

#define IVsTextEditPerLanguage_get_TabSize(This,piTabSize)	\
    (This)->lpVtbl -> get_TabSize(This,piTabSize)

#define IVsTextEditPerLanguage_put_IndentSize(This,iIndentSize)	\
    (This)->lpVtbl -> put_IndentSize(This,iIndentSize)

#define IVsTextEditPerLanguage_get_IndentSize(This,piIndentSize)	\
    (This)->lpVtbl -> get_IndentSize(This,piIndentSize)

#define IVsTextEditPerLanguage_put_InsertTabs(This,fInsertTabs)	\
    (This)->lpVtbl -> put_InsertTabs(This,fInsertTabs)

#define IVsTextEditPerLanguage_get_InsertTabs(This,pfInsertTabs)	\
    (This)->lpVtbl -> get_InsertTabs(This,pfInsertTabs)

#define IVsTextEditPerLanguage_put_IndentStyle(This,indentStyle)	\
    (This)->lpVtbl -> put_IndentStyle(This,indentStyle)

#define IVsTextEditPerLanguage_get_IndentStyle(This,pfIndentStyle)	\
    (This)->lpVtbl -> get_IndentStyle(This,pfIndentStyle)

#define IVsTextEditPerLanguage_put_AutoListMembers(This,fAutoListMembers)	\
    (This)->lpVtbl -> put_AutoListMembers(This,fAutoListMembers)

#define IVsTextEditPerLanguage_get_AutoListMembers(This,pfAutoListMembers)	\
    (This)->lpVtbl -> get_AutoListMembers(This,pfAutoListMembers)

#define IVsTextEditPerLanguage_put_AutoListParams(This,fAutoListParams)	\
    (This)->lpVtbl -> put_AutoListParams(This,fAutoListParams)

#define IVsTextEditPerLanguage_get_AutoListParams(This,pfAutoListParams)	\
    (This)->lpVtbl -> get_AutoListParams(This,pfAutoListParams)

#define IVsTextEditPerLanguage_put_VirtualSpace(This,fVirtualSpace)	\
    (This)->lpVtbl -> put_VirtualSpace(This,fVirtualSpace)

#define IVsTextEditPerLanguage_get_VirtualSpace(This,pfVirtualSpace)	\
    (This)->lpVtbl -> get_VirtualSpace(This,pfVirtualSpace)

#define IVsTextEditPerLanguage_put_EnableLeftClickForURLs(This,fHotURLs)	\
    (This)->lpVtbl -> put_EnableLeftClickForURLs(This,fHotURLs)

#define IVsTextEditPerLanguage_get_EnableLeftClickForURLs(This,pfHotURLs)	\
    (This)->lpVtbl -> get_EnableLeftClickForURLs(This,pfHotURLs)

#define IVsTextEditPerLanguage_put_WordWrap(This,fWrap)	\
    (This)->lpVtbl -> put_WordWrap(This,fWrap)

#define IVsTextEditPerLanguage_get_WordWrap(This,pfWrap)	\
    (This)->lpVtbl -> get_WordWrap(This,pfWrap)

#define IVsTextEditPerLanguage_put_ShowLineNumbers(This,fShow)	\
    (This)->lpVtbl -> put_ShowLineNumbers(This,fShow)

#define IVsTextEditPerLanguage_get_ShowLineNumbers(This,pfShow)	\
    (This)->lpVtbl -> get_ShowLineNumbers(This,pfShow)

#define IVsTextEditPerLanguage_put_ShowNavigationBar(This,fShow)	\
    (This)->lpVtbl -> put_ShowNavigationBar(This,fShow)

#define IVsTextEditPerLanguage_get_ShowNavigationBar(This,pfShow)	\
    (This)->lpVtbl -> get_ShowNavigationBar(This,pfShow)

#define IVsTextEditPerLanguage_put_HideAdvancedMembers(This,fHide)	\
    (This)->lpVtbl -> put_HideAdvancedMembers(This,fHide)

#define IVsTextEditPerLanguage_get_HideAdvancedMembers(This,pfHide)	\
    (This)->lpVtbl -> get_HideAdvancedMembers(This,pfHide)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_TabSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ short iTabSize);


void __RPC_STUB IVsTextEditPerLanguage_put_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_TabSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ short *piTabSize);


void __RPC_STUB IVsTextEditPerLanguage_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_IndentSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ short iIndentSize);


void __RPC_STUB IVsTextEditPerLanguage_put_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_IndentSize_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ short *piIndentSize);


void __RPC_STUB IVsTextEditPerLanguage_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_InsertTabs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fInsertTabs);


void __RPC_STUB IVsTextEditPerLanguage_put_InsertTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_InsertTabs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfInsertTabs);


void __RPC_STUB IVsTextEditPerLanguage_get_InsertTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_IndentStyle_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ vsIndentStyle indentStyle);


void __RPC_STUB IVsTextEditPerLanguage_put_IndentStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_IndentStyle_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ vsIndentStyle *pfIndentStyle);


void __RPC_STUB IVsTextEditPerLanguage_get_IndentStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_AutoListMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fAutoListMembers);


void __RPC_STUB IVsTextEditPerLanguage_put_AutoListMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_AutoListMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoListMembers);


void __RPC_STUB IVsTextEditPerLanguage_get_AutoListMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_AutoListParams_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fAutoListParams);


void __RPC_STUB IVsTextEditPerLanguage_put_AutoListParams_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_AutoListParams_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfAutoListParams);


void __RPC_STUB IVsTextEditPerLanguage_get_AutoListParams_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_VirtualSpace_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fVirtualSpace);


void __RPC_STUB IVsTextEditPerLanguage_put_VirtualSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_VirtualSpace_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfVirtualSpace);


void __RPC_STUB IVsTextEditPerLanguage_get_VirtualSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_EnableLeftClickForURLs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fHotURLs);


void __RPC_STUB IVsTextEditPerLanguage_put_EnableLeftClickForURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_EnableLeftClickForURLs_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfHotURLs);


void __RPC_STUB IVsTextEditPerLanguage_get_EnableLeftClickForURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_WordWrap_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fWrap);


void __RPC_STUB IVsTextEditPerLanguage_put_WordWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_WordWrap_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfWrap);


void __RPC_STUB IVsTextEditPerLanguage_get_WordWrap_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_ShowLineNumbers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB IVsTextEditPerLanguage_put_ShowLineNumbers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_ShowLineNumbers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB IVsTextEditPerLanguage_get_ShowLineNumbers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_ShowNavigationBar_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fShow);


void __RPC_STUB IVsTextEditPerLanguage_put_ShowNavigationBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_ShowNavigationBar_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfShow);


void __RPC_STUB IVsTextEditPerLanguage_get_ShowNavigationBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_put_HideAdvancedMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [in] */ VARIANT_BOOL fHide);


void __RPC_STUB IVsTextEditPerLanguage_put_HideAdvancedMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditPerLanguage_get_HideAdvancedMembers_Proxy( 
    IVsTextEditPerLanguage * This,
    /* [retval][out] */ VARIANT_BOOL *pfHide);


void __RPC_STUB IVsTextEditPerLanguage_get_HideAdvancedMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditPerLanguage_INTERFACE_DEFINED__ */


#ifndef __IVsTextEditFonts_INTERFACE_DEFINED__
#define __IVsTextEditFonts_INTERFACE_DEFINED__

/* interface IVsTextEditFonts */
/* [restricted][hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsTextEditFonts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f39ab913-e6c9-4546-a265-1e43f8de924c")
    IVsTextEditFonts : public IDispatch
    {
    public:
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontFamily( 
            /* [in] */ BSTR bstrFontFamily) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontFamily( 
            /* [retval][out] */ BSTR *pbstrFontFamily) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontCharacterSet( 
            /* [in] */ vsFontCharSet bstrFontCharacterSet) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontCharacterSet( 
            /* [retval][out] */ vsFontCharSet *pbstrCharacterSet) = 0;
        
        virtual /* [propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ short iFontSize) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ short *piFontSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsTextEditFontsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsTextEditFonts * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsTextEditFonts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsTextEditFonts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsTextEditFonts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsTextEditFonts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsTextEditFonts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsTextEditFonts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontFamily )( 
            IVsTextEditFonts * This,
            /* [in] */ BSTR bstrFontFamily);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontFamily )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ BSTR *pbstrFontFamily);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontCharacterSet )( 
            IVsTextEditFonts * This,
            /* [in] */ vsFontCharSet bstrFontCharacterSet);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontCharacterSet )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ vsFontCharSet *pbstrCharacterSet);
        
        /* [propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            IVsTextEditFonts * This,
            /* [in] */ short iFontSize);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            IVsTextEditFonts * This,
            /* [retval][out] */ short *piFontSize);
        
        END_INTERFACE
    } IVsTextEditFontsVtbl;

    interface IVsTextEditFonts
    {
        CONST_VTBL struct IVsTextEditFontsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsTextEditFonts_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsTextEditFonts_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsTextEditFonts_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsTextEditFonts_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsTextEditFonts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsTextEditFonts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsTextEditFonts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsTextEditFonts_put_FontFamily(This,bstrFontFamily)	\
    (This)->lpVtbl -> put_FontFamily(This,bstrFontFamily)

#define IVsTextEditFonts_get_FontFamily(This,pbstrFontFamily)	\
    (This)->lpVtbl -> get_FontFamily(This,pbstrFontFamily)

#define IVsTextEditFonts_put_FontCharacterSet(This,bstrFontCharacterSet)	\
    (This)->lpVtbl -> put_FontCharacterSet(This,bstrFontCharacterSet)

#define IVsTextEditFonts_get_FontCharacterSet(This,pbstrCharacterSet)	\
    (This)->lpVtbl -> get_FontCharacterSet(This,pbstrCharacterSet)

#define IVsTextEditFonts_put_FontSize(This,iFontSize)	\
    (This)->lpVtbl -> put_FontSize(This,iFontSize)

#define IVsTextEditFonts_get_FontSize(This,piFontSize)	\
    (This)->lpVtbl -> get_FontSize(This,piFontSize)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontFamily_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ BSTR bstrFontFamily);


void __RPC_STUB IVsTextEditFonts_put_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontFamily_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ BSTR *pbstrFontFamily);


void __RPC_STUB IVsTextEditFonts_get_FontFamily_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontCharacterSet_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ vsFontCharSet bstrFontCharacterSet);


void __RPC_STUB IVsTextEditFonts_put_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontCharacterSet_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ vsFontCharSet *pbstrCharacterSet);


void __RPC_STUB IVsTextEditFonts_get_FontCharacterSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_put_FontSize_Proxy( 
    IVsTextEditFonts * This,
    /* [in] */ short iFontSize);


void __RPC_STUB IVsTextEditFonts_put_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE IVsTextEditFonts_get_FontSize_Proxy( 
    IVsTextEditFonts * This,
    /* [retval][out] */ short *piFontSize);


void __RPC_STUB IVsTextEditFonts_get_FontSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsTextEditFonts_INTERFACE_DEFINED__ */


#ifndef __HTMLWindow_INTERFACE_DEFINED__
#define __HTMLWindow_INTERFACE_DEFINED__

/* interface HTMLWindow */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_HTMLWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f6576203-fbce-477e-a66b-eda237bb68a7")
    HTMLWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentTab( 
            /* [retval][out] */ vsHTMLTabs *pTab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CurrentTab( 
            /* [in] */ vsHTMLTabs Tab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentTabObject( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HTMLWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            HTMLWindow * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HTMLWindow * This,
            /* [retval][out] */ Window **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTab )( 
            HTMLWindow * This,
            /* [retval][out] */ vsHTMLTabs *pTab);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentTab )( 
            HTMLWindow * This,
            /* [in] */ vsHTMLTabs Tab);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentTabObject )( 
            HTMLWindow * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } HTMLWindowVtbl;

    interface HTMLWindow
    {
        CONST_VTBL struct HTMLWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define HTMLWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define HTMLWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define HTMLWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define HTMLWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define HTMLWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define HTMLWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define HTMLWindow_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define HTMLWindow_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define HTMLWindow_get_CurrentTab(This,pTab)	\
    (This)->lpVtbl -> get_CurrentTab(This,pTab)

#define HTMLWindow_put_CurrentTab(This,Tab)	\
    (This)->lpVtbl -> put_CurrentTab(This,Tab)

#define HTMLWindow_get_CurrentTabObject(This,ppObj)	\
    (This)->lpVtbl -> get_CurrentTabObject(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_DTE_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB HTMLWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_Parent_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ Window **ppParent);


void __RPC_STUB HTMLWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_CurrentTab_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ vsHTMLTabs *pTab);


void __RPC_STUB HTMLWindow_get_CurrentTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_put_CurrentTab_Proxy( 
    HTMLWindow * This,
    /* [in] */ vsHTMLTabs Tab);


void __RPC_STUB HTMLWindow_put_CurrentTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE HTMLWindow_get_CurrentTabObject_Proxy( 
    HTMLWindow * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB HTMLWindow_get_CurrentTabObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __HTMLWindow_INTERFACE_DEFINED__ */

#endif /* __EnvDTE_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_dte_0287 */
/* [local] */ 

#define SID_SDTE	IID__DTE
#ifdef Delete_defined
#define Delete delete
#endif
#ifdef ReplaceText_defined
#ifdef UNICODE
#define ReplaceText ReplaceTextW
#else
#define ReplaceText ReplaceTextA
#endif
#endif


extern RPC_IF_HANDLE __MIDL_itf_dte_0287_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dte_0287_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


