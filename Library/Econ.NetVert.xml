<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Econ.NetVert</name>
    <version>2.0.0.3</version>
    <fullname>Econ.NetVert, Version=2.0.0.3, Culture=neutral, PublicKeyToken=null</fullname>
  </assembly>
  <members>
    <member name="T:Econ.NetVert.ASPXConverter">
      <summary>
 Converts ASP.NET code. 
 </summary>
 <example>... 
 <code lang="Visual Basic">
 </code>
 <code lang="C#">
 </code>
 ... 
 <code lang="Visual Basic">
 </code>
 <code lang="C#">
 </code>
 </example>
 <remarks>
 Results of the <b>Convert</b>-Functions are returned as instances of this class. 
 </remarks>
 <history>
   [esen]  20.04.2006  created 
 </history></member>
    <member name="M:Econ.NetVert.ASPXConverter.Convert(System.String,Econ.NetVert.ConverterLanguagesAutodetectable)">
      <summary>
 Convert ASP.NET code using language-autodetection. 
 </summary>
 <param name="aspxSource">The ASPX source code.</param>
 <returns>New instance of class ASPXConverter</returns>
 <remarks>
 Supported is only ASP.NET code with inline serverside code of the languages Visual Basic .NET or C#. 
 </remarks></member>
    <member name="P:Econ.NetVert.ASPXConverter.HasError">
      <summary>
 Is an error detected. 
 </summary>
 <returns>True if an error is detected.</returns>
 <remarks>
 If an error is detected the property <b>ErrorText</b> contains the details about the error.<br />
 If no error is detected,the property <b>CSharpSource</b> contains the result. 
 </remarks></member>
    <member name="P:Econ.NetVert.ASPXConverter.ErrorText">
      <summary>
 Error description. 
 </summary>
 <returns />
 <remarks>
 If the error is a parser error, 5 codelines are returned as well to show the position of error. 
 </remarks></member>
    <member name="P:Econ.NetVert.ASPXConverter.ASPXOutputSource">
      <summary>
 The result ASPX code. 
 </summary>
 <returns />
 <remarks>
 Returns the converted ASP.NET source code, if no errors are detected. 
 </remarks></member>
    <member name="P:Econ.NetVert.ASPXConverter.ConverterLanguage">
      <summary>
 The used language for the conversion procedure. 
 </summary>
 <returns />
 <remarks>
 </remarks></member>
    <member name="T:Econ.NetVert.ASPXFileConverter">
      <summary>
 Converts ASP.NET files. 
 </summary>
 <example>... 
 <code lang="Visual Basic">
 </code>
 <code lang="C#">
 </code>
 ... 
 <code lang="Visual Basic">
 </code>
 <code lang="C#">
 </code>
 </example>
 <history>
   [esen]  01.05.2006  created 
 </history></member>
    <member name="E:Econ.NetVert.ASPXFileConverter.BeforeFileProcessed" />
    <member name="T:Econ.NetVert.ASPXFileConverter.BeforeFileProcessedEventHandler">
      <summary>
 This event is raised for each file, before the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="E:Econ.NetVert.ASPXFileConverter.AfterFileProcessed" />
    <member name="T:Econ.NetVert.ASPXFileConverter.AfterFileProcessedEventHandler">
      <summary>
 This event is raised for each file, after the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="M:Econ.NetVert.ASPXFileConverter.#ctor(Econ.NetVert.ConverterLanguagesAutodetectable)">
      <summary>
 Create new ASPXFileConverter instance. 
 </summary>
 <param name="language">An enumeration value. Use <b>VBNetToCSharp</b> to convert from VB.NET to C# or <b>CSharpToVBNet</b> to convert from C# to VB.NET.</param>
 <remarks>
 The property <b>language</b> could not be changed on existing instances. 
 </remarks></member>
    <member name="P:Econ.NetVert.ASPXFileConverter.TotalFilesCount">
      <summary>
 Returns the total number of files that matched the wildcard. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.ASPXFileConverter.ConvertedFilesCount">
      <summary>
 Returns the number of files that are converted without errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.ASPXFileConverter.FailedFilesCount">
      <summary>
 Returns the number of files that failed converting, because of errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.ASPXFileConverter.SummaryText">
      <summary>
 Returns the summary text. 
 </summary>
    </member>
    <member name="M:Econ.NetVert.ASPXFileConverter.ConvertFiles(System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
 Convert multiple ASPX files. 
 </summary>
 <param name="sourceDir">The full path to the source directory.</param>
 <param name="wildcards">One or multiple wildcards or filenames to search for in sourceDir (default is <b>*.aspx,*.ascx</b>).<br />
 When using multiple wildcards, use comma as delimiter.</param>
 <param name="targetDir">The full path to the destination directory (default is same than sourceDir).</param>
 <param name="recurseSubDirs">True if subdirectories should be included (default is false).</param>
 <param name="overwriteExistingFiles">True if existing files should be overwriten (default is false).</param>
 ----------------------------------------------------------------------------- 
 <remarks>
 If the targetDir equals to sourceDir, the converted filenames get modified as follow: "(file).converted.(ext)"<br />
 For example: "default.aspx" (VB.NET) will be converted to "default.converted.aspx" (C#) 
 </remarks></member>
    <member name="M:Econ.NetVert.ASPXFileConverter.ConvertFile(System.String,System.String,System.Boolean)">
      <summary>
 Convert single ASPX file. 
 </summary>
 <param name="sourceFile">The full path and filename to the source ASPX file.</param>
 <param name="targetFile">The full path and filename to the destination ASPX file.</param>
 <param name="overwriteExistingFile">True if existing file should be overwriten (default is false).</param></member>
    <member name="M:Econ.NetVert.ASPXFileConverter.ResetCounters">
      <summary>
 Reset all Count properties. 
 </summary>
    </member>
    <member name="T:Econ.NetVert.CodeFileConverter">
      <summary>
 Converts codefiles between VB.NET and C#. 
 </summary>
 <example> This sample converts all VB.NET Files from "C:\VBFiles" to "C:\CSharpFiles". 
 <code lang="Visual Basic">
     Sub ConvertFiles() 
       Dim TmpConv As New CodeFileConverter(ConverterLanguages.VBNetToCSharp, AddressOf OutputText) 
       TmpConv.ConvertFiles("C:\VBFiles", "", "C:\CSharpFiles", True, True) 
     End Sub 
     Private Sub OutputText(ByVal textLine As String) 
       'TODO: write textLine to output window or logfile here 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertFiles() 
     { 
       CodeFileConverter TmpConv = new CodeFileConverter(ConverterLanguages.VBNetToCSharp, new OutputProcedureDelegate(OutputText)); 
       TmpConv.ConvertFiles("C:\\VBFiles", "", "C:\\CSharpFiles", true, true); 
     } 
     private void OutputText(string textLine) 
     { 
       //TODO: write textLine to output window or logfile here 
     } 
 </code>
 </example>
 <history>
   [esen]  15.07.2005  created 
 	[esen]	17.10.2005	v1.0 
 	[esen]	30.12.2005	v1.1 
   [esen]  21.03.2006  v2.0 
 </history></member>
    <member name="E:Econ.NetVert.CodeFileConverter.BeforeFileProcessed" />
    <member name="T:Econ.NetVert.CodeFileConverter.BeforeFileProcessedEventHandler">
      <summary>
 This event is raised for each file, before the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="E:Econ.NetVert.CodeFileConverter.AfterFileProcessed" />
    <member name="T:Econ.NetVert.CodeFileConverter.AfterFileProcessedEventHandler">
      <summary>
 This event is raised for each file, after the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="M:Econ.NetVert.CodeFileConverter.#ctor(Econ.NetVert.ConverterLanguages)">
      <summary>
 Create new CodeFileConverter instance. 
 </summary>
 <param name="language">An enumeration value. Use <b>VBNetToCSharp</b> to convert from VB.NET to C# or <b>CSharpToVBNet</b> to convert from C# to VB.NET.</param>
 <remarks>
 The property <b>language</b> could not be changed on existing instances. 
 </remarks></member>
    <member name="P:Econ.NetVert.CodeFileConverter.DefaultWildcard">
      <summary>
 Default wildcard to search for files. Allways "*.vb" or "*.cs" 
 </summary>
 <returns>"*.vb" for VBNetToCSharp, "*.cs" for CSharpToVBNet</returns></member>
    <member name="P:Econ.NetVert.CodeFileConverter.OutputFileExtension">
      <summary>
 Returns the extension for converted files. Allways "cs" or "vb" 
 </summary>
 <returns>"cs" for VBNetToCSharp, "vb" for CSharpToVBNet</returns></member>
    <member name="P:Econ.NetVert.CodeFileConverter.TotalFilesCount">
      <summary>
 Returns the total number of files that matched the wildcard. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.CodeFileConverter.ConvertedFilesCount">
      <summary>
 Returns the number of files that are converted without errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.CodeFileConverter.FailedFilesCount">
      <summary>
 Returns the number of files that failed converting, because of errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.CodeFileConverter.SummaryText">
      <summary>
 Returns the summary text. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.CodeFileConverter.FixNamespaces">
      <summary>
 Specifies a comma-sepearated list of namespaces to fix.<br />
 If the <b>FixNamespace</b> parameter of the <b>Convert</b>-Methods is enabled, the converter appends using-statements at 
 beginning of C#-Files if converting from VB.NET to C# or removes import-statements from VB.NET-files if they are one of the 
 here specified namespaces. 
 </summary>
    </member>
    <member name="M:Econ.NetVert.CodeFileConverter.ConvertFiles(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Convert multiple codefiles. 
 </summary>
 <param name="sourceDir">The full path to the source directory.</param>
 <param name="wildcards">One or multiple wildcards or filenames to search for in sourceDir (default is <b>CodeFileConverter.DefaultWildcard</b>).<br />
 When using multiple wildcards, use comma as delimiter. For example: <b>a*.vb,b*.vb,c*.vb</b> to convert all codefiles beginning with a, b or c.</param>
 <param name="targetDir">The full path to the destination directory (default is same than sourceDir).</param>
 <param name="recurseSubDirs">True if subdirectories should be included (default is false).</param>
 <param name="overwriteExistingFiles">True if existing files should be overwriten (default is false).</param>
 <param name="fixNamespaces">True if enable the append/remove default-using-statements as defined in the FixNamespaces Property (default is false).</param></member>
    <member name="M:Econ.NetVert.CodeFileConverter.ConvertFile(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
 Convert single codefile. 
 </summary>
 <param name="sourceFile">The full path and filename to the source codefile.</param>
 <param name="targetFile">The full path and filename to the destination codefile (default is same than sourceFile with changed extension).</param>
 <param name="overwriteExistingFile">True if existing file should be overwriten (default is false).</param>
 <param name="fixNamespaces">True if enable the append/remove default-using-statements as defined in the FixNamespaces Property (default is false).</param></member>
    <member name="M:Econ.NetVert.CodeFileConverter.ResetCounters">
      <summary>
 Reset all Count properties. 
 </summary>
    </member>
    <member name="T:Econ.NetVert.ConverterLanguages">
      <summary>
 Determines the source and target programming language. 
 </summary>
 <remarks>
 Use <b>VBNetToCSharp</b> to convert from VB.NET to C# or <b>CSharpToVBNet</b> to convert from C# to VB.NET. 
 </remarks></member>
    <member name="T:Econ.NetVert.ConverterLanguagesAutodetectable">
      <summary>
 Determines the source and target programming language for ASP.NET conversion. 
 </summary>
 <remarks>
 Used for ASPX language selection.<br />
 Autodetect searchs for the LANGUAGE="xx" attribut in the ASP.NET page-directive. 
 </remarks></member>
    <member name="T:Econ.NetVert.CSVBConverter">
      <summary>
 Converts C# code to VB.NET code. 
 </summary>
 <example> This sample shows how to convert C# code to VB.NET code. 
 You need a TextBox named <b>TxtFromCs</b> that contains the C# code and a 
 TextBox named <b>TxtToVb</b> where the resulting VB.NET will be filled in. 
 <code lang="Visual Basic">
     Sub ConvertCode() 
       Dim TmpConv As CSVBConverter = CSVBConverter.Convert(TxtFromCs.Text) 
       TxtToVb.Text = TmpConv.VBSource 
       If TmpConv.HasError Then 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation) 
       End If 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertCode() 
       CSVBConverter TmpConv = CSVBConverter.Convert(TxtFromCs.Text); 
       TxtToVb.Text = TmpConv.VBSource; 
       if (TmpConv.HasError) { 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); 
       } 
     } 
 </code>
 This sample converts the same text, but only statements. 
 <code lang="Visual Basic">
     Sub ConvertStatements() 
       Dim TmpConv As CSVBConverter = CSVBConverter.ConvertMethodBody(TxtFromCs.Text) 
       TxtToVb.Text = TmpConv.VBSource 
       If TmpConv.HasError Then 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation) 
       End If 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertStatements() 
       CSVBConverter TmpConv = CSVBConverter.ConvertMethodBody(TxtFromCs.Text); 
       TxtToVb.Text = TmpConv.VBSource; 
       if (TmpConv.HasError) { 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); 
       } 
     } 
 </code>
 </example>
 <remarks>
 Results of the <b>Convert</b>-Functions are returned as instances of this class. 
 </remarks>
 <history>
   [esen]  15.07.2005  created 
 	[esen]	17.10.2005	v1.0 
 	[esen]	29.12.2005	v1.1 
   [esen]  21.03.2006  v2.0 
 </history></member>
    <member name="M:Econ.NetVert.CSVBConverter.Convert(System.String,System.String)">
      <summary>
 Converts one or many namespaces, classes or methods. 
 </summary>
 <param name="csSource">The C# source code.</param>
 <param name="fixNamespaces">Comma-sepearated list of namespaces to fix (default is none).</param>
 <returns>New instance of class CSVBConverter</returns>
 <remarks>
 Supported is any code that can be compiled with C# compiler, standing in a single .cs file. 
 </remarks></member>
    <member name="M:Econ.NetVert.CSVBConverter.ConvertMethodBody(System.String)">
      <summary>
 Converts codesnippets and simple statements. 
 </summary>
 <param name="csMethodBody">C# source code of a function or procedure.</param>
 <returns>New instance of class CSVBConverter</returns></member>
    <member name="P:Econ.NetVert.CSVBConverter.HasError">
      <summary>
 Is an error detected. 
 </summary>
 <returns>True if an error is detected.</returns>
 <remarks>
 If an error is detected the property <b>ErrorText</b> contains the details about the error.<br />
 If no error is detected,the property <b>CSharpSource</b> contains the result. 
 </remarks></member>
    <member name="P:Econ.NetVert.CSVBConverter.ErrorText">
      <summary>
 Error description. 
 </summary>
 <returns />
 <remarks>
 If the error is a parser error, 5 codelines are returned as well to show the position of error. 
 </remarks></member>
    <member name="P:Econ.NetVert.CSVBConverter.VBSource">
      <summary>
 The result VB.NET source code. 
 </summary>
 <returns />
 <remarks>
 Returns the converted VB.NET source code, if no errors are detected. 
 </remarks></member>
    <member name="T:Econ.NetVert.OutputProcedureDelegate">
      <summary>
 A method that is used to display output messages. 
 </summary>
    </member>
    <member name="T:Econ.NetVert.ProcessedFileEventArgs">
      <summary>
 Contains informations about the conversion of a file. 
 </summary>
    </member>
    <member name="T:Econ.NetVert.VBCSConverter">
      <summary>
 Converts VB.NET code to C# code. 
 </summary>
 <example> This sample shows how to convert VB.NET code to C# code. 
 You need a TextBox named <b>TxtFromVb</b> that contains the VB.NET code and a 
 TextBox named <b>TxtToCs</b> where the resulting C# will be filled in. 
 <code lang="Visual Basic">
     Sub ConvertCode() 
       Dim TmpConv As VBCSConverter = VBCSConverter.Convert(TxtFromVb.Text) 
       TxtToCs.Text = TmpConv.CSharpSource 
       If TmpConv.HasError Then 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation) 
       End If 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertCode() 
       VBCSConverter TmpConv = VBCSConverter.Convert(TxtFromVb.Text); 
       TxtToCs.Text = TmpConv.CSharpSource; 
       if (TmpConv.HasError) { 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); 
       } 
     } 
 </code>
 This sample converts the same text, but only statements. 
 <code lang="Visual Basic">
     Sub ConvertStatements() 
       Dim TmpConv As VBCSConverter = VBCSConverter.ConvertMethodBody(TxtFromVb.Text) 
       TxtToCs.Text = TmpConv.CSharpSource 
       If TmpConv.HasError Then 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation) 
       End If 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertStatements() 
       VBCSConverter TmpConv = VBCSConverter.ConvertMethodBody(TxtFromVb.Text); 
       TxtToCs.Text = TmpConv.CSharpSource; 
       if (TmpConv.HasError) { 
         MessageBox.Show(TmpConv.ErrorText, "Parser Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); 
       } 
     } 
 </code>
 </example>
 <remarks>
 Results of the <b>Convert</b>-Functions are returned as instances of this class. 
 </remarks>
 <history>
   [esen]  15.07.2005  created 
 	[esen]	17.10.2005	v1.0 
 	[esen]	29.12.2005	v1.1 
   [esen]  21.03.2006  v2.0 
 </history></member>
    <member name="M:Econ.NetVert.VBCSConverter.Convert(System.String,System.String)">
      <summary>
 Converts one or many namespaces, classes or methods. 
 </summary>
 <param name="vbSource">The VB.NET source code.</param>
 <param name="fixNamespaces">Comma-sepearated list of namespaces to fix (default is none).</param>
 <returns>New instance of class VBCSConverter</returns>
 <remarks>
 Supported is any code that can be compiled with VB.NET compiler, standing in a single .vb file. 
 </remarks></member>
    <member name="M:Econ.NetVert.VBCSConverter.ConvertMethodBody(System.String)">
      <summary>
 Converts codesnippets and simple statements. 
 </summary>
 <param name="vbMethodBody">VB.NET source code of a function or procedure.</param>
 <returns>New instance of class VBCSConverter</returns>
 <remarks>
 Supported are single or multiple lines of code that can be placed inside a procedure. 
 </remarks></member>
    <member name="P:Econ.NetVert.VBCSConverter.HasError">
      <summary>
 Result-Property: Is an error detected. 
 </summary>
 <returns>True if an error is detected.</returns>
 <remarks>
 If an error is detected the property <b>ErrorText</b> contains the details about the error.<br />
 If no error is detected,the property <b>CSharpSource</b> contains the result. 
 </remarks></member>
    <member name="P:Econ.NetVert.VBCSConverter.ErrorText">
      <summary>
 Result-Property: Error description. 
 </summary>
 <returns />
 <remarks>
 If the error is a parser error, 5 codelines are returned as well to show the position of error. 
 </remarks></member>
    <member name="P:Econ.NetVert.VBCSConverter.CSharpSource">
      <summary>
 Result-Property: The converted C# source code. 
 </summary>
 <returns />
 <remarks>
 Returns the converted C# source code, if no errors are detected. 
 </remarks></member>
    <member name="T:Econ.NetVert.VSProjectFileConverter">
      <summary>
 Converts Visual Studio projects between VB.NET and C#. 
 </summary>
 <remarks>
 Supported are Microsoft Visual Studio .NET 2002/2003 and Visual Studio 2005 projects. 
 </remarks>
 <example> This sample converts all VB.NET Projects from "C:\VBProjects" to "C:\CSharpProjects". 
 <code lang="Visual Basic">
     Sub ConvertProjects() 
       Dim TmpConv As New VSProjectFileConverter(ConverterLanguages.VBNetToCSharp, AddressOf OutputText) 
       TmpConv.ConvertProjects("C:\VBProjects", "", "C:\CSharpProjects", True, True) 
     End Sub 
     Private Sub OutputText(ByVal textLine As String) 
       'TODO: write textLine to output window or logfile here 
     End Sub 
 </code>
 <code lang="C#">
     void ConvertProjects() 
     { 
       CodeFileConverter TmpConv = new VSProjectConverter(ConverterLanguages.VBNetToCSharp, new OutputProcedureDelegate(OutputText)); 
       TmpConv.ConvertProjects("C:\\VBProjects", "", "C:\\CSharpProjects", true, true); 
     } 
     private void OutputText(string textLine) 
     { 
       //TODO: write textLine to output window or logfile here 
     } 
 </code>
 </example>
 <history>
   [esen]  22.12.2005  created 
 	[esen]	30.12.2005	v1.1 
   [esen]  21.03.2006  v2.0 
 </history></member>
    <member name="E:Econ.NetVert.VSProjectFileConverter.BeforeFileProcessed" />
    <member name="T:Econ.NetVert.VSProjectFileConverter.BeforeFileProcessedEventHandler">
      <summary>
 This event is raised for each file, before the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="E:Econ.NetVert.VSProjectFileConverter.AfterFileProcessed" />
    <member name="T:Econ.NetVert.VSProjectFileConverter.AfterFileProcessedEventHandler">
      <summary>
 This event is raised for each file, after the conversion procedure. 
 </summary>
 <param name="sender" />
 <param name="e" />
 <remarks /></member>
    <member name="M:Econ.NetVert.VSProjectFileConverter.#ctor(Econ.NetVert.ConverterLanguages)">
      <summary>
 Create new VSProjectFileConverter instance. 
 </summary>
 <param name="language">An enumeration value. Use <b>VBNetToCSharp</b> to convert from VB.NET to C# or <b>CSharpToVBNet</b> to convert from C# to VB.NET.</param>
 <remarks>
 The property <b>language</b> could not be changed on existing instances. 
 </remarks></member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.DefaultWildcard">
      <summary>
 Default wildcard to search for projects. Allways "*.vbproj" or "*.csproj" 
 </summary>
 <returns>"*.vbproj" for VBNetToCSharp, "*.csproj" for CSharpToVBNet</returns></member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.OutputFileExtension">
      <summary>
 Returns the extension for converted projects. Allways "csproj" or "vbproj" 
 </summary>
 <returns>"csproj" for VBNetToCSharp, "vbproj" for CSharpToVBNet</returns></member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.TotalProjectsCount">
      <summary>
 Returns the total number of projects that matched the wildcard. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.CopyFilesCount">
      <summary>
 Returns the total number of copied files that where found in projects. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.TotalCodeFilesCount">
      <summary>
 Returns the total number of codefiles that where found in projects. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.ConvertedCodeFilesCount">
      <summary>
 Returns the number of codefiles that are converted without errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.FailedCodeFilesCount">
      <summary>
 Returns the number of codefiles that failed converting, because of errors. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.SummaryText">
      <summary>
 Returns the summary text. 
 </summary>
    </member>
    <member name="P:Econ.NetVert.VSProjectFileConverter.FixNamespaces">
      <summary>
 Specifies a comma-sepearated list of namespaces to fix.<br />
 If the <b>FixNamespace</b> parameter of the <b>Convert</b>-Methods is enabled, the converter appends using-statements at 
 beginning of C#-Files if converting from VB.NET to C# or removes import-statements from VB.NET-files if they are one of the 
 here specified namespaces. 
 </summary>
    </member>
    <member name="M:Econ.NetVert.VSProjectFileConverter.ConvertProjects(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
 Convert multiple Visual Studio projects. 
 </summary>
 <param name="sourceDir">The full path to the source directory.</param>
 <param name="wildcards">One or multiple wildcards or filenames to search for in sourceDir (default is <b>VSProjectConverter.DefaultWildcard</b>).<br />
 When using multiple wildcards, use comma as delimiter. For example: <b>a*.vbproj,b*.vbproj,c*.vbproj</b> to convert all projectfiles beginning with a, b or c.</param>
 <param name="targetDir">The full path to the destination directory (default is same than sourceDir).</param>
 <param name="recurseSubDirs">True if subdirectories should be included (default is false).</param>
 <param name="overwriteExistingFiles">True if existing files should be overwriten (default is false).</param>
 <param name="fixNamespaces">True if enable the append/remove default-using-statements as defined in the FixNamespaces Property (default is false).</param></member>
    <member name="M:Econ.NetVert.VSProjectFileConverter.ConvertProject(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
 Convert single Visual Studio project. 
 </summary>
 <param name="sourceFile">The full path and filename to the source project file.</param>
 <param name="targetFile">The full path and filename to the destination project file (default is same than sourceFile with changed extension).</param>
 <param name="overwriteExistingFile">True if existing file should be overwriten (default is false).</param>
 <param name="fixNamespaces">True if enable the append/remove default-using-statements as defined in the FixNamespaces Property (default is false).</param></member>
    <member name="M:Econ.NetVert.VSProjectFileConverter.ResetCounters">
      <summary>
 Reset all Count properties. 
 </summary>
    </member>
  </members>
</doc>